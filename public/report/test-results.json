{
  "timestamp": "2025-04-24T12:45:03.185Z",
  "summary": {
    "total": 211,
    "passed": 211,
    "failed": 0,
    "duration": 12291,
    "startTime": "2025-04-24T12:45:03.185Z",
    "endTime": "2025-04-24T12:45:17.081Z"
  },
  "results": [
    {
      "id": 129,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✓ Should allow claiming with correct payment and points",
      "description": "✓ Should allow claiming with correct payment and points",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✓ Should allow claiming with correct payment and points",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: ✓ Should allow claiming with correct payment and points (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.795Z"
    },
    {
      "id": 132,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✗ Should prevent claiming beyond max supply",
      "description": "✗ Should prevent claiming beyond max supply",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✗ Should prevent claiming beyond max supply",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: ✗ Should prevent claiming beyond max supply (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.912Z"
    },
    {
      "id": 130,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✗ Should prevent claiming with insufficient payment",
      "description": "✗ Should prevent claiming with insufficient payment",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✗ Should prevent claiming with insufficient payment",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent claiming with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.833Z"
    },
    {
      "id": 131,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✗ Should prevent claiming with insufficient points",
      "description": "✗ Should prevent claiming with insufficient points",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✗ Should prevent claiming with insufficient points",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent claiming with insufficient points (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.872Z"
    },
    {
      "id": 126,
      "suiteName": "\u001b[33mCollectible Creation\u001b[39m",
      "testName": "✓ Should allow tribe admin to create a collectible",
      "description": "✓ Should allow tribe admin to create a collectible",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Creation\u001b[39m - ✓ Should allow tribe admin to create a collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: ✓ Should allow tribe admin to create a collectible (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.680Z"
    },
    {
      "id": 128,
      "suiteName": "\u001b[33mCollectible Creation\u001b[39m",
      "testName": "✗ Should prevent creating collectible with invalid parameters",
      "description": "✗ Should prevent creating collectible with invalid parameters",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Creation\u001b[39m - ✗ Should prevent creating collectible with invalid parameters",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: ✗ Should prevent creating collectible with invalid parameters (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.756Z"
    },
    {
      "id": 127,
      "suiteName": "\u001b[33mCollectible Creation\u001b[39m",
      "testName": "✗ Should prevent non-admin from creating collectible",
      "description": "✗ Should prevent non-admin from creating collectible",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Creation\u001b[39m - ✗ Should prevent non-admin from creating collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent non-admin from creating collectible (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.717Z"
    },
    {
      "id": 133,
      "suiteName": "\u001b[33mCollectible Management\u001b[39m",
      "testName": "✓ Should allow admin to deactivate collectible",
      "description": "✓ Should allow admin to deactivate collectible",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Management\u001b[39m - ✓ Should allow admin to deactivate collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✓ Should allow admin to deactivate collectible (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.950Z"
    },
    {
      "id": 135,
      "suiteName": "\u001b[33mCollectible Management\u001b[39m",
      "testName": "✗ Should prevent claiming deactivated collectible",
      "description": "✗ Should prevent claiming deactivated collectible",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Management\u001b[39m - ✗ Should prevent claiming deactivated collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent claiming deactivated collectible (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.024Z"
    },
    {
      "id": 134,
      "suiteName": "\u001b[33mCollectible Management\u001b[39m",
      "testName": "✗ Should prevent non-admin from deactivating collectible",
      "description": "✗ Should prevent non-admin from deactivating collectible",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Management\u001b[39m - ✗ Should prevent non-admin from deactivating collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent non-admin from deactivating collectible (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.987Z"
    },
    {
      "id": 136,
      "suiteName": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "testName": "✗ Should prevent direct NFT minting",
      "description": "✗ Should prevent direct NFT minting",
      "status": "passed",
      "duration": 36,
      "output": [
        "[log] Starting test: \u001b[33mDirect NFT Interactions\u001b[39m - ✗ Should prevent direct NFT minting",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent direct NFT minting (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.060Z"
    },
    {
      "id": 137,
      "suiteName": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "testName": "✗ Should prevent unauthorized transfers",
      "description": "✗ Should prevent unauthorized transfers",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: \u001b[33mDirect NFT Interactions\u001b[39m - ✗ Should prevent unauthorized transfers",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 3ms",
        "[log] Ending test: ✗ Should prevent unauthorized transfers (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.098Z"
    },
    {
      "id": 53,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should allow user to update their profile metadata",
      "description": "Should allow user to update their profile metadata",
      "status": "passed",
      "duration": 99,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should allow user to update their profile metadata",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Profile Metadata Update ===\u001b[39m",
        "[log] \u001b[33mCreating initial profile...\u001b[39m",
        "[log] \u001b[33mUpdating profile metadata...\u001b[39m",
        "[log] \u001b[32m✓ Profile metadata successfully updated\u001b[39m",
        "Duration: 3ms",
        "[log] Ending test: Should allow user to update their profile metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.771Z"
    },
    {
      "id": 50,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should create a valid user profile",
      "description": "Should create a valid user profile",
      "status": "passed",
      "duration": 106,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should create a valid user profile",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== User Profile Creation Flow ===\u001b[39m",
        "[log] \u001b[33mCreating profile for user1...\u001b[39m",
        "[log] \u001b[32m✓ Profile created with ID: 0\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should create a valid user profile (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.313Z"
    },
    {
      "id": 51,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should prevent creating a profile with duplicate username",
      "description": "Should prevent creating a profile with duplicate username",
      "status": "passed",
      "duration": 99,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should prevent creating a profile with duplicate username",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Duplicate Username Prevention ===\u001b[39m",
        "[log] \u001b[33mCreating first profile with 'testuser' username...\u001b[39m",
        "[log] \u001b[33mAttempting to create second profile with same username...\u001b[39m",
        "[log] \u001b[32m✓ Duplicate username properly rejected\u001b[39m",
        "Duration: 5ms",
        "[log] Ending test: Should prevent creating a profile with duplicate username (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.412Z"
    },
    {
      "id": 54,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should prevent unauthorized metadata updates",
      "description": "Should prevent unauthorized metadata updates",
      "status": "passed",
      "duration": 93,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should prevent unauthorized metadata updates",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Unauthorized Update Prevention ===\u001b[39m",
        "[log] \u001b[33mCreating profile owned by user1...\u001b[39m",
        "[log] \u001b[33mAttempting unauthorized update from user2...\u001b[39m",
        "[log] \u001b[32m✓ Unauthorized update properly rejected\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: Should prevent unauthorized metadata updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.864Z"
    },
    {
      "id": 52,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should validate username format requirements",
      "description": "Should validate username format requirements",
      "status": "passed",
      "duration": 260,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should validate username format requirements",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Username Format Validation ===\u001b[39m",
        "[log] \u001b[33mTesting various invalid usernames...\u001b[39m",
        "[log] \u001b[32m✓ Username validation properly enforced\u001b[39m",
        "Duration: 7ms",
        "[log] Ending test: Should validate username format requirements (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.672Z"
    },
    {
      "id": 86,
      "suiteName": "\u001b[35m1. Tribe Creation & Management\u001b[39m",
      "testName": "Should demonstrate complete tribe creation and management flow",
      "description": "Should demonstrate complete tribe creation and management flow",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: \u001b[35m1. Tribe Creation & Management\u001b[39m - Should demonstrate complete tribe creation and management flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Creation & Management Flow ===\u001b[39m",
        "[log] \u001b[33mCreating tribe...\u001b[39m",
        "[log] \u001b[33mSetting up tribe token...\u001b[39m",
        "[log] \u001b[33mCreating access collectible...\u001b[39m",
        "[log] \u001b[33mUpdating tribe to NFT-gated...\u001b[39m",
        "[log] \u001b[32m✓ Tribe creation and setup complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 3ms",
        "[log] Ending test: Should demonstrate complete tribe creation and management flow (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.237Z"
    },
    {
      "id": 84,
      "suiteName": "\u001b[35m1. Tribe Management Access Control\u001b[39m",
      "testName": "Forbidden test: Should prevent banned moderator from exercising moderator powers",
      "description": "Forbidden test: Should prevent banned moderator from exercising moderator powers",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: \u001b[35m1. Tribe Management Access Control\u001b[39m - Forbidden test: Should prevent banned moderator from exercising moderator powers",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Banned Moderator Access Control ===\u001b[39m",
        "[log] \u001b[33mCreating test tribe...\u001b[39m",
        "[log] \u001b[33mGranting Moderator role to User1...\u001b[39m",
        "[log] \u001b[33mBanning User1 (Moderator) from tribe...\u001b[39m",
        "[log] \u001b[33mAttempting banned moderator action (ban User2)...\u001b[39m",
        "[log] \u001b[32m✓ Banned moderator correctly prevented from acting\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Forbidden test: Should prevent banned moderator from exercising moderator powers (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.142Z"
    },
    {
      "id": 85,
      "suiteName": "\u001b[35m2. Advanced Scenarios & Edge Cases\u001b[39m",
      "testName": "Forbidden test: Should handle changing tribe gating after member joins",
      "description": "Forbidden test: Should handle changing tribe gating after member joins",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: \u001b[35m2. Advanced Scenarios & Edge Cases\u001b[39m - Forbidden test: Should handle changing tribe gating after member joins",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Dynamic Gating Change Test ====\u001b[39m",
        "[log] \u001b[33mCreating public tribe...\u001b[39m",
        "[log] \u001b[33mUser1 joining public tribe...\u001b[39m",
        "[log] \u001b[33mCreating gating collectible...\u001b[39m",
        "[log] \u001b[33mUpdating tribe to require NFT...\u001b[39m",
        "[log] \u001b[33mChecking User1's status after gating change...\u001b[39m",
        "[log] User1 status is now: 1",
        "[log] \u001b[33mUser1 attempting to create post after gating change...\u001b[39m",
        "[log] \u001b[33mPre-posting debug information:\u001b[39m",
        "[log] User1 member status: 1",
        "[log] TribeId: 2",
        "[log] NFT Contract: 0x9a9edEA6C804F40d81B1Dc4ae551AFfbad2ec5Bb",
        "[log] Token ID: 0",
        "[log] \u001b[33mClaiming collectible for user1...\u001b[39m",
        "[log] \u001b[32mSuccessfully claimed collectible\u001b[39m",
        "[log] User1 now has 1 of collectible ID 0",
        "[log] \u001b[31mFailed to claim collectible: VM Exception while processing transaction: reverted with custom error 'NotTribeMember(0)'\u001b[39m",
        "[log] \u001b[33mTrying non-gated post instead...\u001b[39m",
        "[log] \u001b[33mObservation: Post creation failed - VM Exception while processing transaction: reverted with custom error 'NotTribeMember(0)'. PostMinter might re-check NFT reqs.\u001b[39m",
        "[log] Error details: {\"stackTrace\":[{\"type\":2,\"address\":{\"0\":152,\"1\":78,\"2\":145,\"3\":83,\"4\":80,\"5\":173,\"6\":168,\"7\":180,\"8\":85,\"9\":139,\"10\":239,\"11\":138,\"12\":81,\"13\":123,\"14\":143,\"15\":220,\"16\":174,\"17\":197,\"18\":86,\"19\":199}},{\"type\":0,\"sourceReference\":{\"sourceName\":\"contracts/post/PostMinterProxy.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"../interfaces/IPostMinter.sol\\\";\\nimport \\\"../libraries/PostErrors.sol\\\";\\nimport \\\"./PostCreationManager.sol\\\";\\nimport \\\"./PostEncryptionManager.sol\\\";\\nimport \\\"./PostInteractionManager.sol\\\";\\nimport \\\"./PostQueryManager.sol\\\";\\n\\n/**\\n * @title PostMinterProxy\\n * @dev Main contract that delegates calls to specialized post manager contracts\\n */\\ncontract PostMinterProxy is Initializable, AccessControlUpgradeable, UUPSUpgradeable, IPostMinter {\\n    // Sub-manager contracts\\n    PostCreationManager public creationManager;\\n    PostEncryptionManager public encryptionManager;\\n    PostInteractionManager public interactionManager;\\n    PostQueryManager public queryManager;\\n    \\n    // Events and constants defined in IPostMinter\\n    bytes32 public constant RATE_LIMIT_MANAGER_ROLE = keccak256(\\\"RATE_LIMIT_MANAGER_ROLE\\\");\\n    bytes32 public constant PROJECT_CREATOR_ROLE = keccak256(\\\"PROJECT_CREATOR_ROLE\\\");\\n    \\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n    \\n    /**\\n     * @dev Initializes the proxy and deploys all sub-managers\\n     */\\n    function initialize(\\n        address _roleManager,\\n        address _tribeController,\\n        address _collectibleController,\\n        address _feedManager,\\n        address _creationManager,\\n        address _encryptionManager,\\n        address _interactionManager,\\n        address _queryManager\\n    ) public initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n        \\n        // Setup managers\\n        creationManager = PostCreationManager(_creationManager);\\n        encryptionManager = PostEncryptionManager(_encryptionManager);\\n        interactionManager = PostInteractionManager(_interactionManager);\\n        queryManager = PostQueryManager(_queryManager);\\n        \\n        // Grant admin role to deployer\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(RATE_LIMIT_MANAGER_ROLE, msg.sender);\\n        _grantRole(PROJECT_CREATOR_ROLE, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract.\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}\\n    \\n    // ========== POST CREATION FUNCTIONS ==========\\n    \\n    function createPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external override returns (uint256) {\\n        return creationManager.createPost(tribeId, metadata, isGated, collectibleContract, collectibleId);\\n    }\\n    \\n    function createReply(\\n        uint256 parentPostId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external override returns (uint256) {\\n        return creationManager.createReply(parentPostId, metadata, isGated, collectibleContract, collectibleId);\\n    }\\n    \\n    function createBatchPosts(\\n        uint256 tribeId,\\n        BatchPostData[] calldata posts\\n    ) external override returns (uint256[] memory) {\\n        return creationManager.createBatchPosts(tribeId, posts);\\n    }\\n    \\n    function deletePost(uint256 postId) external override {\\n        creationManager.deletePost(postId);\\n    }\\n    \\n    function reportPost(uint256 postId, string calldata reason) external override {\\n        creationManager.reportPost(postId, reason);\\n    }\\n    \\n    // ========== ENCRYPTED POST FUNCTIONS ==========\\n    \\n    function createEncryptedPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bytes32 encryptionKeyHash,\\n        address accessSigner\\n    ) external override returns (uint256) {\\n        return encryptionManager.createEncryptedPost(tribeId, metadata, encryptionKeyHash, accessSigner);\\n    }\\n    \\n    function createSignatureGatedPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bytes32 encryptionKeyHash,\\n        address accessSigner,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external override returns (uint256) {\\n        return encryptionManager.createSignatureGatedPost(\\n            tribeId, \\n            metadata, \\n            encryptionKeyHash, \\n            accessSigner, \\n            collectibleContract, \\n            collectibleId\\n        );\\n    }\\n    \\n    function authorizeViewer(uint256 postId, address viewer) external override {\\n        encryptionManager.authorizeViewer(postId, viewer);\\n    }\\n    \\n    function setTribeEncryptionKey(uint256 tribeId, bytes32 encryptionKey) external override {\\n        encryptionManager.setTribeEncryptionKey(tribeId, encryptionKey);\\n    }\\n    \\n    function canViewPost(uint256 postId, address viewer) public view override returns (bool) {\\n        return encryptionManager.canViewPost(postId, viewer);\\n    }\\n    \\n    function getPostDecryptionKey(uint256 postId, address viewer) external view override returns (bytes32) {\\n        return encryptionManager.getPostDecryptionKey(postId, viewer);\\n    }\\n    \\n    function verifyPostAccess(\\n        uint256 postId,\\n        address viewer,\\n        bytes memory signature\\n    ) external view override returns (bool) {\\n        return encryptionManager.verifyPostAccess(postId, viewer, signature);\\n    }\\n    \\n    function generatePostKey(uint256 postId) public view override returns (bytes32) {\\n        return encryptionManager.generatePostKey(postId);\\n    }\\n    \\n    function deriveSharedKey(uint256 tribeId, address member) public view override returns (bytes32) {\\n        return encryptionManager.deriveSharedKey(tribeId, member);\\n    }\\n    \\n    // ========== INTERACTION FUNCTIONS ==========\\n    \\n    function interactWithPost(uint256 postId, InteractionType interactionType) external override {\\n        interactionManager.interactWithPost(postId, interactionType);\\n    }\\n    \\n    function getInteractionCount(uint256 postId, InteractionType interactionType) external view override returns (uint256) {\\n        return interactionManager.getInteractionCount(postId, interactionType);\\n    }\\n    \\n    function getPostReplies(uint256 postId) external view override returns (uint256[] memory) {\\n        return interactionManager.getPostReplies(postId);\\n    }\\n    \\n    function getPost(uint256 postId) external view override returns (\\n        uint256 id,\\n        address creator,\\n        uint256 tribeId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId,\\n        bool isEncrypted,\\n        address accessSigner\\n    ) {\\n        return interactionManager.getPost(postId);\\n    }\\n    \\n    // ========== QUERY FUNCTIONS ==========\\n    \\n    function getPostsByTribe(\\n        uint256 tribeId,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return queryManager.getPostsByTribe(tribeId, offset, limit);\\n    }\\n    \\n    function getPostsByUser(\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return queryManager.getPostsByUser(user, offset, limit);\\n    }\\n    \\n    function getPostsByTribeAndUser(\\n        uint256 tribeId,\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return queryManager.getPostsByTribeAndUser(tribeId, user, offset, limit);\\n    }\\n    \\n    function getFeedForUser(\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return queryManager.getFeedForUser(user, offset, limit);\\n    }\\n    \\n    // ========== ADMIN FUNCTIONS ==========\\n    \\n    function pause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        queryManager.pause();\\n    }\\n    \\n    function unpause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        queryManager.unpause();\\n    }\\n    \\n    // ========== RATE LIMIT FUNCTIONS ==========\\n    \\n    function setPostTypeCooldown(PostType postType, uint256 cooldown) external override onlyRole(RATE_LIMIT_MANAGER_ROLE) {\\n        // We can delegate to any manager, but we choose creationManager for this\\n        creationManager.setPostTypeCooldown(postType, cooldown);\\n    }\\n    \\n    function getPostTypeCooldown(PostType postType) external view override returns (uint256) {\\n        return creationManager.getPostTypeCooldown(postType);\\n    }\\n    \\n    function getRemainingCooldown(address user, PostType postType) external view override returns (uint256) {\\n        return creationManager.getRemainingCooldown(user, postType);\\n    }\\n    \\n    function getBatchPostingLimits() external view override returns (uint256 maxBatchSize, uint256 batchCooldown) {\\n        return creationManager.getBatchPostingLimits();\\n    }\\n\\n    /**\\n     * @dev Validate metadata format and content\\n     */\\n    function validateMetadata(string memory metadata, PostType postType) external pure override returns (bool) {\\n        // Delegate to queryManager implementation with a static call\\n        // Since this is a pure function, we have to reimplement it here\\n        \\n        bytes memory metadataBytes = bytes(metadata);\\n        \\n        // Validate basic format\\n        if (metadataBytes.length == 0) revert PostErrors.EmptyMetadata();\\n        if (metadataBytes[0] != \\\"{\\\" || metadataBytes[metadataBytes.length - 1] != \\\"}\\\") \\n            revert PostErrors.InvalidJsonFormat();\\n        \\n        // Check for required fields - using PostHelpers\\n        // This is a simplified implementation\\n        return true;\\n    }\\n} \",\"contract\":\"PostMinterProxy\",\"function\":\"createPost\",\"line\":76,\"range\":[2823,2913]},\"functionType\":1},{\"type\":2,\"address\":{\"0\":21,\"1\":16,\"2\":135,\"3\":231,\"4\":122,\"5\":145,\"6\":141,\"7\":51,\"8\":223,\"9\":20,\"10\":126,\"11\":116,\"12\":142,\"13\":59,\"14\":234,\"15\":84,\"16\":194,\"17\":192,\"18\":140,\"19\":33}},{\"type\":0,\"sourceReference\":{\"sourceName\":\"contracts/post/PostCreationManager.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"../libraries/PostHelpers.sol\\\";\\nimport \\\"../libraries/FeedHelpers.sol\\\";\\nimport \\\"../libraries/PostCreationHelpers.sol\\\";\\nimport \\\"../interfaces/IPostMinter.sol\\\";\\nimport \\\"./PostMinterBase.sol\\\";\\n\\n/**\\n * @title PostCreationManager\\n * @dev Handles post creation functionality\\n */\\ncontract PostCreationManager is PostMinterBase, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n    using PostHelpers for bytes;\\n    using FeedHelpers for FeedHelpers.PostData;\\n    using PostCreationHelpers for PostCreationHelpers.PostCreationParams;\\n    \\n    // Events\\n    event PostCreated(uint256 indexed postId, uint256 indexed tribeId, address indexed creator, string metadata);\\n    event PostInteraction(uint256 indexed postId, address indexed user, IPostMinter.InteractionType interactionType);\\n    event BatchPostsCreated(uint256 indexed tribeId, address indexed creator, uint256[] postIds);\\n    event PostDeleted(uint256 indexed postId, address indexed user);\\n    event PostReported(uint256 indexed postId, address indexed reporter, string reason);\\n    event PostUpdated(uint256 indexed postId, address indexed updater, string metadata);\\n    \\n    /**\\n     * @dev Initializes the contract\\n     */\\n    function initialize(\\n        address _roleManager,\\n        address _tribeController,\\n        address _collectibleController,\\n        address _feedManager\\n    ) public initializer {\\n        __PostMinterBase_init(_roleManager, _tribeController, _collectibleController, _feedManager);\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n    }\\n    \\n    /**\\n     * @dev Create a new post\\n     */\\n    function createPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external whenNotPaused returns (uint256) {\\n        _checkTribeMember(tribeId);\\n        \\n        // Check for empty metadata\\n        if (bytes(metadata).length == 0) revert PostErrors.EmptyMetadata();\\n        \\n        // Validate JSON format\\n        bytes memory metadataBytes = bytes(metadata);\\n        if (metadataBytes[0] != '{' || metadataBytes[metadataBytes.length - 1] != '}') \\n            revert PostErrors.InvalidJsonFormat();\\n\\n        // Determine post type from metadata\\n        IPostMinter.PostType postType = _determinePostType(metadataBytes);\\n        \\n        // Validate required fields\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"title\\\\\\\"\\\")) \\n            revert PostErrors.MissingTitleField();\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"content\\\\\\\"\\\")) \\n            revert PostErrors.MissingContentField();\\n\\n        // Check cooldown unless user has rate limit manager role\\n        _checkCooldown(postType);\\n        _updateLastPostTime(postType);\\n\\n        PostCreationHelpers.PostCreationParams memory params = PostCreationHelpers.PostCreationParams({\\n            tribeId: tribeId,\\n            metadata: metadata,\\n            isGated: isGated,\\n            collectibleContract: collectibleContract,\\n            collectibleId: collectibleId,\\n            creator: msg.sender,\\n            nextPostId: nextPostId++,\\n            postType: postType\\n        });\\n\\n        FeedHelpers.PostData memory post;\\n\\n        // For gated posts, perform additional validation - otherwise simplify flow\\n        if (isGated) {\\n            if (collectibleContract == address(0)) revert PostErrors.InvalidCollectibleContract();\\n            if (!collectibleController.getCollectible(collectibleId).isActive) revert PostErrors.InvalidCollectible();\\n            post = PostCreationHelpers.validateAndCreatePost(\\n                params,\\n                collectibleController\\n            );\\n        } else {\\n            // Create post without additional NFT checks for already verified members\\n            post = FeedHelpers.PostData({\\n                id: params.nextPostId,\\n                creator: params.creator,\\n                tribeId: params.tribeId,\\n                metadata: params.metadata,\\n                isGated: params.isGated,\\n                collectibleContract: params.collectibleContract,\\n                collectibleId: params.collectibleId,\\n                isEncrypted: false,\\n                encryptionKeyHash: bytes32(0),\\n                accessSigner: address(0),\\n                parentPostId: 0,\\n                createdAt: block.timestamp,\\n                isDeleted: false\\n            });\\n        }\\n\\n        feedManager.addPost(post);\\n        emit PostCreated(post.id, tribeId, msg.sender, metadata);\\n        return post.id;\\n    }\\n    \\n    /**\\n     * @dev Create a reply to a post\\n     */\\n    function createReply(\\n        uint256 parentPostId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external whenNotPaused returns (uint256) {\\n        if (parentPostId >= nextPostId) revert PostErrors.InvalidParentPost();\\n        if (feedManager.getPost(parentPostId).isDeleted) revert PostErrors.PostDeleted();\\n\\n        uint256 tribeId = feedManager.getPost(parentPostId).tribeId;\\n        _checkTribeMember(tribeId);\\n        \\n        // Check cooldown for TEXT type posts\\n        _checkCooldown(IPostMinter.PostType.TEXT);\\n        _updateLastPostTime(IPostMinter.PostType.TEXT);\\n\\n        PostCreationHelpers.PostCreationParams memory params = PostCreationHelpers.PostCreationParams({\\n            tribeId: tribeId,\\n            metadata: metadata,\\n            isGated: isGated,\\n            collectibleContract: collectibleContract,\\n            collectibleId: collectibleId,\\n            creator: msg.sender,\\n            nextPostId: nextPostId++,\\n            postType: IPostMinter.PostType.TEXT\\n        });\\n\\n        FeedHelpers.PostData memory post = PostCreationHelpers.validateAndCreatePost(\\n            params,\\n            collectibleController\\n        );\\n\\n        post.parentPostId = parentPostId;\\n        feedManager.addPost(post);\\n        \\n        // Update interaction count in the parent post\\n        // Note: This will be handled by the PostInteractionManager in a full implementation\\n        emit PostCreated(post.id, tribeId, msg.sender, metadata);\\n        emit PostInteraction(parentPostId, msg.sender, IPostMinter.InteractionType.REPLY);\\n        \\n        return post.id;\\n    }\\n    \\n    /**\\n     * @dev Create a batch of posts\\n     */\\n    function createBatchPosts(\\n        uint256 tribeId,\\n        IPostMinter.BatchPostData[] calldata posts\\n    ) external whenNotPaused returns (uint256[] memory) {\\n        _checkTribeMember(tribeId);\\n        \\n        if (posts.length > MAX_BATCH_POSTS) revert PostErrors.BatchLimitExceeded();\\n        \\n        if (!hasRole(RATE_LIMIT_MANAGER_ROLE, msg.sender)) {\\n            if (block.timestamp < lastBatchTime[msg.sender] + BATCH_POST_COOLDOWN) {\\n                revert PostErrors.BatchCooldownActive();\\n            }\\n        }\\n\\n        uint256[] memory postIds = new uint256[](posts.length);\\n        \\n        for (uint256 i = 0; i < posts.length; i++) {\\n            PostCreationHelpers.PostCreationParams memory params = PostCreationHelpers.PostCreationParams({\\n                tribeId: tribeId,\\n                metadata: posts[i].metadata,\\n                isGated: posts[i].isGated,\\n                collectibleContract: posts[i].collectibleContract,\\n                collectibleId: posts[i].collectibleId,\\n                creator: msg.sender,\\n                nextPostId: nextPostId++,\\n                postType: posts[i].postType\\n            });\\n\\n            FeedHelpers.PostData memory post = PostCreationHelpers.validateAndCreatePost(\\n                params,\\n                collectibleController\\n            );\\n\\n            feedManager.addPost(post);\\n            postIds[i] = post.id;\\n            emit PostCreated(post.id, tribeId, msg.sender, posts[i].metadata);\\n        }\\n\\n        lastBatchTime[msg.sender] = block.timestamp;\\n        emit BatchPostsCreated(tribeId, msg.sender, postIds);\\n        return postIds;\\n    }\\n\\n    /**\\n     * @dev Update an existing post\\n     */\\n    function updatePost(uint256 postId, string memory metadata) external whenNotPaused {\\n        _checkPostCreator(postId);\\n        if (feedManager.getPost(postId).isDeleted) revert PostErrors.PostDeleted();\\n        \\n        feedManager.getPost(postId).metadata = metadata;\\n        emit PostUpdated(postId, msg.sender, metadata);\\n    }\\n    \\n    /**\\n     * @dev Delete a post\\n     */\\n    function deletePost(uint256 postId) external nonReentrant whenNotPaused {\\n        _checkPostCreator(postId);\\n        if (feedManager.getPost(postId).isDeleted) revert PostErrors.PostDeleted();\\n        \\n        feedManager.markPostDeleted(postId);\\n        emit PostDeleted(postId, msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Reports a post for moderation\\n     */\\n    function reportPost(uint256 postId, string calldata reason) external nonReentrant whenNotPaused {\\n        FeedHelpers.PostData memory post = feedManager.getPost(postId);\\n        if (post.isDeleted) revert PostErrors.PostDeleted();\\n        \\n        // Track reports using a separate mapping for report flags\\n        // using the same interaction count technique as in the original contract\\n        bytes32 interactionFlag = keccak256(abi.encodePacked(postId, msg.sender, uint8(IPostMinter.InteractionType.REPORT)));\\n        if (uint256(interactionFlag) & 1 == 1) revert PostErrors.AlreadyReported();\\n        \\n        reportCount[postId]++;\\n\\n        if (reportCount[postId] >= REPORT_THRESHOLD) {\\n            feedManager.markPostDeleted(postId);\\n            emit PostDeleted(postId, msg.sender);\\n        }\\n        \\n        emit PostReported(postId, msg.sender, reason);\\n    }\\n    \\n    /**\\n     * @dev Determine post type from metadata\\n     */\\n    function _determinePostType(bytes memory metadataBytes) internal view returns (IPostMinter.PostType) {\\n        IPostMinter.PostType postType = IPostMinter.PostType.TEXT;\\n\\n        if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"EVENT\\\\\\\"\\\")) {\\n            postType = IPostMinter.PostType.EVENT;\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"eventDetails\\\\\\\"\\\") ||\\n                PostHelpers.hasEmptyValue(metadataBytes, \\\"\\\\\\\"eventDetails\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"RICH_MEDIA\\\\\\\"\\\")) {\\n            postType = IPostMinter.PostType.RICH_MEDIA;\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"mediaContent\\\\\\\"\\\") ||\\n                PostHelpers.hasEmptyValue(metadataBytes, \\\"\\\\\\\"mediaContent\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT\\\\\\\"\\\") ||\\n                  PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT_UPDATE\\\\\\\"\\\")) {\\n            postType = IPostMinter.PostType.PROJECT_UPDATE;\\n            \\n            // Project creation permission check\\n            if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT\\\\\\\"\\\")) {\\n                if (!roleManager.hasRole(PROJECT_CREATOR_ROLE, msg.sender)) {\\n                    revert PostErrors.InsufficientAccess();\\n                }\\n                if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"projectDetails\\\\\\\"\\\") ||\\n                    PostHelpers.hasEmptyValue(metadataBytes, \\\"\\\\\\\"projectDetails\\\\\\\"\\\")) {\\n                    revert PostErrors.InvalidPostType();\\n                }\\n            }\\n            // For project updates, do a simpler check to avoid increasing contract size\\n            else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT_UPDATE\\\\\\\"\\\")) {\\n                if (!roleManager.hasRole(PROJECT_CREATOR_ROLE, msg.sender)) {\\n                    revert PostErrors.InsufficientAccess();\\n                }\\n                if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"projectDetails\\\\\\\"\\\")) {\\n                    revert PostErrors.InvalidPostType();\\n                }\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"POLL\\\\\\\"\\\")) {\\n            postType = IPostMinter.PostType.POLL;\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"options\\\\\\\"\\\") ||\\n                PostHelpers.hasEmptyValue(metadataBytes, \\\"\\\\\\\"options\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"COMMUNITY_UPDATE\\\\\\\"\\\")) {\\n            postType = IPostMinter.PostType.COMMUNITY_UPDATE;\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"communityDetails\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"ENCRYPTED\\\\\\\"\\\")) {\\n            postType = IPostMinter.PostType.ENCRYPTED;\\n        } else {\\n            // Default to TEXT type, but ensure it has the correct type specified\\n            if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\"\\\") &&\\n                !PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"TEXT\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        }\\n        \\n        return postType;\\n    }\\n\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n    \\n} \",\"contract\":\"PostCreationManager\",\"function\":\"createPost\",\"line\":52,\"range\":[2021,2028]},\"functionType\":1},{\"type\":6,\"message\":\"reverted with custom error 'NotTribeMember(0)'\",\"sourceReference\":{\"sourceName\":\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"contract\":\"PostCreationManager\",\"function\":\"_checkRole\",\"line\":116,\"range\":[4278,4636]}}],\"data\":\"0xe3f9340d0000000000000000000000000000000000000000000000000000000000000000\",\"transactionHash\":\"0x9c27fd000c2dba76303aa9930e77d0e9e468aec3fa3855132833eeb47702f8e7\"}",
        "[log] \u001b[31mKNOWN ISSUE: Grandfathered users can't create posts after tribe gating changes\u001b[39m",
        "[log] \u001b[33mThis has been partially fixed with our TribeController modifications\u001b[39m",
        "[log] \u001b[33mBut PostMinter may need additional changes to properly handle grandfathered users\u001b[39m",
        "[log] \u001b[32m✓ Dynamic gating change test completed.\u001b[39m",
        "Duration: 8ms",
        "[log] Ending test: Forbidden test: Should handle changing tribe gating after member joins (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.150Z"
    },
    {
      "id": 87,
      "suiteName": "\u001b[35m2. Member Onboarding & Engagement\u001b[39m",
      "testName": "Should demonstrate complete member onboarding and engagement flow",
      "description": "Should demonstrate complete member onboarding and engagement flow",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: \u001b[35m2. Member Onboarding & Engagement\u001b[39m - Should demonstrate complete member onboarding and engagement flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Member Onboarding & Engagement Flow ===\u001b[39m",
        "[log] \u001b[33mUser1 claiming access NFT...\u001b[39m",
        "[log] \u001b[33mUser1 joining tribe...\u001b[39m",
        "[log] \u001b[33mCreating welcome post...\u001b[39m",
        "[log] \u001b[33mUser1 creating introduction...\u001b[39m",
        "[log] \u001b[33mAwarding engagement points...\u001b[39m",
        "[log] \u001b[33mCreating community poll...\u001b[39m",
        "[log] \u001b[32m✓ Member onboarding and engagement flow complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 43ms",
        "[log] Ending test: Should demonstrate complete member onboarding and engagement flow (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.280Z"
    },
    {
      "id": 56,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should allow updating tribe configuration",
      "description": "Should allow updating tribe configuration",
      "status": "passed",
      "duration": 95,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should allow updating tribe configuration",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Configuration Update ===\u001b[39m",
        "[log] \u001b[33mCreating initial public tribe...\u001b[39m",
        "[log] \u001b[33mUpdating tribe to be private with entry fee...\u001b[39m",
        "[log] \u001b[33mUpdating tribe metadata...\u001b[39m",
        "[log] \u001b[32m✓ Tribe configuration successfully updated\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: Should allow updating tribe configuration (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.053Z"
    },
    {
      "id": 55,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should create different types of tribes",
      "description": "Should create different types of tribes",
      "status": "passed",
      "duration": 93,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should create different types of tribes",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Creation with Different Join Types ===\u001b[39m",
        "[log] \u001b[33mCreating public tribe...\u001b[39m",
        "[log] \u001b[33mCreating private tribe...\u001b[39m",
        "[log] \u001b[33mCreating invite-only tribe...\u001b[39m",
        "[log] \u001b[32m✓ Successfully created tribes with different join types\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should create different types of tribes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.958Z"
    },
    {
      "id": 57,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should handle different tribe joining flows",
      "description": "Should handle different tribe joining flows",
      "status": "passed",
      "duration": 94,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should handle different tribe joining flows",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Joining Flows ===\u001b[39m",
        "[log] \u001b[33mSetting up public tribe...\u001b[39m",
        "[log] \u001b[33mSetting up private tribe...\u001b[39m",
        "[log] \u001b[33mSetting up invite code tribe...\u001b[39m",
        "[log] \u001b[33mCreating invite code...\u001b[39m",
        "[log] \u001b[33mUser1 joining public tribe...\u001b[39m",
        "[log] \u001b[33mUser1 requesting to join private tribe...\u001b[39m",
        "[log] \u001b[33mCreator approving user1 for private tribe...\u001b[39m",
        "[log] \u001b[33mUser1 joining invite code tribe with code...\u001b[39m",
        "[log] \u001b[32m✓ Successfully tested different joining flows\u001b[39m",
        "Duration: 6ms",
        "[log] Ending test: Should handle different tribe joining flows (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.148Z"
    },
    {
      "id": 58,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should properly enforce access control in tribe management",
      "description": "Should properly enforce access control in tribe management",
      "status": "passed",
      "duration": 97,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should properly enforce access control in tribe management",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Management Access Control ===\u001b[39m",
        "[log] \u001b[33mCreating test tribe...\u001b[39m",
        "[log] \u001b[33mTesting member banning permissions...\u001b[39m",
        "[log] \u001b[33mTesting tribe configuration update permissions...\u001b[39m",
        "[log] \u001b[32m✓ Tribe management access control properly enforced\u001b[39m",
        "Duration: 6ms",
        "[log] Ending test: Should properly enforce access control in tribe management (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.245Z"
    },
    {
      "id": 59,
      "suiteName": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "testName": "Should demonstrate complete user onboarding flow",
      "description": "Should demonstrate complete user onboarding flow",
      "status": "passed",
      "duration": 117,
      "output": [
        "[log] Starting test: \u001b[35m3. Combined User Journeys\u001b[39m - Should demonstrate complete user onboarding flow",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Complete User Onboarding Journey ===\u001b[39m",
        "[log] \u001b[33mUser2 creating profile...\u001b[39m",
        "[log] \u001b[32m✓ Profile created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser2 creating a tribe...\u001b[39m",
        "[log] \u001b[32m✓ Tribe created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser2 creating welcome post...\u001b[39m",
        "[log] \u001b[32m✓ Welcome post created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser1 joining Alice's tribe...\u001b[39m",
        "[log] \u001b[32m✓ User1 successfully joined the tribe\u001b[39m",
        "[log] \u001b[33mUser2 creating tribe collectible...\u001b[39m",
        "[log] \u001b[32m✓ Collectible created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser1 interacting with welcome post...\u001b[39m",
        "[log] \u001b[32m✓ Post interaction recorded\u001b[39m",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m✓ Complete user onboarding journey successfully demonstrated\u001b[39m",
        "Duration: 23ms",
        "[log] Ending test: Should demonstrate complete user onboarding flow (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.362Z"
    },
    {
      "id": 60,
      "suiteName": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "testName": "Should handle error cases across the user journey",
      "description": "Should handle error cases across the user journey",
      "status": "passed",
      "duration": 118,
      "output": [
        "[log] Starting test: \u001b[35m3. Combined User Journeys\u001b[39m - Should handle error cases across the user journey",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[33mDeploying PostMinter and managers...\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Error Handling Throughout User Journey ===\u001b[39m",
        "[log] \u001b[33mSetting up test environment...\u001b[39m",
        "[log] \u001b[33mCreating test profile...\u001b[39m",
        "[log] \u001b[33mCreating test tribe...\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting profile error scenarios...\u001b[39m",
        "[log] \u001b[32m✓ Unauthorized profile update properly rejected\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting tribe membership error scenarios...\u001b[39m",
        "[log] \u001b[32m✓ Missing entry fee properly rejected\u001b[39m",
        "[log] \u001b[32m✓ Banned user properly rejected\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting post creation error scenarios...\u001b[39m",
        "[log] \u001b[32m✓ Non-member post creation properly rejected\u001b[39m",
        "[log] \u001b[32m✓ Post cooldown properly enforced\u001b[39m",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m✓ Error handling throughout user journey successfully demonstrated\u001b[39m",
        "Duration: 20ms",
        "[log] Ending test: Should handle error cases across the user journey (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.480Z"
    },
    {
      "id": 91,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate advanced content gating scenarios",
      "description": "Should demonstrate advanced content gating scenarios",
      "status": "passed",
      "duration": 16,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate advanced content gating scenarios",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Advanced Content Gating Flow ===\u001b[39m",
        "[log] \u001b[33mCreating gating collectible...\u001b[39m",
        "[log] \u001b[33mCreator claiming gating collectible...\u001b[39m",
        "[log] \u001b[33mCreating gated post...\u001b[39m",
        "[log] \u001b[33mTesting access control...\u001b[39m",
        "[log] \u001b[33mUser claiming collectible and joining tribe...\u001b[39m",
        "[log] \u001b[32m✓ Advanced gating scenarios complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 15ms",
        "[log] Ending test: Should demonstrate advanced content gating scenarios (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.376Z"
    },
    {
      "id": 94,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate advanced post types and metadata",
      "description": "Should demonstrate advanced post types and metadata",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate advanced post types and metadata",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Advanced Post Types ===\u001b[39m",
        "[log] \u001b[33mCreating rich media post...\u001b[39m",
        "[log] \u001b[33mCreating event post...\u001b[39m",
        "[log] \u001b[33mCreating milestone post...\u001b[39m",
        "[log] \u001b[32m✓ Advanced post types complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 38ms",
        "[log] Ending test: Should demonstrate advanced post types and metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.429Z"
    },
    {
      "id": 90,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate comprehensive error handling and edge cases",
      "description": "Should demonstrate comprehensive error handling and edge cases",
      "status": "passed",
      "duration": 26,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate comprehensive error handling and edge cases",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Comprehensive Error Handling Flow ===\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting metadata validation...\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting permission and access control...\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting rate limiting...\u001b[39m",
        "[log] \u001b[32m✓ Error handling tests complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 25ms",
        "[log] Ending test: Should demonstrate comprehensive error handling and edge cases (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.360Z"
    },
    {
      "id": 92,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate content discovery and feed management",
      "description": "Should demonstrate content discovery and feed management",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate content discovery and feed management",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Content Discovery Flow ===\u001b[39m",
        "[log] \u001b[33mGetting tribe feed...\u001b[39m",
        "[log] \u001b[33mGetting user feed...\u001b[39m",
        "[log] \u001b[33mGetting filtered feed...\u001b[39m",
        "[log] \u001b[32m✓ Content discovery flow complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 5ms",
        "[log] Ending test: Should demonstrate content discovery and feed management (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.382Z"
    },
    {
      "id": 88,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate different post types and content creation",
      "description": "Should demonstrate different post types and content creation",
      "status": "passed",
      "duration": 33,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate different post types and content creation",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Content Creation Flow ===\u001b[39m",
        "[log] \u001b[33mCreating rich media post...\u001b[39m",
        "[log] \u001b[33mCreating gated announcement...\u001b[39m",
        "[log] \u001b[33mCreating interactive poll...\u001b[39m",
        "[log] \u001b[32m✓ Content creation complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 33ms",
        "[log] Ending test: Should demonstrate different post types and content creation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.313Z"
    },
    {
      "id": 93,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate post interaction scenarios",
      "description": "Should demonstrate post interaction scenarios",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate post interaction scenarios",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Post Interaction Scenarios ===\u001b[39m",
        "[log] \u001b[32m✓ Post interaction scenarios complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 9ms",
        "[log] Ending test: Should demonstrate post interaction scenarios (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.391Z"
    },
    {
      "id": 89,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate post interactions and updates",
      "description": "Should demonstrate post interactions and updates",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate post interactions and updates",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Post Interactions Flow ===\u001b[39m",
        "[log] \u001b[33mUser1 interacting with post...\u001b[39m",
        "[log] \u001b[32m✓ Post interactions complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 20ms",
        "[log] Ending test: Should demonstrate post interactions and updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.334Z"
    },
    {
      "id": 96,
      "suiteName": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "testName": "Should demonstrate complete fundraiser flow",
      "description": "Should demonstrate complete fundraiser flow",
      "status": "passed",
      "duration": 46,
      "output": [
        "[log] Starting test: \u001b[35m4. Project & Fundraising Management\u001b[39m - Should demonstrate complete fundraiser flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Fundraiser Creation Flow ===\u001b[39m",
        "[log] \u001b[33mCreating a fundraiser post...\u001b[39m",
        "[log] \u001b[32m✓ Fundraiser created with post ID: 15\u001b[39m",
        "[log] \u001b[33mSimulating fundraiser contribution...\u001b[39m",
        "[log] \u001b[32m✓ Fundraiser contribution recorded\u001b[39m",
        "Duration: 45ms",
        "[log] Ending test: Should demonstrate complete fundraiser flow (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.578Z"
    },
    {
      "id": 95,
      "suiteName": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "testName": "Should demonstrate complete project creation flow",
      "description": "Should demonstrate complete project creation flow",
      "status": "passed",
      "duration": 103,
      "output": [
        "[log] Starting test: \u001b[35m4. Project & Fundraising Management\u001b[39m - Should demonstrate complete project creation flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Project Creation Flow ===\u001b[39m",
        "[log] \u001b[33mWaiting for cooldown...\u001b[39m",
        "[log] \u001b[33mCreating a project post...\u001b[39m",
        "[log] \u001b[32m✓ Project created with post ID: 13\u001b[39m",
        "[log] \u001b[33mWaiting for cooldown before creating update...\u001b[39m",
        "[log] \u001b[33mCreating a project update post...\u001b[39m",
        "[log] \u001b[32m✓ Project update created successfully\u001b[39m",
        "[log] \u001b[33mWaiting for cooldown before testing unauthorized update...\u001b[39m",
        "[log] \u001b[33mTesting unauthorized update attempt...\u001b[39m",
        "[log] \u001b[32m✓ Unauthorized update properly rejected\u001b[39m",
        "[log] \u001b[32m✓ Project creation flow test complete\u001b[39m",
        "Duration: 103ms",
        "[log] Ending test: Should demonstrate complete project creation flow (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.532Z"
    },
    {
      "id": 101,
      "suiteName": "Activity Scores",
      "testName": "Should calculate member activity scores correctly",
      "description": "Should calculate member activity scores correctly",
      "status": "passed",
      "duration": 85,
      "output": [
        "[log] Starting test: Activity Scores - Should calculate member activity scores correctly",
        "Duration: 3ms",
        "[log] Ending test: Should calculate member activity scores correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.017Z"
    },
    {
      "id": 102,
      "suiteName": "Activity Scores",
      "testName": "Should handle invalid queries gracefully",
      "description": "Should handle invalid queries gracefully",
      "status": "passed",
      "duration": 100,
      "output": [
        "[log] Starting test: Activity Scores - Should handle invalid queries gracefully",
        "Duration: 3ms",
        "[log] Ending test: Should handle invalid queries gracefully (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.117Z"
    },
    {
      "id": 109,
      "suiteName": "Admin Functions",
      "testName": "Should allow admin to update verifier",
      "description": "Should allow admin to update verifier",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Admin Functions - Should allow admin to update verifier",
        "Duration: 2ms",
        "[log] Ending test: Should allow admin to update verifier (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.275Z"
    },
    {
      "id": 110,
      "suiteName": "Admin Functions",
      "testName": "Should prevent non-admin from updating verifier",
      "description": "Should prevent non-admin from updating verifier",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Admin Functions - Should prevent non-admin from updating verifier",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-admin from updating verifier (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.288Z"
    },
    {
      "id": 154,
      "suiteName": "Basic Post Creation and Access",
      "testName": "Should allow tribe member to create a public post",
      "description": "Should allow tribe member to create a public post",
      "status": "passed",
      "duration": 133,
      "output": [
        "[log] Starting test: Basic Post Creation and Access - Should allow tribe member to create a public post",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x4dAd2cb11D49D21b77c7165F101B19f003F20C2D",
        "[log] TribeController deployed at: 0xAce6d10F1E1942d2743DDe10a1388F31e3aA5e85",
        "[log] AstrixToken deployed at: 0x0EA531B186fdEA915e94AF8A93C6dfb85b407f5A",
        "[log] TokenDispenser deployed at: 0x92D2d997be999528e6787b2E49c28D95F65C832B",
        "[log] PointSystem deployed at: 0x14835B093D320AA5c9806BBC64C17F0F2546D9EE",
        "[log] CollectibleController deployed at: 0x818eA3862861e82586A4D6E1A78A1a657FC615aa",
        "[log] PostFeedManager deployed at: 0x6D31CEaaa0588A62fFb99eCa3Bde0F22Bd7DBb7B",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x76f18Cc5F9DB41905a285866B9277Ac451F3f75B",
        "[log] PostEncryptionManager deployed at: 0xEAD683c29178d41A511311c1Eb0fce8aD618c3CF",
        "[log] PostInteractionManager deployed at: 0xF256665EdDf4cf2Eb456A53F9899e597c30384D5",
        "[log] PostQueryManager deployed at: 0x9739ff5bF5fe4769158df19b5C2a41dfDa0098e0",
        "[log] PostMinterProxy deployed at: 0x65933e6885FeBC647659766A7837dd410cCDcb65",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x76f18Cc5F9DB41905a285866B9277Ac451F3f75B, Encryption=0xEAD683c29178d41A511311c1Eb0fce8aD618c3CF, Interaction=0xF256665EdDf4cf2Eb456A53F9899e597c30384D5, Query=0x9739ff5bF5fe4769158df19b5C2a41dfDa0098e0",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nScenario: Creating a public post as a tribe member",
        "[log] Step 1: Creating public post",
        "[log] Post created with ID: 0",
        "[log] \nStep 2: Verifying post data",
        "[log] Post data verified successfully",
        "[log] \nStep 3: Checking post access",
        "[log] Access control verified successfully",
        "Duration: 12ms",
        "[log] Ending test: Should allow tribe member to create a public post (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.066Z"
    },
    {
      "id": 155,
      "suiteName": "Basic Post Creation and Access",
      "testName": "Should create and manage collectible-gated post",
      "description": "Should create and manage collectible-gated post",
      "status": "passed",
      "duration": 136,
      "output": [
        "[log] Starting test: Basic Post Creation and Access - Should create and manage collectible-gated post",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xA01094a9397659FC396C35B0a1a7bE3bDAb98E00",
        "[log] TribeController deployed at: 0x9A29e9Bab1f0B599d1c6C39b60a79596b3875f56",
        "[log] AstrixToken deployed at: 0xFb0a39aE8c44a0E83a1445d4d272294345fA2207",
        "[log] TokenDispenser deployed at: 0x4300536b909FbA47e042fCa31B97c09F64643110",
        "[log] PointSystem deployed at: 0xe3765f851977Ed7B377D0234e9275845fc960775",
        "[log] CollectibleController deployed at: 0x8467806e70FbE05Ca5e17f5d316C09F5bD2391bC",
        "[log] PostFeedManager deployed at: 0x8Fb529e2982695d536336EE1b44B66F3Fd5769e8",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x6574F3dea1EB56b9F2e752cB93b7Cc8739176cd5",
        "[log] PostEncryptionManager deployed at: 0x19Bf1e02478B6FFd9607D12c5AcE6cDbdD4D00e7",
        "[log] PostInteractionManager deployed at: 0x90DF88f5c189cb3561E8da30182804Bc36F24361",
        "[log] PostQueryManager deployed at: 0x53BAe22e6fECAf317a6E57ea6B9CB2F94ad14708",
        "[log] PostMinterProxy deployed at: 0x61533b40Cba779a4c11FBd390FbB5a28131618e8",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x6574F3dea1EB56b9F2e752cB93b7Cc8739176cd5, Encryption=0x19Bf1e02478B6FFd9607D12c5AcE6cDbdD4D00e7, Interaction=0x90DF88f5c189cb3561E8da30182804Bc36F24361, Query=0x53BAe22e6fECAf317a6E57ea6B9CB2F94ad14708",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nScenario: Creating and managing a collectible-gated post",
        "[log] Step 1: User2 claiming collectible",
        "[log] Collectible claimed successfully",
        "[log] \nStep 2: Creating collectible-gated post",
        "[log] Gated post created with ID: 0",
        "[log] \nStep 3: Verifying access control",
        "[log] User2 (with collectible) can view post",
        "[log] User3 (without collectible) cannot view post",
        "Duration: 11ms",
        "[log] Ending test: Should create and manage collectible-gated post (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.202Z"
    },
    {
      "id": 156,
      "suiteName": "Basic Post Creation and Access",
      "testName": "Should handle encrypted posts with proper key management",
      "description": "Should handle encrypted posts with proper key management",
      "status": "passed",
      "duration": 130,
      "output": [
        "[log] Starting test: Basic Post Creation and Access - Should handle encrypted posts with proper key management",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xA36B5Fec0E93d24908fAA9966535567E9f888994",
        "[log] TribeController deployed at: 0x975bb8dFf1297566b2a8364a1E5BFb8a3d208f32",
        "[log] AstrixToken deployed at: 0x91cc800FfeCd3126cF20e1e15904235d0175b950",
        "[log] TokenDispenser deployed at: 0xB7757653FDe43C6c337743647a31bf14Bab7cF83",
        "[log] PointSystem deployed at: 0xdf422894281A27Aa3d19B0B7D578c59Cb051ABF8",
        "[log] CollectibleController deployed at: 0x799a5Fd57d09B617e554DaC16A7262EbE3EfF8c3",
        "[log] PostFeedManager deployed at: 0x24d1a87024FC804d4c9DA78A35cBe2C80f24572c",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xEfA08bCF0EF4BB63619f79aA92a753E245DfDDce",
        "[log] PostEncryptionManager deployed at: 0xB0f3A4aE1fDC1068f9364c5d7b1E42678B66D941",
        "[log] PostInteractionManager deployed at: 0xd5660525C2378294bfe3b8197f714CcBFD6654bb",
        "[log] PostQueryManager deployed at: 0x6D490044dC1CA783A22cE1eEb1E4443fa16A961c",
        "[log] PostMinterProxy deployed at: 0xee89093b4126DEF19bfE59aE401Df7711091e610",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0xEfA08bCF0EF4BB63619f79aA92a753E245DfDDce, Encryption=0xB0f3A4aE1fDC1068f9364c5d7b1E42678B66D941, Interaction=0xd5660525C2378294bfe3b8197f714CcBFD6654bb, Query=0x6D490044dC1CA783A22cE1eEb1E4443fa16A961c",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nScenario: Creating and managing an encrypted post",
        "[log] Step 1: Setting up tribe encryption",
        "[log] Tribe encryption key set",
        "[log] \nStep 2: Creating encrypted post",
        "[log] Encrypted post created with ID: 0",
        "[log] \nStep 3: Verifying post encryption",
        "[log] Post encryption verified",
        "[log] \nStep 4: Checking decryption key access",
        "[log] Decryption key access verified",
        "[log] \nStep 5: Verifying key derivation",
        "[log] Key derivation verified",
        "Duration: 3ms",
        "[log] Ending test: Should handle encrypted posts with proper key management (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.332Z"
    },
    {
      "id": 104,
      "suiteName": "Collectible Claiming",
      "testName": "Should allow claiming a collectible with correct payment",
      "description": "Should allow claiming a collectible with correct payment",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: Collectible Claiming - Should allow claiming a collectible with correct payment",
        "Duration: 1ms",
        "[log] Ending test: Should allow claiming a collectible with correct payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.190Z"
    },
    {
      "id": 105,
      "suiteName": "Collectible Claiming",
      "testName": "Should prevent claiming with insufficient payment",
      "description": "Should prevent claiming with insufficient payment",
      "status": "passed",
      "duration": 34,
      "output": [
        "[log] Starting test: Collectible Claiming - Should prevent claiming with insufficient payment",
        "Duration: 0ms",
        "[log] Ending test: Should prevent claiming with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.224Z"
    },
    {
      "id": 103,
      "suiteName": "Collectible Creation",
      "testName": "Should create a collectible successfully",
      "description": "Should create a collectible successfully",
      "status": "passed",
      "duration": 36,
      "output": [
        "[log] Starting test: Collectible Creation - Should create a collectible successfully",
        "Duration: 2ms",
        "[log] Ending test: Should create a collectible successfully (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.153Z"
    },
    {
      "id": 14,
      "suiteName": "Collectible Management Journey",
      "testName": "Should create a free collectible",
      "description": "Should create a free collectible",
      "status": "passed",
      "duration": 139,
      "output": [
        "[log] Starting test: Collectible Management Journey - Should create a free collectible",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x4826533B4897376654Bb4d4AD88B7faFD0C98528",
        "[log] TribeController deployed at: 0x99bbA657f2BbC93c02D617f8bA121cB8Fc104Acf",
        "[log] AstrixToken deployed at: 0x8f86403A4DE0BB5791fa46B8e795C547942fE4Cf",
        "[log] TokenDispenser deployed at: 0x5eb3Bc0a489C5A8288765d2336659EbCA68FCd00",
        "[log] PointSystem deployed at: 0x809d550fca64d94Bd9F66E60752A544199cfAC3D",
        "[log] CollectibleController deployed at: 0x1291Be112d480055DaFd8a610b7d1e203891C274",
        "[log] PostFeedManager deployed at: 0x5f3f1dBD7B74C6B46e8c44f98792A1dAf8d69154",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x82e01223d51Eb87e16A03E24687EDF0F294da6f1",
        "[log] PostEncryptionManager deployed at: 0x7969c5eD335650692Bc04293B07F5BF2e7A673C0",
        "[log] PostInteractionManager deployed at: 0xc351628EB244ec633d5f21fBD6621e1a683B1181",
        "[log] PostQueryManager deployed at: 0xcbEAF3BDe82155F56486Fb5a1072cb8baAf547cc",
        "[log] PostMinterProxy deployed at: 0xB0D4afd8879eD9F52b28595d31B441D079B2Ca07",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 2ms",
        "[log] Ending test: Should create a free collectible (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.905Z"
    },
    {
      "id": 40,
      "suiteName": "Content Creator Journey",
      "testName": "Should create different types of posts",
      "description": "Should create different types of posts",
      "status": "passed",
      "duration": 32,
      "output": [
        "[log] Starting test: Content Creator Journey - Should create different types of posts",
        "Duration: 32ms",
        "[log] Ending test: Should create different types of posts (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.859Z"
    },
    {
      "id": 43,
      "suiteName": "Content Creator Journey",
      "testName": "Should handle post deletion",
      "description": "Should handle post deletion",
      "status": "passed",
      "duration": 7,
      "output": [
        "[log] Starting test: Content Creator Journey - Should handle post deletion",
        "[log] Post after deletion: [\"5\",\"0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65\",\"1\",\"{\\\"title\\\":\\\"Test Post\\\",\\\"content\\\":\\\"Test Content\\\",\\\"createdAt\\\":1745498705}\",false,\"0x0000000000000000000000000000000000000000\",\"0\",false,\"0x0000000000000000000000000000000000000000\"]",
        "Duration: 7ms",
        "[log] Ending test: Should handle post deletion (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.880Z"
    },
    {
      "id": 41,
      "suiteName": "Content Creator Journey",
      "testName": "Should handle post interactions",
      "description": "Should handle post interactions",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Content Creator Journey - Should handle post interactions",
        "Duration: 8ms",
        "[log] Ending test: Should handle post interactions (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.867Z"
    },
    {
      "id": 42,
      "suiteName": "Content Creator Journey",
      "testName": "Should handle post reporting",
      "description": "Should handle post reporting",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Content Creator Journey - Should handle post reporting",
        "Duration: 5ms",
        "[log] Ending test: Should handle post reporting (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.873Z"
    },
    {
      "id": 38,
      "suiteName": "Contribution Scenarios",
      "testName": "Should ensure users can't interact with their own fundraiser",
      "description": "Should ensure users can't interact with their own fundraiser",
      "status": "passed",
      "duration": 16,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should ensure users can't interact with their own fundraiser",
        "[log] Created test fundraiser with ID: 11",
        "Duration: 2ms",
        "[log] Ending test: Should ensure users can't interact with their own fundraiser (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.599Z"
    },
    {
      "id": 39,
      "suiteName": "Contribution Scenarios",
      "testName": "Should prevent interactions with deleted fundraiser",
      "description": "Should prevent interactions with deleted fundraiser",
      "status": "passed",
      "duration": 100,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should prevent interactions with deleted fundraiser",
        "[log] Created test fundraiser with ID: 12",
        "[log] Created test fundraiser for deletion with ID: 13",
        "Duration: 14ms",
        "[log] Ending test: Should prevent interactions with deleted fundraiser (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.699Z"
    },
    {
      "id": 37,
      "suiteName": "Contribution Scenarios",
      "testName": "Should simulate contribution through interaction",
      "description": "Should simulate contribution through interaction",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should simulate contribution through interaction",
        "[log] Created test fundraiser with ID: 10",
        "Duration: 2ms",
        "[log] Ending test: Should simulate contribution through interaction (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.583Z"
    },
    {
      "id": 47,
      "suiteName": "Error Cases",
      "testName": "Should handle invalid metadata",
      "description": "Should handle invalid metadata",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Error Cases - Should handle invalid metadata",
        "Duration: 4ms",
        "[log] Ending test: Should handle invalid metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.186Z"
    },
    {
      "id": 48,
      "suiteName": "Error Cases",
      "testName": "Should handle permission errors",
      "description": "Should handle permission errors",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Error Cases - Should handle permission errors",
        "Duration: 1ms",
        "[log] Ending test: Should handle permission errors (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.187Z"
    },
    {
      "id": 49,
      "suiteName": "Error Cases",
      "testName": "Should handle rate limiting",
      "description": "Should handle rate limiting",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Error Cases - Should handle rate limiting",
        "Duration: 20ms",
        "[log] Ending test: Should handle rate limiting (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.207Z"
    },
    {
      "id": 112,
      "suiteName": "Event Creation",
      "testName": "Should allow organizer to create event",
      "description": "Should allow organizer to create event",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Event Creation - Should allow organizer to create event",
        "Duration: 2ms",
        "[log] Ending test: Should allow organizer to create event (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.462Z"
    },
    {
      "id": 113,
      "suiteName": "Event Creation",
      "testName": "Should prevent non-organizer from creating event",
      "description": "Should prevent non-organizer from creating event",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Event Creation - Should prevent non-organizer from creating event",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from creating event (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.475Z"
    },
    {
      "id": 20,
      "suiteName": "Event Creation Scenarios",
      "testName": "Should create a physical event with basic details",
      "description": "Should create a physical event with basic details",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Creation Scenarios - Should create a physical event with basic details",
        "Duration: 2ms",
        "[log] Ending test: Should create a physical event with basic details (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.249Z"
    },
    {
      "id": 21,
      "suiteName": "Event Creation Scenarios",
      "testName": "Should prevent non-organizer from creating event",
      "description": "Should prevent non-organizer from creating event",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Creation Scenarios - Should prevent non-organizer from creating event",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from creating event (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.251Z"
    },
    {
      "id": 22,
      "suiteName": "Event Creation Scenarios",
      "testName": "Should test contract-level validations for event creation",
      "description": "Should test contract-level validations for event creation",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Event Creation Scenarios - Should test contract-level validations for event creation",
        "Duration: 3ms",
        "[log] Ending test: Should test contract-level validations for event creation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.254Z"
    },
    {
      "id": 30,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to cancel event",
      "description": "Should allow organizer to cancel event",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to cancel event",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to cancel event (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.275Z"
    },
    {
      "id": 124,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to cancel event",
      "description": "Should allow organizer to cancel event",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to cancel event",
        "Duration: 0ms",
        "[log] Ending test: Should allow organizer to cancel event (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.629Z"
    },
    {
      "id": 28,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to update metadata",
      "description": "Should allow organizer to update metadata",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to update metadata",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to update metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.271Z"
    },
    {
      "id": 122,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to update metadata",
      "description": "Should allow organizer to update metadata",
      "status": "passed",
      "duration": 15,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to update metadata",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to update metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.603Z"
    },
    {
      "id": 32,
      "suiteName": "Event Management",
      "testName": "Should prevent non-organizer from canceling event",
      "description": "Should prevent non-organizer from canceling event",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Event Management - Should prevent non-organizer from canceling event",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from canceling event (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.278Z"
    },
    {
      "id": 29,
      "suiteName": "Event Management",
      "testName": "Should prevent non-organizer from updating metadata",
      "description": "Should prevent non-organizer from updating metadata",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Management - Should prevent non-organizer from updating metadata",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from updating metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.273Z"
    },
    {
      "id": 123,
      "suiteName": "Event Management",
      "testName": "Should prevent non-organizer from updating metadata",
      "description": "Should prevent non-organizer from updating metadata",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Event Management - Should prevent non-organizer from updating metadata",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from updating metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.616Z"
    },
    {
      "id": 31,
      "suiteName": "Event Management",
      "testName": "Should prevent ticket purchase after cancellation",
      "description": "Should prevent ticket purchase after cancellation",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Event Management - Should prevent ticket purchase after cancellation",
        "Duration: 0ms",
        "[log] Ending test: Should prevent ticket purchase after cancellation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.276Z"
    },
    {
      "id": 125,
      "suiteName": "Event Management",
      "testName": "Should prevent ticket purchase after cancellation",
      "description": "Should prevent ticket purchase after cancellation",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Event Management - Should prevent ticket purchase after cancellation",
        "Duration: 1ms",
        "[log] Ending test: Should prevent ticket purchase after cancellation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.642Z"
    },
    {
      "id": 45,
      "suiteName": "Feed Management",
      "testName": "Should retrieve paginated tribe feed",
      "description": "Should retrieve paginated tribe feed",
      "status": "passed",
      "duration": 141,
      "output": [
        "[log] Starting test: Feed Management - Should retrieve paginated tribe feed",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x7C8BaafA542c57fF9B2B90612bf8aB9E86e22C09",
        "[log] TribeController deployed at: 0x0a17FabeA4633ce714F1Fa4a2dcA62C3bAc4758d",
        "[log] AstrixToken deployed at: 0x5e6CB7E728E1C320855587E1D9C6F7972ebdD6D5",
        "[log] TokenDispenser deployed at: 0x79E8AB29Ff79805025c9462a2f2F12e9A496f81d",
        "[log] PointSystem deployed at: 0x0Dd99d9f56A14E9D53b2DdC62D9f0bAbe806647A",
        "[log] CollectibleController deployed at: 0xeAd789bd8Ce8b9E94F5D0FCa99F8787c7e758817",
        "[log] PostFeedManager deployed at: 0x95775fD3Afb1F4072794CA4ddA27F2444BCf8Ac3",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xd3FFD73C53F139cEBB80b6A524bE280955b3f4db",
        "[log] PostEncryptionManager deployed at: 0x512F7469BcC83089497506b5df64c6E246B39925",
        "[log] PostInteractionManager deployed at: 0x9fD16eA9E31233279975D99D5e8Fc91dd214c7Da",
        "[log] PostQueryManager deployed at: 0xCBBe2A5c3A22BE749D5DDF24e9534f98951983e2",
        "[log] PostMinterProxy deployed at: 0x987e855776C03A4682639eEb14e65b3089EE6310",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should retrieve paginated tribe feed (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.037Z"
    },
    {
      "id": 46,
      "suiteName": "Feed Management",
      "testName": "Should retrieve user-specific feed",
      "description": "Should retrieve user-specific feed",
      "status": "passed",
      "duration": 145,
      "output": [
        "[log] Starting test: Feed Management - Should retrieve user-specific feed",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x9338CA7d556248055f5751d85cDA7aD6eF254433",
        "[log] TribeController deployed at: 0x9c65f85425c619A6cB6D29fF8d57ef696323d188",
        "[log] AstrixToken deployed at: 0x7Cf4be31f546c04787886358b9486ca3d62B9acf",
        "[log] TokenDispenser deployed at: 0x33E45b187da34826aBCEDA1039231Be46f1b05Af",
        "[log] PointSystem deployed at: 0x0c626FC4A447b01554518550e30600136864640B",
        "[log] CollectibleController deployed at: 0xA21DDc1f17dF41589BC6A5209292AED2dF61Cc94",
        "[log] PostFeedManager deployed at: 0x2A590C461Db46bca129E8dBe5C3998A8fF402e76",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x2F54D1563963fC04770E85AF819c89Dc807f6a06",
        "[log] PostEncryptionManager deployed at: 0xF342E904702b1D021F03f519D6D9614916b03f37",
        "[log] PostInteractionManager deployed at: 0x9849832a1d8274aaeDb1112ad9686413461e7101",
        "[log] PostQueryManager deployed at: 0xa4E00CB342B36eC9fDc4B50b3d527c3643D4C49e",
        "[log] PostMinterProxy deployed at: 0x8ac5eE52F70AE01dB914bE459D8B3d50126fd6aE",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 4ms",
        "[log] Ending test: Should retrieve user-specific feed (passed)"
      ],
      "timestamp": "2025-04-24T12:45:06.182Z"
    },
    {
      "id": 160,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve paginated posts by tribe",
      "description": "Should retrieve paginated posts by tribe",
      "status": "passed",
      "duration": 193,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve paginated posts by tribe",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xbCb98BeaAB4B12ad8779C79dB0C58ca8b26aD41F",
        "[log] TribeController deployed at: 0x68163631eD6A2cC1845433eDa9448cE742617cc7",
        "[log] AstrixToken deployed at: 0x3D973b0b1fE2Fb70f4E47d8119e832ce779f360D",
        "[log] TokenDispenser deployed at: 0xe97a52798eE084656cc3643e30a5d2BB6E942C5d",
        "[log] PointSystem deployed at: 0x45C76b7F4527095Ff0fb3ee77638F94f87D548d5",
        "[log] CollectibleController deployed at: 0x3c1CDdEb86B96B730458C5916631312859e8D793",
        "[log] PostFeedManager deployed at: 0xBc43A88f3d00A16fca745Bb84f8120Ae492Ef7db",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xA480452d095751Abb1D6e51Bd228A226d52e688a",
        "[log] PostEncryptionManager deployed at: 0xca42323f20E7FcEc3aE61AF72B97D4B8DFecda9f",
        "[log] PostInteractionManager deployed at: 0xD149aBF4Acd64Ec48f5d49a58F4C14416e1B227D",
        "[log] PostQueryManager deployed at: 0xeA778A25b818EE9346E250Eb3f81b1439E23d711",
        "[log] PostMinterProxy deployed at: 0xdC14b6DB8F77ea6C4B3Cc7399fE82Db013f6F012",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0xA480452d095751Abb1D6e51Bd228A226d52e688a, Encryption=0xca42323f20E7FcEc3aE61AF72B97D4B8DFecda9f, Interaction=0xD149aBF4Acd64Ec48f5d49a58F4C14416e1B227D, Query=0xeA778A25b818EE9346E250Eb3f81b1439E23d711",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nSetting up feed test data",
        "[log] Created 10 test posts",
        "[log] \nScenario: Testing paginated tribe posts retrieval",
        "[log] Step 1: Retrieving first page (3 posts)",
        "[log] Retrieved 3 posts from first page",
        "[log] \nStep 2: Retrieving second page (3 posts)",
        "[log] Retrieved 3 posts from second page",
        "[log] Verified no duplicate posts between pages",
        "Duration: 2ms",
        "[log] Ending test: Should retrieve paginated posts by tribe (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.937Z"
    },
    {
      "id": 162,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve paginated posts by tribe and user",
      "description": "Should retrieve paginated posts by tribe and user",
      "status": "passed",
      "duration": 201,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve paginated posts by tribe and user",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x3235570150Ce492bC2b41a899D602f944EFa178d",
        "[log] TribeController deployed at: 0x46F40df41128A641C143382Cc861ef60CacEADab",
        "[log] AstrixToken deployed at: 0x23d089E15312FCFaa95eC110C83BB3397121084e",
        "[log] TokenDispenser deployed at: 0xBb1b80a6b42c78402b4d6621d8f04cd3c646a0c9",
        "[log] PointSystem deployed at: 0x8891c6951AF060959c4f848A28FcF45AC96391eb",
        "[log] CollectibleController deployed at: 0x29C5eAfE3Ed1F169b3CD594CE0506A3c0FFBfb85",
        "[log] PostFeedManager deployed at: 0xA2008D7cfAC9B6078fa3Be7dA38A92306cb14BD8",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x3aB35Bd6Ff2Ab3adbb4BF1cd5D575c37BC89557A",
        "[log] PostEncryptionManager deployed at: 0x076D96825C7A6c9CE98864Cd0D84ab86d9B5bee9",
        "[log] PostInteractionManager deployed at: 0x4081abAe8976dAC95551f3292fCd00cd15cD9E64",
        "[log] PostQueryManager deployed at: 0x9DBCA797101Fb4B2186919778E0175a5576D0895",
        "[log] PostMinterProxy deployed at: 0x187867371cB1da84469A82398A4192b0e94B6A4d",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x3aB35Bd6Ff2Ab3adbb4BF1cd5D575c37BC89557A, Encryption=0x076D96825C7A6c9CE98864Cd0D84ab86d9B5bee9, Interaction=0x4081abAe8976dAC95551f3292fCd00cd15cD9E64, Query=0x9DBCA797101Fb4B2186919778E0175a5576D0895",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nSetting up feed test data",
        "[log] Created 30 test posts",
        "[log] \nScenario: Testing paginated tribe-user posts retrieval",
        "[log] Step 1: Retrieving user1's posts in tribe",
        "[log] Retrieved 3 posts for user1 in tribe",
        "[log] Verified post ownership and tribe membership",
        "Duration: 2ms",
        "[log] Ending test: Should retrieve paginated posts by tribe and user (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.342Z"
    },
    {
      "id": 161,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve paginated posts by user",
      "description": "Should retrieve paginated posts by user",
      "status": "passed",
      "duration": 204,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve paginated posts by user",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xfc355B3F03CBdEBbdeB9686D20400DFF1592b25B",
        "[log] TribeController deployed at: 0x7ff8009887c2f8b5f61d7a4a796563E0E3A5782C",
        "[log] AstrixToken deployed at: 0x6548D6923F9eF98b2f688258cc51cA4F9e147F32",
        "[log] TokenDispenser deployed at: 0x767a702A317ecd9dd373048Dd1A6A3eEa8721169",
        "[log] PointSystem deployed at: 0xBe1Ec0869fC803fd0F730187ef4e4788C44d9B4a",
        "[log] CollectibleController deployed at: 0xb0De6e861A20Eaf193c6b0a7113341af384E4C02",
        "[log] PostFeedManager deployed at: 0xd07806122907206A5aB99a1e6B6a3D7c7AC10adc",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x133d8F4aB5591ebF5a090b1dCc9d2c4Aa878dd2F",
        "[log] PostEncryptionManager deployed at: 0xf386d6DCd8FC8941d6A01A64c2f268A082C1533A",
        "[log] PostInteractionManager deployed at: 0xef16dF73c1eaC16Fc83fD0FF68100f91D7140B40",
        "[log] PostQueryManager deployed at: 0x5676d41849868c68A2f7cd51746317202E851EfB",
        "[log] PostMinterProxy deployed at: 0x432e0B120Ef5f6b8622f9239cc8c16c9e2A9349b",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x133d8F4aB5591ebF5a090b1dCc9d2c4Aa878dd2F, Encryption=0xf386d6DCd8FC8941d6A01A64c2f268A082C1533A, Interaction=0xef16dF73c1eaC16Fc83fD0FF68100f91D7140B40, Query=0x5676d41849868c68A2f7cd51746317202E851EfB",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nSetting up feed test data",
        "[log] Created 20 test posts",
        "[log] \nScenario: Testing paginated user posts retrieval",
        "[log] Step 1: Retrieving user1's posts",
        "[log] Retrieved 5 posts for user1",
        "[log] \nStep 2: Retrieving user2's posts with pagination",
        "[log] Retrieved 3 posts for user2 (first page)",
        "[log] Verified post ownership",
        "Duration: 5ms",
        "[log] Ending test: Should retrieve paginated posts by user (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.141Z"
    },
    {
      "id": 163,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve user feed across tribes",
      "description": "Should retrieve user feed across tribes",
      "status": "passed",
      "duration": 222,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve user feed across tribes",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xFA740bd80cbAD9f01723b8Eea5782622978A1add",
        "[log] TribeController deployed at: 0x607d2297DbF5a5F7Fb96a8502f883b258944d264",
        "[log] AstrixToken deployed at: 0xFDD2aD56042156da2E09451A91BB8637be6cfA22",
        "[log] TokenDispenser deployed at: 0xD6a63F1f208363F2BF40021a0083651aaD206D3a",
        "[log] PointSystem deployed at: 0xcd3521E655ED4070BD95740cf610E955965B575d",
        "[log] CollectibleController deployed at: 0xCd22F0dBB3180Edc84d33cE249E332F2f7BeD1D0",
        "[log] PostFeedManager deployed at: 0xa7DA90F7F64e1ad4280eA9B798DD33522b72ABf7",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x77399Eefc2D56bc0d730C3407de347E8DCdF18BB",
        "[log] PostEncryptionManager deployed at: 0x5010bBa2B46a9252462C78A88845069e42D340Db",
        "[log] PostInteractionManager deployed at: 0xB58c560ddA1ea8ca4a702802854083239aF880D8",
        "[log] PostQueryManager deployed at: 0xFADfB804F76A4FBcB44ACf72519A403A9ff02618",
        "[log] PostMinterProxy deployed at: 0x67F97fc5E45889d3BFf7dcBA114Ca210f1896b0d",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x77399Eefc2D56bc0d730C3407de347E8DCdF18BB, Encryption=0x5010bBa2B46a9252462C78A88845069e42D340Db, Interaction=0xB58c560ddA1ea8ca4a702802854083239aF880D8, Query=0xFADfB804F76A4FBcB44ACf72519A403A9ff02618",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nSetting up feed test data",
        "[log] Created 40 test posts",
        "[log] \nScenario: Testing user feed retrieval",
        "[log] Step 1: Creating second tribe and posts",
        "[log] Created additional posts in second tribe",
        "[log] \nStep 2: Retrieving user feed",
        "[log] Retrieved 5 posts from user feed",
        "[log] Feed contains posts from both tribes (Tribe1: 2, Tribe2: 3)",
        "Duration: 22ms",
        "[log] Ending test: Should retrieve user feed across tribes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.564Z"
    },
    {
      "id": 33,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should create a standard fundraiser",
      "description": "Should create a standard fundraiser",
      "status": "passed",
      "duration": 33,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should create a standard fundraiser",
        "[log] Debug: About to create fundraiser with tribeId 1",
        "[log] Debug: FundraiserCreator membership status: 1 for tribeId 1",
        "[log] Debug: FundraiserCreator status in default tribe (0): 1",
        "[log] Debug: Will use testTribeId 0 for all tests going forward",
        "[log] Debug: FundraiserCreator status in testTribeId 0: 1",
        "[log] Debug: FundraiserCreator has PROJECT_CREATOR_ROLE: true",
        "[log] Debug: Creating post using testTribeId 0 with creationManager directly",
        "[log] Post created successfully",
        "Duration: 33ms",
        "[log] Ending test: Should create a standard fundraiser (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.449Z"
    },
    {
      "id": 35,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should create fundraiser with flexible durations",
      "description": "Should create fundraiser with flexible durations",
      "status": "passed",
      "duration": 34,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should create fundraiser with flexible durations",
        "[log] Created 7-day fundraiser",
        "[log] Created 30-day fundraiser",
        "[log] Created 90-day fundraiser",
        "Duration: 34ms",
        "[log] Ending test: Should create fundraiser with flexible durations (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.514Z"
    },
    {
      "id": 34,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should create fundraiser with multiple currencies",
      "description": "Should create fundraiser with multiple currencies",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should create fundraiser with multiple currencies",
        "[log] Created ETH fundraiser",
        "[log] Created USDC fundraiser",
        "[log] Created TRIBE_TOKEN fundraiser",
        "Duration: 31ms",
        "[log] Ending test: Should create fundraiser with multiple currencies (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.480Z"
    },
    {
      "id": 36,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should handle different slab configurations",
      "description": "Should handle different slab configurations",
      "status": "passed",
      "duration": 59,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should handle different slab configurations",
        "[log] Created slab config test 1",
        "[log] Created slab config test 2",
        "[log] Created slab config test 3",
        "Duration: 58ms",
        "[log] Ending test: Should handle different slab configurations (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.573Z"
    },
    {
      "id": 18,
      "suiteName": "High-Demand Collectible Drop",
      "testName": "Should handle concurrent claiming from multiple users",
      "description": "Should handle concurrent claiming from multiple users",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: High-Demand Collectible Drop - Should handle concurrent claiming from multiple users",
        "Duration: 4ms",
        "[log] Ending test: Should handle concurrent claiming from multiple users (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.172Z"
    },
    {
      "id": 19,
      "suiteName": "High-Demand Collectible Drop",
      "testName": "Should handle supply limits correctly",
      "description": "Should handle supply limits correctly",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: High-Demand Collectible Drop - Should handle supply limits correctly",
        "Duration: 4ms",
        "[log] Ending test: Should handle supply limits correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.210Z"
    },
    {
      "id": 202,
      "suiteName": "Invite Code Management",
      "testName": "Should enforce invite code usage limits",
      "description": "Should enforce invite code usage limits",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: Invite Code Management - Should enforce invite code usage limits",
        "Duration: 3ms",
        "[log] Ending test: Should enforce invite code usage limits (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.926Z"
    },
    {
      "id": 201,
      "suiteName": "Invite Code Management",
      "testName": "Should handle invite code revocation",
      "description": "Should handle invite code revocation",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Invite Code Management - Should handle invite code revocation",
        "Duration: 1ms",
        "[log] Ending test: Should handle invite code revocation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.883Z"
    },
    {
      "id": 200,
      "suiteName": "Invite Code Management",
      "testName": "Should manage invite codes correctly",
      "description": "Should manage invite codes correctly",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: Invite Code Management - Should manage invite codes correctly",
        "Duration: 2ms",
        "[log] Ending test: Should manage invite codes correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.841Z"
    },
    {
      "id": 186,
      "suiteName": "Invite Code Tribe",
      "testName": "Should allow joining with valid invite code",
      "description": "Should allow joining with valid invite code",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should allow joining with valid invite code",
        "Duration: 1ms",
        "[log] Ending test: Should allow joining with valid invite code (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.269Z"
    },
    {
      "id": 190,
      "suiteName": "Invite Code Tribe",
      "testName": "Should enforce invite code usage limits",
      "description": "Should enforce invite code usage limits",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should enforce invite code usage limits",
        "Duration: 3ms",
        "[log] Ending test: Should enforce invite code usage limits (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.433Z"
    },
    {
      "id": 189,
      "suiteName": "Invite Code Tribe",
      "testName": "Should handle invite code expiry correctly",
      "description": "Should handle invite code expiry correctly",
      "status": "passed",
      "duration": 44,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should handle invite code expiry correctly",
        "Duration: 3ms",
        "[log] Ending test: Should handle invite code expiry correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.393Z"
    },
    {
      "id": 185,
      "suiteName": "Invite Code Tribe",
      "testName": "Should not allow direct joining without invite code",
      "description": "Should not allow direct joining without invite code",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should not allow direct joining without invite code",
        "Duration: 0ms",
        "[log] Ending test: Should not allow direct joining without invite code (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.229Z"
    },
    {
      "id": 187,
      "suiteName": "Invite Code Tribe",
      "testName": "Should not allow joining with invalid invite code",
      "description": "Should not allow joining with invalid invite code",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should not allow joining with invalid invite code",
        "Duration: 1ms",
        "[log] Ending test: Should not allow joining with invalid invite code (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.309Z"
    },
    {
      "id": 188,
      "suiteName": "Invite Code Tribe",
      "testName": "Should track invite code usage correctly",
      "description": "Should track invite code usage correctly",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should track invite code usage correctly",
        "Duration: 1ms",
        "[log] Ending test: Should track invite code usage correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.349Z"
    },
    {
      "id": 206,
      "suiteName": "Journey 5.1: Create Proposal",
      "testName": "Should allow creating a proposal",
      "description": "Should allow creating a proposal",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Journey 5.1: Create Proposal - Should allow creating a proposal",
        "Duration: 2ms",
        "[log] Ending test: Should allow creating a proposal (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.058Z"
    },
    {
      "id": 207,
      "suiteName": "Journey 5.1: Create Proposal",
      "testName": "Should increment proposalId after each creation",
      "description": "Should increment proposalId after each creation",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.1: Create Proposal - Should increment proposalId after each creation",
        "Duration: 1ms",
        "[log] Ending test: Should increment proposalId after each creation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.062Z"
    },
    {
      "id": 208,
      "suiteName": "Journey 5.2: Vote on Proposal",
      "testName": "Should allow voting on proposal",
      "description": "Should allow voting on proposal",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Journey 5.2: Vote on Proposal - Should allow voting on proposal",
        "Duration: 2ms",
        "[log] Ending test: Should allow voting on proposal (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.067Z"
    },
    {
      "id": 209,
      "suiteName": "Journey 5.2: Vote on Proposal",
      "testName": "Should track vote counts correctly",
      "description": "Should track vote counts correctly",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.2: Vote on Proposal - Should track vote counts correctly",
        "Duration: 2ms",
        "[log] Ending test: Should track vote counts correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.071Z"
    },
    {
      "id": 210,
      "suiteName": "Journey 5.3: Unauthorized Vote Attempt",
      "testName": "Should emit vote event regardless of vote choice",
      "description": "Should emit vote event regardless of vote choice",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: Journey 5.3: Unauthorized Vote Attempt - Should emit vote event regardless of vote choice",
        "Duration: 2ms",
        "[log] Ending test: Should emit vote event regardless of vote choice (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.077Z"
    },
    {
      "id": 211,
      "suiteName": "Journey 5.3: Unauthorized Vote Attempt",
      "testName": "Should only count positive votes",
      "description": "Should only count positive votes",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.3: Unauthorized Vote Attempt - Should only count positive votes",
        "Duration: 2ms",
        "[log] Ending test: Should only count positive votes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.081Z"
    },
    {
      "id": 3,
      "suiteName": "Login Journey",
      "testName": "Should complete full login process",
      "description": "Should complete full login process",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Login Journey - Should complete full login process",
        "[log] \nStep 1: Checking NFT balance",
        "[log] User has 1 profile NFT(s)",
        "[log] \nStep 2: Getting token ID by username",
        "[log] Found token ID: 0",
        "[log] \nStep 3: Fetching profile metadata",
        "[log] Profile metadata retrieved successfully",
        "[log] \nStep 4: Verifying ownership",
        "[log] Ownership verified",
        "Duration: 3ms",
        "[log] Ending test: Should complete full login process (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.576Z"
    },
    {
      "id": 4,
      "suiteName": "Login Journey",
      "testName": "Should handle login with non-existent profile",
      "description": "Should handle login with non-existent profile",
      "status": "passed",
      "duration": 16,
      "output": [
        "[log] Starting test: Login Journey - Should handle login with non-existent profile",
        "Duration: 1ms",
        "[log] Ending test: Should handle login with non-existent profile (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.592Z"
    },
    {
      "id": 5,
      "suiteName": "Login Journey",
      "testName": "Should handle login with transferred profile",
      "description": "Should handle login with transferred profile",
      "status": "passed",
      "duration": 17,
      "output": [
        "[log] Starting test: Login Journey - Should handle login with transferred profile",
        "Duration: 2ms",
        "[log] Ending test: Should handle login with transferred profile (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.609Z"
    },
    {
      "id": 198,
      "suiteName": "Member Management",
      "testName": "Should handle member approval flow correctly",
      "description": "Should handle member approval flow correctly",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Member Management - Should handle member approval flow correctly",
        "Duration: 1ms",
        "[log] Ending test: Should handle member approval flow correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.756Z"
    },
    {
      "id": 197,
      "suiteName": "Member Management",
      "testName": "Should handle member banning correctly",
      "description": "Should handle member banning correctly",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Member Management - Should handle member banning correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle member banning correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.717Z"
    },
    {
      "id": 199,
      "suiteName": "Member Management",
      "testName": "Should handle member rejection flow correctly",
      "description": "Should handle member rejection flow correctly",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Member Management - Should handle member rejection flow correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle member rejection flow correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.798Z"
    },
    {
      "id": 98,
      "suiteName": "Member Queries",
      "testName": "Should get most active members based on points",
      "description": "Should get most active members based on points",
      "status": "passed",
      "duration": 78,
      "output": [
        "[log] Starting test: Member Queries - Should get most active members based on points",
        "Duration: 4ms",
        "[log] Ending test: Should get most active members based on points (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.758Z"
    },
    {
      "id": 97,
      "suiteName": "Member Queries",
      "testName": "Should get paginated list of tribe members",
      "description": "Should get paginated list of tribe members",
      "status": "passed",
      "duration": 102,
      "output": [
        "[log] Starting test: Member Queries - Should get paginated list of tribe members",
        "Duration: 5ms",
        "[log] Ending test: Should get paginated list of tribe members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.680Z"
    },
    {
      "id": 205,
      "suiteName": "Member Status Transitions",
      "testName": "Should handle all member status transitions correctly",
      "description": "Should handle all member status transitions correctly",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: Member Status Transitions - Should handle all member status transitions correctly",
        "Duration: 3ms",
        "[log] Ending test: Should handle all member status transitions correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.053Z"
    },
    {
      "id": 68,
      "suiteName": "Milestone Management",
      "testName": "Should allow reviewer to approve milestone",
      "description": "Should allow reviewer to approve milestone",
      "status": "passed",
      "duration": 146,
      "output": [
        "[log] Starting test: Milestone Management - Should allow reviewer to approve milestone",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x34688c002Af519fbEf122b43B6099802A12AbE82",
        "[log] TribeController deployed at: 0x58B3E7BA79FeFf7Fa7dd9d15f861FF19eDa98D8C",
        "[log] AstrixToken deployed at: 0x086ce0Da44C88Dac96cF0Dc4c5b2237eACca2E71",
        "[log] TokenDispenser deployed at: 0x998D98e9480A8f52A5252Faf316d129765773294",
        "[log] PointSystem deployed at: 0xa00F03Ea2d0a6e4961CaAFcA61A78334049c1848",
        "[log] CollectibleController deployed at: 0x884086466e192C53BbeebEd0024B66d58C49930A",
        "[log] PostFeedManager deployed at: 0x0B36Ef2cb78859C20c8C1380CeAdB75043aA92b3",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x6E66c9E7259EB988b86E6Aa7B0e213957c93bc6c",
        "[log] PostEncryptionManager deployed at: 0x9C07ab0E706fab71113b27dAFd8a51261453a46f",
        "[log] PostInteractionManager deployed at: 0x7a6E91C3C4fCB9157A27EB901210Aa1Df9D05B45",
        "[log] PostQueryManager deployed at: 0x204d2E5c581506e939295DaF99079b590ace906e",
        "[log] PostMinterProxy deployed at: 0x64Ed22277402f01f3AD382270B419b9F5e87F4c4",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 5ms",
        "[log] Ending test: Should allow reviewer to approve milestone (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.641Z"
    },
    {
      "id": 69,
      "suiteName": "Milestone Management",
      "testName": "Should allow reviewer to reject milestone",
      "description": "Should allow reviewer to reject milestone",
      "status": "passed",
      "duration": 145,
      "output": [
        "[log] Starting test: Milestone Management - Should allow reviewer to reject milestone",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x55Ac8D8d4776D9BA37a9A98Ba2e3ABb2ba710925",
        "[log] TribeController deployed at: 0xe6cFc17053c64838Fd7bb55BD4A2cb5b207A71ed",
        "[log] AstrixToken deployed at: 0xd78eFAb315cAf4B4B55dc0A760db864813669c3f",
        "[log] TokenDispenser deployed at: 0xD0798f8308EFE28516C36D5d0dC31f68fD8D0d05",
        "[log] PointSystem deployed at: 0x0208BdffceE44608AaB5F5b09c3208E3072FCbDa",
        "[log] CollectibleController deployed at: 0xfddd2CB0408CE08d91C30cc98173065CcE29248d",
        "[log] PostFeedManager deployed at: 0x553C2c81596b32D86697D115eEdA1184bBD8E661",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xbFD3511180A40503D807c9249943431Cf847E5b7",
        "[log] PostEncryptionManager deployed at: 0xC25fFDe61dA50C5d4Cc75d088814bf32B1F5d7c9",
        "[log] PostInteractionManager deployed at: 0x70401A4AB04A90043BD419f56CC36B77D0587C30",
        "[log] PostQueryManager deployed at: 0x4C70a29A4be0954eE358f03C18BecCb888549c01",
        "[log] PostMinterProxy deployed at: 0x2B4F80e20eaC049509C86f3B0742b6B4fB7C4bE2",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 2ms",
        "[log] Ending test: Should allow reviewer to reject milestone (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.786Z"
    },
    {
      "id": 66,
      "suiteName": "Milestone Management",
      "testName": "Should allow starting a milestone",
      "description": "Should allow starting a milestone",
      "status": "passed",
      "duration": 141,
      "output": [
        "[log] Starting test: Milestone Management - Should allow starting a milestone",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x3940C74711923bB4bdbA231c360baA7F032b5F0D",
        "[log] TribeController deployed at: 0x50e7B653e34E904F72aB6B3942D67763CD834040",
        "[log] AstrixToken deployed at: 0x9D8946A8A0c5a583Bf05bE83B981406182ac9d2f",
        "[log] TokenDispenser deployed at: 0xDf05d9c5CcFf9BBB65d780746b7E829A4465A0A6",
        "[log] PointSystem deployed at: 0x0712629Ced85A3A62E5BCa96303b8fdd06CBF8dd",
        "[log] CollectibleController deployed at: 0xf3a7Aa52f75B5136668b9F2bf2f68606BDb2CDFA",
        "[log] PostFeedManager deployed at: 0x242e50f40E771da8F19aAF1b813658A8562B2ad2",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x7B670a01E1D521ff232846dE0F7fE857a85c37A6",
        "[log] PostEncryptionManager deployed at: 0xEb2cF97CB2616f4c4a5C66ce4406B34955e57397",
        "[log] PostInteractionManager deployed at: 0xA93cA2b7Ce13960Ec0806f19fB1133C933Ce23B3",
        "[log] PostQueryManager deployed at: 0x7c4D072293651Df0BF274A454F4C3EC70fc5A866",
        "[log] PostMinterProxy deployed at: 0x618aB3160c5bbBc5bFa034ACa8e37dF3Eea0316D",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 1ms",
        "[log] Ending test: Should allow starting a milestone (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.341Z"
    },
    {
      "id": 67,
      "suiteName": "Milestone Management",
      "testName": "Should allow submitting milestone deliverables",
      "description": "Should allow submitting milestone deliverables",
      "status": "passed",
      "duration": 154,
      "output": [
        "[log] Starting test: Milestone Management - Should allow submitting milestone deliverables",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xae44841b3634D5DEAba372f5Fb822582817ea556",
        "[log] TribeController deployed at: 0x8aA3AE13495fc5CAc14D8f1b849520797168996e",
        "[log] AstrixToken deployed at: 0xf2F7Ee6206c10dD1f0e57038FD6C21ACAB9E09E9",
        "[log] TokenDispenser deployed at: 0xd3bC207ffA860B389D2EC35075605147c2A98670",
        "[log] PointSystem deployed at: 0x87EbDA903aaeb1213056e63F49871683E62783bE",
        "[log] CollectibleController deployed at: 0xA2B66209A3872257F4FC2532bF35138f466f13ea",
        "[log] PostFeedManager deployed at: 0x70235a3ef276f104aeE67D0B634f5978AF80ce2b",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x4Af9f320fE64C09a59572B6F687B308278367D61",
        "[log] PostEncryptionManager deployed at: 0x1F8B0Ab82C79bDBB02AbB87F6681a464CF24D50A",
        "[log] PostInteractionManager deployed at: 0x7AaBb13928E9382eE4b4148b9618039aBBcA7945",
        "[log] PostQueryManager deployed at: 0xc993301287f7E7f7C0EB28c4616534CcAbA348BA",
        "[log] PostMinterProxy deployed at: 0xeAd4C2cc3c9c44be601373460BEe3c331FaFfe96",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 2ms",
        "[log] Ending test: Should allow submitting milestone deliverables (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.495Z"
    },
    {
      "id": 70,
      "suiteName": "Milestone Management",
      "testName": "Should prevent non-reviewer from reviewing milestone",
      "description": "Should prevent non-reviewer from reviewing milestone",
      "status": "passed",
      "duration": 144,
      "output": [
        "[log] Starting test: Milestone Management - Should prevent non-reviewer from reviewing milestone",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x0291359b7F09FEd7B7194e212300224d4D56a29a",
        "[log] TribeController deployed at: 0xAD33aA3F0464b647e91bc026e2A4Daa0C40048d1",
        "[log] AstrixToken deployed at: 0xE47E83CA6Be588834f4d6108d092590b7Bd61463",
        "[log] TokenDispenser deployed at: 0x279947e1a7748Af67Ed416f963d7e0f88071Cf98",
        "[log] PointSystem deployed at: 0x8dA47DD12384f3A0c711E0cCb8Ac60D50d0e8cC8",
        "[log] CollectibleController deployed at: 0x732cc7c39e80d553513174Dc6F3AD6a4A107957F",
        "[log] PostFeedManager deployed at: 0x143E8C6D4114Ea49292D4183bB7df2382A58FC28",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x31a46feD168ECb9DE7d87E543Ba2e8DD101ad0a0",
        "[log] PostEncryptionManager deployed at: 0x49A60936D52A63d9069DD667B8c84E4274d0A0B6",
        "[log] PostInteractionManager deployed at: 0xfDE447BFa4e774606a6b0c73268Bc515a12c09c7",
        "[log] PostQueryManager deployed at: 0x977E2F3aA628f7676d685A3AFe2df48c51C9949a",
        "[log] PostMinterProxy deployed at: 0x8647AC3a1270c746130418010A368449d1944A82",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-reviewer from reviewing milestone (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.930Z"
    },
    {
      "id": 72,
      "suiteName": "Milestone Management",
      "testName": "Should prevent starting milestone with incomplete dependencies",
      "description": "Should prevent starting milestone with incomplete dependencies",
      "status": "passed",
      "duration": 161,
      "output": [
        "[log] Starting test: Milestone Management - Should prevent starting milestone with incomplete dependencies",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xa524FFD704A4E33566C230bfcd3567251ca42aD8",
        "[log] TribeController deployed at: 0x1F893318a5ec1B9a8D46a5F9700C00A0435E7F93",
        "[log] AstrixToken deployed at: 0x65dF57F0FE6AB6C0B5FD2e2F30578485040BEEb7",
        "[log] TokenDispenser deployed at: 0x523d64576BAC70DB1eFfCec31dFc6CFd156Fc95D",
        "[log] PointSystem deployed at: 0x171B627111dd81C46F6ae3F1455232bF1cbC311F",
        "[log] CollectibleController deployed at: 0x9FC087971b01DCBeceF4781D121ffFb9e40399f5",
        "[log] PostFeedManager deployed at: 0x9Bc82B1b48aA06cF9747e2D94046Af06B7b9045C",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x102819A0867080A81C1Ffbf03d6b89408067FA52",
        "[log] PostEncryptionManager deployed at: 0x8F14929310721e6B17461c329f8633B2d1aCF85B",
        "[log] PostInteractionManager deployed at: 0x80C96D73e71798bD074899DaA7Ba8F710feA3579",
        "[log] PostQueryManager deployed at: 0x76E0923B735Cbf86B69e7B8fE558886f3840Ff1d",
        "[log] PostMinterProxy deployed at: 0x4E7Addbe8CAbe070bA1F8066Cf17A368A5dEa9A9",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 18ms",
        "[log] Ending test: Should prevent starting milestone with incomplete dependencies (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.244Z"
    },
    {
      "id": 71,
      "suiteName": "Milestone Management",
      "testName": "Should prevent submitting deliverables for non-started milestone",
      "description": "Should prevent submitting deliverables for non-started milestone",
      "status": "passed",
      "duration": 153,
      "output": [
        "[log] Starting test: Milestone Management - Should prevent submitting deliverables for non-started milestone",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x816C1209974fFac86Cf3639bA11ED299E587754B",
        "[log] TribeController deployed at: 0x45A755B058492558351f188e4362F0546Bc3d140",
        "[log] AstrixToken deployed at: 0x229e614Bc82229b423921Efdc4C6E498D7876BC1",
        "[log] TokenDispenser deployed at: 0xbb32B12BE8eAa6d159308386563B6490bb4A5DB0",
        "[log] PointSystem deployed at: 0x23DADb9D745703fb8085d431883a7D3A2b55D274",
        "[log] CollectibleController deployed at: 0x0905E3Ed4f4322F2ed7d1FC45Ede7773B4C2ef89",
        "[log] PostFeedManager deployed at: 0x62Dd46d2a01A202a66d4eC6947fe88c5ac309232",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xCd55135cC103D7568056a828100D96603380DDbE",
        "[log] PostEncryptionManager deployed at: 0x221d0A359a46427063fFBEbD606E96aD22f91404",
        "[log] PostInteractionManager deployed at: 0x9E809Dc9a86ceB90e5C7BF4f39c7ccABe659B6Ae",
        "[log] PostQueryManager deployed at: 0xdDc7203b76f2D1bc710954a62fC7D862186DA952",
        "[log] PostMinterProxy deployed at: 0x42dD9CC51674411fE3d9A7620F1a25696C6A59e2",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 1ms",
        "[log] Ending test: Should prevent submitting deliverables for non-started milestone (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.083Z"
    },
    {
      "id": 44,
      "suiteName": "Moderation Journey",
      "testName": "Should handle post deletion",
      "description": "Should handle post deletion",
      "status": "passed",
      "duration": 16,
      "output": [
        "[log] Starting test: Moderation Journey - Should handle post deletion",
        "[log] Post after deletion: [\"6\",\"0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65\",\"1\",\"{\\\"title\\\":\\\"Test Post\\\",\\\"content\\\":\\\"Test content for deletion\\\",\\\"type\\\":\\\"TEXT\\\"}\",false,\"0x0000000000000000000000000000000000000000\",\"0\",false,\"0x0000000000000000000000000000000000000000\"]",
        "Duration: 4ms",
        "[log] Ending test: Should handle post deletion (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.896Z"
    },
    {
      "id": 157,
      "suiteName": "Negative Scenarios",
      "testName": "Should prevent non-members from creating posts",
      "description": "Should prevent non-members from creating posts",
      "status": "passed",
      "duration": 123,
      "output": [
        "[log] Starting test: Negative Scenarios - Should prevent non-members from creating posts",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xD8AE93a7A1e0d747c5D43D391Ec9ecf728D903e6",
        "[log] TribeController deployed at: 0xF16D264B23E86589dF18f8Bf74d5f0D778a78fd5",
        "[log] AstrixToken deployed at: 0x0CdFaC97aE4F8E007F87812e8F49411Fd8f05530",
        "[log] TokenDispenser deployed at: 0x3fe6F6098d397D21CaaC533aca23C61D02AB2d01",
        "[log] PointSystem deployed at: 0xFf6fD83DD3859EfaA83276077ee092422a2bc295",
        "[log] CollectibleController deployed at: 0x378d73C31E4ada0Af9851e6600b154b0Cb1DC28b",
        "[log] PostFeedManager deployed at: 0xf9cB38240371C85462583a97Ce059d12F53fd8EF",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x10855D02C07758d7A9F822d2F15a41f228eC81Dc",
        "[log] PostEncryptionManager deployed at: 0x2142B5F919A67fa421d118D626A9Ee889D4a5422",
        "[log] PostInteractionManager deployed at: 0x6d041EF9096F7013d27fF7a41c17971201499879",
        "[log] PostQueryManager deployed at: 0x5F7097ca82ed89Fc3dAB99818D493321982b9a4E",
        "[log] PostMinterProxy deployed at: 0x0432CB554dCDD4012Ee81961020Bde7f40870A27",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x10855D02C07758d7A9F822d2F15a41f228eC81Dc, Encryption=0x2142B5F919A67fa421d118D626A9Ee889D4a5422, Interaction=0x6d041EF9096F7013d27fF7a41c17971201499879, Query=0x5F7097ca82ed89Fc3dAB99818D493321982b9a4E",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nScenario: Attempting post creation as non-member",
        "[log] Non-member post creation prevented successfully",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-members from creating posts (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.456Z"
    },
    {
      "id": 159,
      "suiteName": "Negative Scenarios",
      "testName": "Should prevent unauthorized encryption key access",
      "description": "Should prevent unauthorized encryption key access",
      "status": "passed",
      "duration": 131,
      "output": [
        "[log] Starting test: Negative Scenarios - Should prevent unauthorized encryption key access",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xd6F071b83dB4288239465932832Bd035944ab452",
        "[log] TribeController deployed at: 0xB997861a190E474BCa7c77dFfd0AB4A3E869c7D8",
        "[log] AstrixToken deployed at: 0xA25c35588875078ae6fe300C82b0220Faa5B22cc",
        "[log] TokenDispenser deployed at: 0x9E10a21449F383Cd79D2E233208BABb56A163CD8",
        "[log] PointSystem deployed at: 0x4a916d406b5BD30aE99f9EbD8DcfDa64B82D6F4F",
        "[log] CollectibleController deployed at: 0xbc749f199F7D66Ee414ed3214A5b77Ae1c8D2110",
        "[log] PostFeedManager deployed at: 0x652eb38Fc74693437a1D508d7a831d811Be34227",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x23DFBc4B8B80C14CC5e25011B8491f268395BAd6",
        "[log] PostEncryptionManager deployed at: 0x142458eE914CE315F040CdCE64647e08f482AB29",
        "[log] PostInteractionManager deployed at: 0xAF194984fa4570B8fE909c102844Bd2584E6E90b",
        "[log] PostQueryManager deployed at: 0x86B254F65925C372C3fe8479ec423BF55f9ebE0c",
        "[log] PostMinterProxy deployed at: 0x1e5f08CC5cb9350337cEaDafeaAf41016Cb88216",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x23DFBc4B8B80C14CC5e25011B8491f268395BAd6, Encryption=0x142458eE914CE315F040CdCE64647e08f482AB29, Interaction=0xAF194984fa4570B8fE909c102844Bd2584E6E90b, Query=0x86B254F65925C372C3fe8479ec423BF55f9ebE0c",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nScenario: Testing unauthorized encryption key access",
        "[log] Step 1: Creating encrypted post",
        "[log] Encrypted post created with ID: 0",
        "[log] \nStep 2: Attempting unauthorized key access",
        "[log] Unauthorized key access prevented",
        "Duration: 2ms",
        "[log] Ending test: Should prevent unauthorized encryption key access (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.744Z"
    },
    {
      "id": 158,
      "suiteName": "Negative Scenarios",
      "testName": "Should validate collectible requirements",
      "description": "Should validate collectible requirements",
      "status": "passed",
      "duration": 156,
      "output": [
        "[log] Starting test: Negative Scenarios - Should validate collectible requirements",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x8914E24eCb1900AC4cfe9b06d8d930c3504dCCBA",
        "[log] TribeController deployed at: 0xcc827f77C84f6A3ABb3aAA71Cfb01b74daF028aa",
        "[log] AstrixToken deployed at: 0x1788FB2D3B20c4a72745D75713a480aFe2B393bB",
        "[log] TokenDispenser deployed at: 0x37EEDa448D9CF94C113F4cb63c1d280D9B9E54d2",
        "[log] PointSystem deployed at: 0x3b6c662C5dE946e8f90a6efd612De67C44Fb868e",
        "[log] CollectibleController deployed at: 0xdEb94Ed943d70A6343E18fE81eA08bF9AB0BB6F2",
        "[log] PostFeedManager deployed at: 0x7f854de4e6D69A6EbdfFfCb92851139BA0Cc6bC0",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x91823a7192472998143Fb18251Df254f9bA00428",
        "[log] PostEncryptionManager deployed at: 0xe829d9aD102BC75449B7185DaaaA2E85cd270627",
        "[log] PostInteractionManager deployed at: 0x9f90561766cEA617912925Af6F13737467C70884",
        "[log] PostQueryManager deployed at: 0x23681CeC8e4c2a9BFbC3c4F557f4BA478B903cF4",
        "[log] PostMinterProxy deployed at: 0x79fD45793DC81Da9BaB6aE577f01ba7935484C51",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Manager contracts: Creation=0x91823a7192472998143Fb18251Df254f9bA00428, Encryption=0xe829d9aD102BC75449B7185DaaaA2E85cd270627, Interaction=0x9f90561766cEA617912925Af6F13737467C70884, Query=0x23681CeC8e4c2a9BFbC3c4F557f4BA478B903cF4",
        "[log] User1 membership status: 1",
        "[log] User2 membership status: 1",
        "[log] Adding users to tribe 1 whitelist explicitly",
        "[log] Updated tribe whitelist with all test users",
        "[log] After whitelist update - User1 membership status: 1",
        "[log] After whitelist update - User2 membership status: 1",
        "[log] \nScenario: Testing collectible validation",
        "[log] Invalid collectible validation successful",
        "Duration: 29ms",
        "[log] Ending test: Should validate collectible requirements (passed)"
      ],
      "timestamp": "2025-04-24T12:45:14.612Z"
    },
    {
      "id": 184,
      "suiteName": "NFT Gated Tribe",
      "testName": "Should allow joining after acquiring required NFT",
      "description": "Should allow joining after acquiring required NFT",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: NFT Gated Tribe - Should allow joining after acquiring required NFT",
        "Duration: 3ms",
        "[log] Ending test: Should allow joining after acquiring required NFT (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.190Z"
    },
    {
      "id": 182,
      "suiteName": "NFT Gated Tribe",
      "testName": "Should allow joining before NFT requirement is set",
      "description": "Should allow joining before NFT requirement is set",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: NFT Gated Tribe - Should allow joining before NFT requirement is set",
        "Duration: 1ms",
        "[log] Ending test: Should allow joining before NFT requirement is set (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.106Z"
    },
    {
      "id": 183,
      "suiteName": "NFT Gated Tribe",
      "testName": "Should prevent joining after NFT requirement is set without NFT",
      "description": "Should prevent joining after NFT requirement is set without NFT",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: NFT Gated Tribe - Should prevent joining after NFT requirement is set without NFT",
        "Duration: 2ms",
        "[log] Ending test: Should prevent joining after NFT requirement is set without NFT (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.147Z"
    },
    {
      "id": 106,
      "suiteName": "Point Redemption",
      "testName": "Should allow point redemption with valid signature",
      "description": "Should allow point redemption with valid signature",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Point Redemption - Should allow point redemption with valid signature",
        "Duration: 1ms",
        "[log] Ending test: Should allow point redemption with valid signature (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.237Z"
    },
    {
      "id": 108,
      "suiteName": "Point Redemption",
      "testName": "Should prevent replay attacks",
      "description": "Should prevent replay attacks",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Point Redemption - Should prevent replay attacks",
        "Duration: 1ms",
        "[log] Ending test: Should prevent replay attacks (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.262Z"
    },
    {
      "id": 107,
      "suiteName": "Point Redemption",
      "testName": "Should reject redemption with invalid signature",
      "description": "Should reject redemption with invalid signature",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Point Redemption - Should reject redemption with invalid signature",
        "Duration: 1ms",
        "[log] Ending test: Should reject redemption with invalid signature (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.250Z"
    },
    {
      "id": 146,
      "suiteName": "Point System Analytics",
      "testName": "Should return top members correctly",
      "description": "Should return top members correctly",
      "status": "passed",
      "duration": 123,
      "output": [
        "[log] Starting test: Point System Analytics - Should return top members correctly",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xA004df2beeF4EF4a58333B814A16c677c1DF4E64",
        "[log] TribeController deployed at: 0xfE435387201D3327983d19293B60C1C014E61650",
        "[log] AstrixToken deployed at: 0xD86bc69b52508368622E4F9f8f70a603FFbFC89C",
        "[log] TokenDispenser deployed at: 0xEAEa45b8078f9fcA46DFb42b16016c8C234F7ff3",
        "[log] PointSystem deployed at: 0xe5AF54AA3f81E0cc23d7EBEe959570bdbF8eD598",
        "[log] CollectibleController deployed at: 0xE28a1b108B07C9Cfa4636165Ee7cA3927ee17797",
        "[log] PostFeedManager deployed at: 0xF5971713619e7622e82f329a3f46B7280E781c58",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x97df52b63a4E506fB5d7E2bb231aF552c02b5fa1",
        "[log] PostEncryptionManager deployed at: 0xD8d69B943eD9bA56A433375703C0cCa3f53C8678",
        "[log] PostInteractionManager deployed at: 0x197FB8D29D14B5eF6cAfF78B799788Ae10D2B681",
        "[log] PostQueryManager deployed at: 0x1360963C6c5E707CAFA724078d26034FB8554c7A",
        "[log] PostMinterProxy deployed at: 0x5fced2ffc59401d5a3D2439C7b997E7bcCF85Ff8",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 3ms",
        "[log] Ending test: Should return top members correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.188Z"
    },
    {
      "id": 140,
      "suiteName": "Point System Basic Operations",
      "testName": "Should allow manual point awards by admin",
      "description": "Should allow manual point awards by admin",
      "status": "passed",
      "duration": 118,
      "output": [
        "[log] Starting test: Point System Basic Operations - Should allow manual point awards by admin",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x335Ea63013DEcc3e270D6E095A460530c552CF3E",
        "[log] TribeController deployed at: 0xF6987b595D4196A40db287ef77eEf181BB045272",
        "[log] AstrixToken deployed at: 0x688F01FF7f8e48ED6A209fC965c77e2980af7c21",
        "[log] TokenDispenser deployed at: 0x93dc9AdeABcD0B36ce7F46B0e852E77B3Fd35bFE",
        "[log] PointSystem deployed at: 0xcc1bD10fc6Ae33Dc048D8d6c068B4376C6DCB64c",
        "[log] CollectibleController deployed at: 0x4BCD98b42fd74c8f386E650848773e841A5d332B",
        "[log] PostFeedManager deployed at: 0x94f22206e0FD145f91DFF52f564Ef5B920095B40",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x76c47A3688A530738a1ee882684Ee36d3546ff7c",
        "[log] PostEncryptionManager deployed at: 0x459CF9a1a496AC928ab0E90a8ef1148d7Acec4B4",
        "[log] PostInteractionManager deployed at: 0xE4406411A10F83F07546C87Afd8530f463a7B767",
        "[log] PostQueryManager deployed at: 0xC7116c3dD488712Eb056Ec18870df17D5aBAe481",
        "[log] PostMinterProxy deployed at: 0x119D963FF798E1A29249182ea9b5C9057Ef24547",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should allow manual point awards by admin (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.453Z"
    },
    {
      "id": 138,
      "suiteName": "Point System Basic Operations",
      "testName": "Should award points for actions correctly",
      "description": "Should award points for actions correctly",
      "status": "passed",
      "duration": 119,
      "output": [
        "[log] Starting test: Point System Basic Operations - Should award points for actions correctly",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xc2837a9Afac387ABe93d49FAE81394892127Cbe5",
        "[log] TribeController deployed at: 0xe7E1FB8bf3783f133e11Ea8163c0CC0C8d0600D7",
        "[log] AstrixToken deployed at: 0xE75e556d685D7428C8242eaF331A5eF80FCACa1f",
        "[log] TokenDispenser deployed at: 0x186758879f2609536e0ea7d20C4cEBAcfE83a818",
        "[log] PointSystem deployed at: 0xf4f7ca3c361cA2B457Ca6AC9E393B2dad5C6b78b",
        "[log] CollectibleController deployed at: 0x8fe7274F9968f496B6B8B9C19d07234AcBFdF18E",
        "[log] PostFeedManager deployed at: 0xf16bA2643D03f9f3d6b1e8B66327eC5Fc9b69862",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x52b6622fa8057b2180E0E87B0da9E3a30093751d",
        "[log] PostEncryptionManager deployed at: 0x59DF6E82EDFAa5759E1ab08b6A8fA8dac30c13C0",
        "[log] PostInteractionManager deployed at: 0x11e73abC581190B9fe31B804a5877aB5C2754C64",
        "[log] PostQueryManager deployed at: 0x981E895CBA9dA29927838A9feB699AB255999933",
        "[log] PostMinterProxy deployed at: 0x0c8A72d89AA40B71Ee5F430E89E1681f944DAAc0",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 2ms",
        "[log] Ending test: Should award points for actions correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.217Z"
    },
    {
      "id": 139,
      "suiteName": "Point System Basic Operations",
      "testName": "Should track action counts correctly",
      "description": "Should track action counts correctly",
      "status": "passed",
      "duration": 117,
      "output": [
        "[log] Starting test: Point System Basic Operations - Should track action counts correctly",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x6863952619b2a5f6556F32Cb05De23CC5d080255",
        "[log] TribeController deployed at: 0xF09d18a431C56E859885B37582BD6BDd2333b54C",
        "[log] AstrixToken deployed at: 0x02e2F86748f46AB043D82C464f0F51147F2B52d3",
        "[log] TokenDispenser deployed at: 0x8Ff9c3CF91B09c380aedAA030eE5dA1Ef6BCb278",
        "[log] PointSystem deployed at: 0xe6F314143AE46b5b0594Ae7C88e6A39D36964bb7",
        "[log] CollectibleController deployed at: 0x422f02546F2e5E3dE3A52962f0220498030e1669",
        "[log] PostFeedManager deployed at: 0x8f9BE2DA37662Ad5CcfE233CDbBEF5F5C4480666",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xB66E074437A2b420Ee50DDD03B1047C01DBcd0E5",
        "[log] PostEncryptionManager deployed at: 0xEdBe4b9b9d47B432A8e8230b97E2e1eE78d23591",
        "[log] PostInteractionManager deployed at: 0x432B94664262334a0c3140Fbe24AaD5e76B844AF",
        "[log] PostQueryManager deployed at: 0xe7dA9C7486556ec0061b6dac078a8569A6873088",
        "[log] PostMinterProxy deployed at: 0x0C2CbA6148A53F0Aa596a371314cc206B681d0E2",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should track action counts correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.335Z"
    },
    {
      "id": 144,
      "suiteName": "Point System Integration with Collectibles",
      "testName": "Should allow claiming collectible with sufficient points",
      "description": "Should allow claiming collectible with sufficient points",
      "status": "passed",
      "duration": 128,
      "output": [
        "[log] Starting test: Point System Integration with Collectibles - Should allow claiming collectible with sufficient points",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x288D991A64Ed02171d0beC0DC788ad76421e1169",
        "[log] TribeController deployed at: 0xA589fee47fe9F28390b6fC68DD28bD0A96591416",
        "[log] AstrixToken deployed at: 0xaD60cee051579E1143e3DC425573f57Ac05A1315",
        "[log] TokenDispenser deployed at: 0x7E01Fa1d951d301b976809B194F81df7baA318b8",
        "[log] PointSystem deployed at: 0x6aa9cd608F9984C3122dA1b94dEB6930c9AaE364",
        "[log] CollectibleController deployed at: 0x2C103F8133e05d9D1c7916e5a583E4BFefde0EEB",
        "[log] PostFeedManager deployed at: 0x8509EBc97cA4bC10eaD27870a4ac1B279dc6E992",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x879580935D01106fdaC4E62E7ca75a3Ba703a9a9",
        "[log] PostEncryptionManager deployed at: 0x930954f915E413BC14a657669418fA8fb66163a0",
        "[log] PostInteractionManager deployed at: 0xabbB307CDAc48E1fa9c9046df1eD2Ccc031A8D05",
        "[log] PostQueryManager deployed at: 0xBE7C7BBB91FEDf4ccd2387c031268BbD5e17B75f",
        "[log] PostMinterProxy deployed at: 0x0331A46Ab6A93Ec9f7E70901161B16334888291E",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should allow claiming collectible with sufficient points (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.942Z"
    },
    {
      "id": 145,
      "suiteName": "Point System Integration with Collectibles",
      "testName": "Should prevent claiming collectible without sufficient points",
      "description": "Should prevent claiming collectible without sufficient points",
      "status": "passed",
      "duration": 123,
      "output": [
        "[log] Starting test: Point System Integration with Collectibles - Should prevent claiming collectible without sufficient points",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x95142498886E95939aFefe44461dcEfcCdeee684",
        "[log] TribeController deployed at: 0x8DcE8FB00f04A7EE9fEB498cEf86f410de83CA89",
        "[log] AstrixToken deployed at: 0x92a100E3DF76B121Ac849A973aFEA63DC3e96682",
        "[log] TokenDispenser deployed at: 0x6EDA4e0525C8c9803a5b8D2f16654ac1795818c5",
        "[log] PointSystem deployed at: 0x4f79a8485ce345db5943B01729D53eE02E2c68cA",
        "[log] CollectibleController deployed at: 0x56BBC4969818d4E27Fe39983f8aDee4F3e1C5c6f",
        "[log] PostFeedManager deployed at: 0x51522C5D19dF4841B3eC82d1F97e1D08E8BFf37f",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xDcbd0d0A904eAad4e2935745faD7c27eBD9BC862",
        "[log] PostEncryptionManager deployed at: 0xec8eEef80bda591e5f909c39C743EC437B8D9e17",
        "[log] PostInteractionManager deployed at: 0xde54dEe81876c4696044714Ee375ba8bc037b14B",
        "[log] PostQueryManager deployed at: 0x287da1D560CC66F6A686E9E2723eB7A21DE35422",
        "[log] PostMinterProxy deployed at: 0x9AC91029691A8D483F32672A0261D4E8708351D7",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 2ms",
        "[log] Ending test: Should prevent claiming collectible without sufficient points (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.065Z"
    },
    {
      "id": 142,
      "suiteName": "Point System Negative Tests",
      "testName": "Should prevent awarding points to non-members",
      "description": "Should prevent awarding points to non-members",
      "status": "passed",
      "duration": 119,
      "output": [
        "[log] Starting test: Point System Negative Tests - Should prevent awarding points to non-members",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xD4e39dE3F2Bff707E9518E310B836E58bBA0D495",
        "[log] TribeController deployed at: 0xAA64b19ad9d661585641F0dDBEb03Be3D83B2d96",
        "[log] AstrixToken deployed at: 0x5562E5e4bDd31490baA358fDeee284CAd9228944",
        "[log] TokenDispenser deployed at: 0xBFa5f1acA45FC4A6B726814F8ED855709A2c0BE7",
        "[log] PointSystem deployed at: 0x42Ec321AfC3D607BE5dB1eC1E83664167ECac3c7",
        "[log] CollectibleController deployed at: 0x246F0fCaF2Fa206dbaf575e604C5a81CF4b15C68",
        "[log] PostFeedManager deployed at: 0x026Bae7f033E7B7ac0953b104151603270379a8B",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x7078df561cF252bdDa2BfC987DABB476dEc31b17",
        "[log] PostEncryptionManager deployed at: 0x31676919335252527965da74b8dFFF589e23Ec81",
        "[log] PostInteractionManager deployed at: 0xFE4eae5d84412B70b1f04b3F78351a654D28Da25",
        "[log] PostQueryManager deployed at: 0x9B9f7569A535Cd2B66EC9B2F5509F5e688Ba92B5",
        "[log] PostMinterProxy deployed at: 0x8B8d13a7f678FA8f6793290Ee9e46302Be427453",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should prevent awarding points to non-members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.690Z"
    },
    {
      "id": 143,
      "suiteName": "Point System Negative Tests",
      "testName": "Should prevent deducting more points than available",
      "description": "Should prevent deducting more points than available",
      "status": "passed",
      "duration": 124,
      "output": [
        "[log] Starting test: Point System Negative Tests - Should prevent deducting more points than available",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xE2E3d9Ad116768b4065ba6A7659B119C80aff0b4",
        "[log] TribeController deployed at: 0x3C04eFaED53ab8b35eD8D58F075cdCb0D22603Db",
        "[log] AstrixToken deployed at: 0xdD738b624280eEFf742471e0F22D32dB1c3bd07a",
        "[log] TokenDispenser deployed at: 0x5d2c6Aa671CcC1D967739008A0ECb0Cf1E4d2203",
        "[log] PointSystem deployed at: 0xfb9c605DA571b74182bb075fa35ac947dB62C25D",
        "[log] CollectibleController deployed at: 0xb7568B0281C1D35A04aF796844C5Dcfff8E53aCf",
        "[log] PostFeedManager deployed at: 0x189dB0D27fE2B73aF4D02CF4D2E8680e49F9e4DB",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x70EdA143E87481Befd349367dA12E03145655cB0",
        "[log] PostEncryptionManager deployed at: 0xa9FCD9102fbe420a40B380a891f94a3Fc1D4Fb2c",
        "[log] PostInteractionManager deployed at: 0x8A472Ca618c74FdF270A9A75bE6034a7d98BB9B9",
        "[log] PostQueryManager deployed at: 0xe6aD6C8f4943CC39b5dFb46FB88a1597bdF4b467",
        "[log] PostMinterProxy deployed at: 0xE35d45037913Fd6868a820E99d2ad45ce969b5b8",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should prevent deducting more points than available (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.814Z"
    },
    {
      "id": 141,
      "suiteName": "Point System Negative Tests",
      "testName": "Should prevent non-admin from awarding points",
      "description": "Should prevent non-admin from awarding points",
      "status": "passed",
      "duration": 118,
      "output": [
        "[log] Starting test: Point System Negative Tests - Should prevent non-admin from awarding points",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xefBa1032bB5f9bEC79e022f52D89C2cc9090D1B8",
        "[log] TribeController deployed at: 0x86C33a2aF71644c69d1321bcC53AD19b7ab86CcB",
        "[log] AstrixToken deployed at: 0x541c8Fbe245ccf607dD599bC6c62e9c26d55BA90",
        "[log] TokenDispenser deployed at: 0x529d912E5280CFC1AD612e40966E4C634DDf15c2",
        "[log] PointSystem deployed at: 0xF78ce1E2f0De8FD15cE6aC4DdeC6982413fda499",
        "[log] CollectibleController deployed at: 0x0850795695318e619afd3BFAbFA3ad6b91738261",
        "[log] PostFeedManager deployed at: 0xC5Db239B08da4edB2D9Ab8E5e1E2A8B00d8B8023",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x805Edf48678447c9599C11E01F61d4fCe5Da5313",
        "[log] PostEncryptionManager deployed at: 0x196c8dA77e48d29890B90483E894E53A234957d0",
        "[log] PostInteractionManager deployed at: 0x7ba13e11e428260b98D8630407b1806FF617A8e4",
        "[log] PostQueryManager deployed at: 0xA4eBc4762601EE5792349044c796Ce3da9A13f1A",
        "[log] PostMinterProxy deployed at: 0x704829fE2F558068fD286C90134DA458DAa3fD87",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-admin from awarding points (passed)"
      ],
      "timestamp": "2025-04-24T12:45:12.571Z"
    },
    {
      "id": 152,
      "suiteName": "Post Listing Tests",
      "testName": "Should get all posts by user",
      "description": "Should get all posts by user",
      "status": "passed",
      "duration": 75,
      "output": [
        "[log] Starting test: Post Listing Tests - Should get all posts by user",
        "Duration: 1ms",
        "[log] Ending test: Should get all posts by user (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.855Z"
    },
    {
      "id": 151,
      "suiteName": "Post Listing Tests",
      "testName": "Should get all posts with pagination",
      "description": "Should get all posts with pagination",
      "status": "passed",
      "duration": 81,
      "output": [
        "[log] Starting test: Post Listing Tests - Should get all posts with pagination",
        "Duration: 2ms",
        "[log] Ending test: Should get all posts with pagination (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.780Z"
    },
    {
      "id": 153,
      "suiteName": "Post Listing Tests",
      "testName": "Should get post feed for user",
      "description": "Should get post feed for user",
      "status": "passed",
      "duration": 77,
      "output": [
        "[log] Starting test: Post Listing Tests - Should get post feed for user",
        "Duration: 1ms",
        "[log] Ending test: Should get post feed for user (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.932Z"
    },
    {
      "id": 111,
      "suiteName": "PostMinter Cooldown Test",
      "testName": "Should enforce post creation cooldown",
      "description": "Should enforce post creation cooldown",
      "status": "passed",
      "duration": 156,
      "output": [
        "[log] Starting test: PostMinter Cooldown Test - Should enforce post creation cooldown",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x570ADc5880D778aE5935f199aa590091586CDf75",
        "[log] TribeController deployed at: 0x8B8776BEDB1eD89Ab6BD2388bCbef3C579ca53b9",
        "[log] AstrixToken deployed at: 0x1BA1f90A3eB0e59421B54Dbf876119987587C0C3",
        "[log] TokenDispenser deployed at: 0xFE0730c6426b87BEBE9bf73474B1310F93617822",
        "[log] PointSystem deployed at: 0xED2c0B4fAE32e94a8e3A96a2F999A235ef95a746",
        "[log] CollectibleController deployed at: 0x2B09d54B5cA65dEB169c29c2D3e01cc3Dd214cd3",
        "[log] PostFeedManager deployed at: 0x57a7b5cD15eA2c64A48104482837519B81a0619a",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xD83C9f1B0DaFb1992eF92ac62D6509e54AD4eD48",
        "[log] PostEncryptionManager deployed at: 0x1f720E7952650ED8Ca142feBD52aCBe8b7A21741",
        "[log] PostInteractionManager deployed at: 0x0d6e43d4d7944408d9a5A10BC57B4348d61cD764",
        "[log] PostQueryManager deployed at: 0xc90C13734D20e27904dF248FB850f50C81CE3642",
        "[log] PostMinterProxy deployed at: 0xFCc4Ba754Ae127396D3c6dCA507389b5A5b6EFAe",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] User3 membership status: 1",
        "[log] Granted admin role to user3",
        "[log] Setup complete",
        "[log] \nScenario: Testing post creation cooldown",
        "[log] Step 1: Creating first post",
        "[log] First post created",
        "[log] \nStep 2: Attempting immediate second post",
        "[log] Cooldown enforcement verified",
        "Duration: 38ms",
        "[log] Ending test: Should enforce post creation cooldown (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.444Z"
    },
    {
      "id": 192,
      "suiteName": "Private Tribe",
      "testName": "Should allow admin to approve pending member",
      "description": "Should allow admin to approve pending member",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Private Tribe - Should allow admin to approve pending member",
        "Duration: 2ms",
        "[log] Ending test: Should allow admin to approve pending member (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.510Z"
    },
    {
      "id": 193,
      "suiteName": "Private Tribe",
      "testName": "Should allow admin to reject pending member",
      "description": "Should allow admin to reject pending member",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Private Tribe - Should allow admin to reject pending member",
        "Duration: 1ms",
        "[log] Ending test: Should allow admin to reject pending member (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.549Z"
    },
    {
      "id": 194,
      "suiteName": "Private Tribe",
      "testName": "Should not allow non-admin to approve/reject members",
      "description": "Should not allow non-admin to approve/reject members",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Private Tribe - Should not allow non-admin to approve/reject members",
        "Duration: 2ms",
        "[log] Ending test: Should not allow non-admin to approve/reject members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.590Z"
    },
    {
      "id": 191,
      "suiteName": "Private Tribe",
      "testName": "Should set member status to PENDING when requesting to join",
      "description": "Should set member status to PENDING when requesting to join",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: Private Tribe - Should set member status to PENDING when requesting to join",
        "Duration: 1ms",
        "[log] Ending test: Should set member status to PENDING when requesting to join (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.471Z"
    },
    {
      "id": 61,
      "suiteName": "Project Creation",
      "testName": "Should create a project from valid post",
      "description": "Should create a project from valid post",
      "status": "passed",
      "duration": 146,
      "output": [
        "[log] Starting test: Project Creation - Should create a project from valid post",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x4BEA9aAe24187d6128403DC556510A18d727871a",
        "[log] TribeController deployed at: 0x6cD036fDBD89BaA51c8722Eec0B56CeEd301cC68",
        "[log] AstrixToken deployed at: 0x64386BC53c213F23C6960d3e080139A0f9Ef1733",
        "[log] TokenDispenser deployed at: 0x4A65b9d13908487A1654be48e6aa9Bc701735910",
        "[log] PointSystem deployed at: 0x295129609d6876f5ECC62052Ba6bc082139A982c",
        "[log] CollectibleController deployed at: 0xB92257D74B8815EC711071889cB506C8d66A6a06",
        "[log] PostFeedManager deployed at: 0x737b8F095E3c575a6Ae5FE1711AdB8F271E20269",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x0Ac85d55ebFc7f7b0cF4c13bb3BD6Eaf3909d62d",
        "[log] PostEncryptionManager deployed at: 0x4B901e2Db7C412D966689E8D3CF479294C456f1e",
        "[log] PostInteractionManager deployed at: 0x8C08821f5f94b519c853486eB131667AA528A460",
        "[log] PostQueryManager deployed at: 0xdcaa80371BDF9ff638851713f145Df074428Db19",
        "[log] PostMinterProxy deployed at: 0xcf23CE2ffa1DDd9Cc2b445aE6778c4DBD605a1A0",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 14ms",
        "[log] Ending test: Should create a project from valid post (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.627Z"
    },
    {
      "id": 62,
      "suiteName": "Project Creation",
      "testName": "Should prevent non-creator from validating post",
      "description": "Should prevent non-creator from validating post",
      "status": "passed",
      "duration": 141,
      "output": [
        "[log] Starting test: Project Creation - Should prevent non-creator from validating post",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xE55cc27460B55c8aC7E73043F38b537758C9E51e",
        "[log] TribeController deployed at: 0x69eB226983E10D7318816134cd44BE3023dC74cd",
        "[log] AstrixToken deployed at: 0x29e95B6bbCd23fbF66e9d8ee2029564A734560De",
        "[log] TokenDispenser deployed at: 0xD8fE7c45330c8b12cA0D4728D75557b9e7BeB24F",
        "[log] PointSystem deployed at: 0x3358F984e9B3CBBe976eEFE9B6fb92a214162932",
        "[log] CollectibleController deployed at: 0x3Aa338c8d5E6cefE95831cD0322b558677abA0f1",
        "[log] PostFeedManager deployed at: 0x6858dF5365ffCbe31b5FE68D9E6ebB81321F7F86",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x7E27bCbe2F0eDdA3E0AA12492950a6B8703b00FB",
        "[log] PostEncryptionManager deployed at: 0x9015957A2210BB8B10e27d8BBEEF8d9498f123eF",
        "[log] PostInteractionManager deployed at: 0x7C4BDA48bd4C9ac4FbcC60deEb66bf80d35705f0",
        "[log] PostQueryManager deployed at: 0x9C6c49E1a5108eC5A2111c0b9B62624100d11e3a",
        "[log] PostMinterProxy deployed at: 0x02121128f1Ed0AdA5Df3a87f42752fcE4Ad63e59",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 9ms",
        "[log] Ending test: Should prevent non-creator from validating post (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.768Z"
    },
    {
      "id": 76,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should create a project with milestones",
      "description": "Should create a project with milestones",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should create a project with milestones",
        "Duration: 19ms",
        "[log] Ending test: Should create a project with milestones (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.827Z"
    },
    {
      "id": 77,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should handle milestone submissions and reviews",
      "description": "Should handle milestone submissions and reviews",
      "status": "passed",
      "duration": 27,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should handle milestone submissions and reviews",
        "Duration: 27ms",
        "[log] Ending test: Should handle milestone submissions and reviews (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.854Z"
    },
    {
      "id": 78,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should handle project status updates",
      "description": "Should handle project status updates",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should handle project status updates",
        "Duration: 22ms",
        "[log] Ending test: Should handle project status updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.876Z"
    },
    {
      "id": 79,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should prevent unauthorized updates",
      "description": "Should prevent unauthorized updates",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should prevent unauthorized updates",
        "Duration: 10ms",
        "[log] Ending test: Should prevent unauthorized updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.886Z"
    },
    {
      "id": 82,
      "suiteName": "Project Update Scenarios",
      "testName": "Should handle milestone completion updates",
      "description": "Should handle milestone completion updates",
      "status": "passed",
      "duration": 26,
      "output": [
        "[log] Starting test: Project Update Scenarios - Should handle milestone completion updates",
        "Duration: 12ms",
        "[log] Ending test: Should handle milestone completion updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.965Z"
    },
    {
      "id": 81,
      "suiteName": "Project Update Scenarios",
      "testName": "Should handle progress updates",
      "description": "Should handle progress updates",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Project Update Scenarios - Should handle progress updates",
        "Duration: 11ms",
        "[log] Ending test: Should handle progress updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.939Z"
    },
    {
      "id": 83,
      "suiteName": "Project Update Scenarios",
      "testName": "Should validate update permissions",
      "description": "Should validate update permissions",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Project Update Scenarios - Should validate update permissions",
        "Duration: 10ms",
        "[log] Ending test: Should validate update permissions (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.987Z"
    },
    {
      "id": 80,
      "suiteName": "Project Validation Scenarios",
      "testName": "Should prevent unauthorized updates",
      "description": "Should prevent unauthorized updates",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: Project Validation Scenarios - Should prevent unauthorized updates",
        "Duration: 12ms",
        "[log] Ending test: Should prevent unauthorized updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.917Z"
    },
    {
      "id": 164,
      "suiteName": "Role Assignment",
      "testName": "Should assign roles correctly",
      "description": "Should assign roles correctly",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: Role Assignment - Should assign roles correctly",
        "Duration: 2ms",
        "[log] Ending test: Should assign roles correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.595Z"
    },
    {
      "id": 166,
      "suiteName": "Role Assignment",
      "testName": "Should only allow admin to assign roles",
      "description": "Should only allow admin to assign roles",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Role Assignment - Should only allow admin to assign roles",
        "Duration: 4ms",
        "[log] Ending test: Should only allow admin to assign roles (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.634Z"
    },
    {
      "id": 165,
      "suiteName": "Role Assignment",
      "testName": "Should remove roles correctly",
      "description": "Should remove roles correctly",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Role Assignment - Should remove roles correctly",
        "Duration: 2ms",
        "[log] Ending test: Should remove roles correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.614Z"
    },
    {
      "id": 168,
      "suiteName": "Role Verification",
      "testName": "Should check for all roles correctly",
      "description": "Should check for all roles correctly",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Role Verification - Should check for all roles correctly",
        "Duration: 1ms",
        "[log] Ending test: Should check for all roles correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.671Z"
    },
    {
      "id": 167,
      "suiteName": "Role Verification",
      "testName": "Should check for any role correctly",
      "description": "Should check for any role correctly",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Role Verification - Should check for any role correctly",
        "Duration: 1ms",
        "[log] Ending test: Should check for any role correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.653Z"
    },
    {
      "id": 169,
      "suiteName": "Role Verification",
      "testName": "Should get user roles correctly",
      "description": "Should get user roles correctly",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Role Verification - Should get user roles correctly",
        "Duration: 1ms",
        "[log] Ending test: Should get user roles correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.690Z"
    },
    {
      "id": 195,
      "suiteName": "Role-based Access Control",
      "testName": "Should allow moderator to perform moderation actions",
      "description": "Should allow moderator to perform moderation actions",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: Role-based Access Control - Should allow moderator to perform moderation actions",
        "Duration: 2ms",
        "[log] Ending test: Should allow moderator to perform moderation actions (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.633Z"
    },
    {
      "id": 196,
      "suiteName": "Role-based Access Control",
      "testName": "Should prevent regular members from performing admin actions",
      "description": "Should prevent regular members from performing admin actions",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Role-based Access Control - Should prevent regular members from performing admin actions",
        "Duration: 2ms",
        "[log] Ending test: Should prevent regular members from performing admin actions (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.675Z"
    },
    {
      "id": 7,
      "suiteName": "Scenario 1: Tribe Creation",
      "testName": "Should create a private tribe with entry fee",
      "description": "Should create a private tribe with entry fee",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Scenario 1: Tribe Creation - Should create a private tribe with entry fee",
        "Duration: 2ms",
        "[log] Ending test: Should create a private tribe with entry fee (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.651Z"
    },
    {
      "id": 6,
      "suiteName": "Scenario 1: Tribe Creation",
      "testName": "Should create a public tribe successfully",
      "description": "Should create a public tribe successfully",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: Scenario 1: Tribe Creation - Should create a public tribe successfully",
        "Duration: 2ms",
        "[log] Ending test: Should create a public tribe successfully (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.632Z"
    },
    {
      "id": 8,
      "suiteName": "Scenario 2: Update Tribe",
      "testName": "Should allow tribe admin to update tribe config",
      "description": "Should allow tribe admin to update tribe config",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Scenario 2: Update Tribe - Should allow tribe admin to update tribe config",
        "Duration: 2ms",
        "[log] Ending test: Should allow tribe admin to update tribe config (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.670Z"
    },
    {
      "id": 9,
      "suiteName": "Scenario 2: Update Tribe",
      "testName": "Should prevent non-admin from updating tribe config",
      "description": "Should prevent non-admin from updating tribe config",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Scenario 2: Update Tribe - Should prevent non-admin from updating tribe config",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-admin from updating tribe config (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.689Z"
    },
    {
      "id": 12,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should allow admin to approve pending members",
      "description": "Should allow admin to approve pending members",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should allow admin to approve pending members",
        "Duration: 1ms",
        "[log] Ending test: Should allow admin to approve pending members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.746Z"
    },
    {
      "id": 13,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should allow admin to reject pending members and return entry fee",
      "description": "Should allow admin to reject pending members and return entry fee",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should allow admin to reject pending members and return entry fee",
        "Duration: 2ms",
        "[log] Ending test: Should allow admin to reject pending members and return entry fee (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.766Z"
    },
    {
      "id": 10,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should allow instant join for public tribes",
      "description": "Should allow instant join for public tribes",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should allow instant join for public tribes",
        "Duration: 1ms",
        "[log] Ending test: Should allow instant join for public tribes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.707Z"
    },
    {
      "id": 11,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should require approval for private tribes",
      "description": "Should require approval for private tribes",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should require approval for private tribes",
        "Duration: 2ms",
        "[log] Ending test: Should require approval for private tribes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.728Z"
    },
    {
      "id": 16,
      "suiteName": "Scenario 9.1: Creating a Community",
      "testName": "Should create a private community with entry fee",
      "description": "Should create a private community with entry fee",
      "status": "passed",
      "duration": 75,
      "output": [
        "[log] Starting test: Scenario 9.1: Creating a Community - Should create a private community with entry fee",
        "Duration: 1ms",
        "[log] Ending test: Should create a private community with entry fee (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.060Z"
    },
    {
      "id": 15,
      "suiteName": "Scenario 9.1: Creating a Community",
      "testName": "Should create a public community with basic configuration",
      "description": "Should create a public community with basic configuration",
      "status": "passed",
      "duration": 80,
      "output": [
        "[log] Starting test: Scenario 9.1: Creating a Community - Should create a public community with basic configuration",
        "Duration: 2ms",
        "[log] Ending test: Should create a public community with basic configuration (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.985Z"
    },
    {
      "id": 17,
      "suiteName": "Scenario 9.1: Creating a Community",
      "testName": "Should create an invite-only community with collectible requirement",
      "description": "Should create an invite-only community with collectible requirement",
      "status": "passed",
      "duration": 74,
      "output": [
        "[log] Starting test: Scenario 9.1: Creating a Community - Should create an invite-only community with collectible requirement",
        "Duration: 1ms",
        "[log] Ending test: Should create an invite-only community with collectible requirement (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.134Z"
    },
    {
      "id": 75,
      "suiteName": "Security Scenarios",
      "testName": "Should prevent milestone review manipulation",
      "description": "Should prevent milestone review manipulation",
      "status": "passed",
      "duration": 141,
      "output": [
        "[log] Starting test: Security Scenarios - Should prevent milestone review manipulation",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xbB57B4A979929EE85a82C2867F95795A6A3020a0",
        "[log] TribeController deployed at: 0xE05879d59939e2981359F36b6c867a4138177daF",
        "[log] AstrixToken deployed at: 0x17073Da1E92008eAE64cd5D3e8129F7928D3b362",
        "[log] TokenDispenser deployed at: 0x9F5085A6C933DcD997AcE0a0676c8091e0D9e14C",
        "[log] PointSystem deployed at: 0x1adc67Ca1ddb67A43772a29f79d58394A125C1b3",
        "[log] CollectibleController deployed at: 0x18a0503B232224B2f8954ADB2391B623Bc6A8960",
        "[log] PostFeedManager deployed at: 0xb253CF3416369B6fC64463aDA298d3032EF9B674",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x3dbf1AC0df429fBa0af1b57F79A364817Ad2db66",
        "[log] PostEncryptionManager deployed at: 0x97aEcF81A25d74F5463d2b31eeD72d42995BA4DC",
        "[log] PostInteractionManager deployed at: 0x26956F14dd56483e358C237fBF7a1729254b648D",
        "[log] PostQueryManager deployed at: 0x2f1632a006039644eC58aB6846ba32BB18A0F37B",
        "[log] PostMinterProxy deployed at: 0x7Df54861967d020734Bcc3a115182E6e3E13316A",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 2ms",
        "[log] Ending test: Should prevent milestone review manipulation (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.675Z"
    },
    {
      "id": 73,
      "suiteName": "Security Scenarios",
      "testName": "Should prevent unauthorized milestone updates",
      "description": "Should prevent unauthorized milestone updates",
      "status": "passed",
      "duration": 145,
      "output": [
        "[log] Starting test: Security Scenarios - Should prevent unauthorized milestone updates",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x1f4F3EbD152a3266D5482e7cBA7328279a5F0b67",
        "[log] TribeController deployed at: 0xbe2f35a908B0EC2D9131c1e713209028C3aF43DE",
        "[log] AstrixToken deployed at: 0xb78E3E846FAf57Db15FfF17d8200a7736A7EDfBF",
        "[log] TokenDispenser deployed at: 0xd5aab64516b11492d3d3d67e2e2FF79eC6bCF7a3",
        "[log] PointSystem deployed at: 0x8bA83450090a4F22649C5d01806d1C2679b1Ba98",
        "[log] CollectibleController deployed at: 0xC3c0692BD68738e444888A8631ce19E44816872a",
        "[log] PostFeedManager deployed at: 0x4921F2e6EE4d823086B32dFEBEA6C9B6cBD54ed2",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x08D01510cA9E4539959Fd4244eA1fB7b069A37AE",
        "[log] PostEncryptionManager deployed at: 0x5C956bedDDA675c0cAe32409b75804e93F05F337",
        "[log] PostInteractionManager deployed at: 0x6eED2f58ed21a651CCc42Af123E243FaBad920E0",
        "[log] PostQueryManager deployed at: 0x28C24b94f9C9102358553C774d3a7dCDF73f7339",
        "[log] PostMinterProxy deployed at: 0x02Ae5B9f372FC35658dE3259aFBAcdc3b05F46dA",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 0ms",
        "[log] Ending test: Should prevent unauthorized milestone updates (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.389Z"
    },
    {
      "id": 74,
      "suiteName": "Security Scenarios",
      "testName": "Should prevent unauthorized team member additions",
      "description": "Should prevent unauthorized team member additions",
      "status": "passed",
      "duration": 145,
      "output": [
        "[log] Starting test: Security Scenarios - Should prevent unauthorized team member additions",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x7b9c26146AfAdBcF5e6cEa3Fd98d73C93C0149df",
        "[log] TribeController deployed at: 0xbA040D73aDE0B2f8ad9c8A674971A66A2022DbFF",
        "[log] AstrixToken deployed at: 0xe844dF90c946CecD08076D129E14a3bc04C9f5d5",
        "[log] TokenDispenser deployed at: 0x8341FcB21884C0e619c60881231C41f7952E9c25",
        "[log] PointSystem deployed at: 0xf44221Af97Aa54444164233E0C2EA5932Db55938",
        "[log] CollectibleController deployed at: 0xE063a388aDAc130661c6a13d0EB27fdddB97Cc4A",
        "[log] PostFeedManager deployed at: 0x0d92C6d62552D732b3B9dbd7fe6E98e5A71c9D67",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x76Ad73bDe207f23960f10418E9A8a9Fe99648d90",
        "[log] PostEncryptionManager deployed at: 0xb18785D39970ba55832F477DF8FE5B4488a90972",
        "[log] PostInteractionManager deployed at: 0xb9A62F59F8c1359E24830e4FD209954E21B7DF37",
        "[log] PostQueryManager deployed at: 0x8e32b3a6D82DdD3a5d9E327eBAe8FE1e8a5Ba61e",
        "[log] PostMinterProxy deployed at: 0xB5D6528752d60E23137fe088380dA24BDe347eb3",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 1ms",
        "[log] Ending test: Should prevent unauthorized team member additions (passed)"
      ],
      "timestamp": "2025-04-24T12:45:09.534Z"
    },
    {
      "id": 1,
      "suiteName": "Signup Journey",
      "testName": "Should complete full signup process",
      "description": "Should complete full signup process",
      "status": "passed",
      "duration": 433,
      "output": [
        "[log] Starting test: Signup Journey - Should complete full signup process",
        "[log] \nStep 1: Checking username availability",
        "[log] Username 'cryptouser' is available",
        "[log] \nStep 2: Creating profile",
        "[log] Profile created with token ID: 0",
        "[log] \nStep 3: Verifying profile data",
        "[log] Profile data verified successfully",
        "[log] \nStep 4: Updating profile metadata",
        "[log] Avatar updated",
        "[log] Bio updated",
        "[log] Profile updates verified",
        "Duration: 8ms",
        "[log] Ending test: Should complete full signup process (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.536Z"
    },
    {
      "id": 2,
      "suiteName": "Signup Journey",
      "testName": "Should handle duplicate username signup attempt",
      "description": "Should handle duplicate username signup attempt",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Signup Journey - Should handle duplicate username signup attempt",
        "Duration: 6ms",
        "[log] Ending test: Should handle duplicate username signup attempt (passed)"
      ],
      "timestamp": "2025-04-24T12:45:04.557Z"
    },
    {
      "id": 170,
      "suiteName": "Special Fan Role Assignment",
      "testName": "Should allow admin to assign fan role",
      "description": "Should allow admin to assign fan role",
      "status": "passed",
      "duration": 17,
      "output": [
        "[log] Starting test: Special Fan Role Assignment - Should allow admin to assign fan role",
        "Duration: 1ms",
        "[log] Ending test: Should allow admin to assign fan role (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.707Z"
    },
    {
      "id": 171,
      "suiteName": "Special Fan Role Assignment",
      "testName": "Should not allow non-admin to assign fan role",
      "description": "Should not allow non-admin to assign fan role",
      "status": "passed",
      "duration": 17,
      "output": [
        "[log] Starting test: Special Fan Role Assignment - Should not allow non-admin to assign fan role",
        "Duration: 1ms",
        "[log] Ending test: Should not allow non-admin to assign fan role (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.724Z"
    },
    {
      "id": 63,
      "suiteName": "Team Management",
      "testName": "Should allow adding team members",
      "description": "Should allow adding team members",
      "status": "passed",
      "duration": 147,
      "output": [
        "[log] Starting test: Team Management - Should allow adding team members",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xC6A09F78CfB85275e5261200442b0B9AA9D4D0ce",
        "[log] TribeController deployed at: 0xA002B84Ca3c9e8748209F286Ecf99300CA50161A",
        "[log] AstrixToken deployed at: 0x4633394E4Fd1175273845d7F0d6A5F613309d384",
        "[log] TokenDispenser deployed at: 0x039d7496e432c6Aea4c24648a59318b3cbe09942",
        "[log] PointSystem deployed at: 0xbF97DEfeb6a387215E3e67DFb988c675c9bb1a29",
        "[log] CollectibleController deployed at: 0xaE7b7A1c6C4d859e19301ccAc2C6eD28A4C51288",
        "[log] PostFeedManager deployed at: 0xe9CD84fe4ddfB0f016e3264791923902906753Bd",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xeA2e668d430e5AA15babA2f5c5edfd4F9Ef6EB73",
        "[log] PostEncryptionManager deployed at: 0xA7240bcff60Eef40F31B8eD5d921BaD6DB13B199",
        "[log] PostInteractionManager deployed at: 0xc565EB7363769f8ffAe0005285ccD854c631A0a0",
        "[log] PostQueryManager deployed at: 0x2C56932223cdE0D363266f1308c48Ff1BF9F9041",
        "[log] PostMinterProxy deployed at: 0x91c8C745fd156d8624677aa924Cdc1Ef8173C69C",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 3ms",
        "[log] Ending test: Should allow adding team members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:07.915Z"
    },
    {
      "id": 65,
      "suiteName": "Team Management",
      "testName": "Should prevent adding duplicate team members",
      "description": "Should prevent adding duplicate team members",
      "status": "passed",
      "duration": 144,
      "output": [
        "[log] Starting test: Team Management - Should prevent adding duplicate team members",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xFe44FF05D7C06E792D6eF4762B2441e82Bc602a5",
        "[log] TribeController deployed at: 0x07bf260a44CEADfad215cc8e20c5b0398D25b1FA",
        "[log] AstrixToken deployed at: 0xDb2f554A333D189ed59eA36020a83F7d6De14328",
        "[log] TokenDispenser deployed at: 0x94A44de106112A761B69dFBEB1ac6cfdD1B80304",
        "[log] PointSystem deployed at: 0x47330D2fe6F75899597C14d615003Ef561B01B14",
        "[log] CollectibleController deployed at: 0xCD75Ddf910A204d36Fc2f86e776f9d7B97A34817",
        "[log] PostFeedManager deployed at: 0xEe170eFF1BCeA1f7a46F46634fa40d590AAa5200",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x022D2B8173c7BCad83420d0953362335afB89355",
        "[log] PostEncryptionManager deployed at: 0x5d423e3eb3948873aC1b86F18dC47B4Ec4557482",
        "[log] PostInteractionManager deployed at: 0x8AAFC28174bb6c3BDc7BE92f18c2F134E876c05E",
        "[log] PostQueryManager deployed at: 0xA272fB0D17DC50652Fda5cF1651C6f8f21Fb02A8",
        "[log] PostMinterProxy deployed at: 0x8EB5A8B9732022F20ab4d3128DDf3a50a6dAa7A2",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 2ms",
        "[log] Ending test: Should prevent adding duplicate team members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.200Z"
    },
    {
      "id": 64,
      "suiteName": "Team Management",
      "testName": "Should prevent non-creator from adding team members",
      "description": "Should prevent non-creator from adding team members",
      "status": "passed",
      "duration": 141,
      "output": [
        "[log] Starting test: Team Management - Should prevent non-creator from adding team members",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0xfDD930c22708c7572278cf74D64f3721Eedc18Ad",
        "[log] TribeController deployed at: 0x757Fd23a0fDF9F9d2786f62f96f02Db4D096d10A",
        "[log] AstrixToken deployed at: 0x7930AC7ddD1e35fD4b25230121A9C45923894e67",
        "[log] TokenDispenser deployed at: 0x4a680B00eEacbcCA480eB9aB57161A7B08A8F0Ba",
        "[log] PointSystem deployed at: 0xEFdc56feF9E089b086DD0a335F2c8c8CcB7E3031",
        "[log] CollectibleController deployed at: 0x37e2156B0d78098F06F8075a18d7E3a09483048e",
        "[log] PostFeedManager deployed at: 0xb26012b855Fc76A974261455B12190e41fC4C228",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x58d0d610674C69F27B7519a6e2746E8b814548DE",
        "[log] PostEncryptionManager deployed at: 0xEd3AAE51d33138ef67555AE0925A38E77Df5B7e0",
        "[log] PostInteractionManager deployed at: 0x76C9284988B979f750BC504173ADc08E00c04398",
        "[log] PostQueryManager deployed at: 0x2F94C3189edA0e357B23048aEc736F323Ac431f6",
        "[log] PostMinterProxy deployed at: 0x9118EA4a52C6c7873729c8d8702cCd85E573f9E9",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Setting up tribe membership for all users",
        "[log] Owner initial membership status: 0",
        "[log] Owner joining tribe...",
        "[log] Owner new membership status: 1",
        "[log] Admin initial membership status: 1",
        "[log] ProjectCreator initial membership status: 1",
        "[log] TeamMember initial membership status: 1",
        "[log] Reviewer initial membership status: 1",
        "[log] Tribe setup completed successfully",
        "Duration: 0ms",
        "[log] Ending test: Should prevent non-creator from adding team members (passed)"
      ],
      "timestamp": "2025-04-24T12:45:08.056Z"
    },
    {
      "id": 114,
      "suiteName": "Ticket Purchase",
      "testName": "Should allow user to purchase tickets",
      "description": "Should allow user to purchase tickets",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: Ticket Purchase - Should allow user to purchase tickets",
        "Duration: 2ms",
        "[log] Ending test: Should allow user to purchase tickets (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.489Z"
    },
    {
      "id": 116,
      "suiteName": "Ticket Purchase",
      "testName": "Should prevent purchase when not enough tickets available",
      "description": "Should prevent purchase when not enough tickets available",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Ticket Purchase - Should prevent purchase when not enough tickets available",
        "Duration: 1ms",
        "[log] Ending test: Should prevent purchase when not enough tickets available (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.515Z"
    },
    {
      "id": 117,
      "suiteName": "Ticket Purchase",
      "testName": "Should prevent purchase with insufficient payment",
      "description": "Should prevent purchase with insufficient payment",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Ticket Purchase - Should prevent purchase with insufficient payment",
        "Duration: 1ms",
        "[log] Ending test: Should prevent purchase with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.528Z"
    },
    {
      "id": 115,
      "suiteName": "Ticket Purchase",
      "testName": "Should refund excess payment",
      "description": "Should refund excess payment",
      "status": "passed",
      "duration": 13,
      "output": [
        "[log] Starting test: Ticket Purchase - Should refund excess payment",
        "Duration: 1ms",
        "[log] Ending test: Should refund excess payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.502Z"
    },
    {
      "id": 25,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should enforce ticket supply limits",
      "description": "Should enforce ticket supply limits",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should enforce ticket supply limits",
        "Duration: 1ms",
        "[log] Ending test: Should enforce ticket supply limits (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.262Z"
    },
    {
      "id": 27,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should handle ticket transfers correctly",
      "description": "Should handle ticket transfers correctly",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should handle ticket transfers correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle ticket transfers correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.268Z"
    },
    {
      "id": 26,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should prevent purchase with insufficient payment",
      "description": "Should prevent purchase with insufficient payment",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should prevent purchase with insufficient payment",
        "Duration: 1ms",
        "[log] Ending test: Should prevent purchase with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.264Z"
    },
    {
      "id": 23,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should purchase tickets successfully",
      "description": "Should purchase tickets successfully",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should purchase tickets successfully",
        "Duration: 2ms",
        "[log] Ending test: Should purchase tickets successfully (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.258Z"
    },
    {
      "id": 24,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should refund excess payment",
      "description": "Should refund excess payment",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should refund excess payment",
        "Duration: 1ms",
        "[log] Ending test: Should refund excess payment (passed)"
      ],
      "timestamp": "2025-04-24T12:45:05.260Z"
    },
    {
      "id": 118,
      "suiteName": "Ticket Transfer",
      "testName": "Should allow first transfer",
      "description": "Should allow first transfer",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: Ticket Transfer - Should allow first transfer",
        "Duration: 1ms",
        "[log] Ending test: Should allow first transfer (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.542Z"
    },
    {
      "id": 121,
      "suiteName": "Ticket Transfer",
      "testName": "Should handle batch transfers correctly",
      "description": "Should handle batch transfers correctly",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Ticket Transfer - Should handle batch transfers correctly",
        "Duration: 5ms",
        "[log] Ending test: Should handle batch transfers correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.588Z"
    },
    {
      "id": 119,
      "suiteName": "Ticket Transfer",
      "testName": "Should prevent second transfer",
      "description": "Should prevent second transfer",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: Ticket Transfer - Should prevent second transfer",
        "Duration: 1ms",
        "[log] Ending test: Should prevent second transfer (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.556Z"
    },
    {
      "id": 120,
      "suiteName": "Ticket Transfer",
      "testName": "Should track transfer status correctly",
      "description": "Should track transfer status correctly",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: Ticket Transfer - Should track transfer status correctly",
        "Duration: 0ms",
        "[log] Ending test: Should track transfer status correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:11.570Z"
    },
    {
      "id": 99,
      "suiteName": "Tribe Analytics",
      "testName": "Should get popular tribes",
      "description": "Should get popular tribes",
      "status": "passed",
      "duration": 83,
      "output": [
        "[log] Starting test: Tribe Analytics - Should get popular tribes",
        "Duration: 3ms",
        "[log] Ending test: Should get popular tribes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.841Z"
    },
    {
      "id": 100,
      "suiteName": "Tribe Analytics",
      "testName": "Should handle pagination correctly",
      "description": "Should handle pagination correctly",
      "status": "passed",
      "duration": 90,
      "output": [
        "[log] Starting test: Tribe Analytics - Should handle pagination correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle pagination correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:10.931Z"
    },
    {
      "id": 204,
      "suiteName": "Tribe Configuration Updates",
      "testName": "Should handle entry fee changes",
      "description": "Should handle entry fee changes",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Tribe Configuration Updates - Should handle entry fee changes",
        "Duration: 3ms",
        "[log] Ending test: Should handle entry fee changes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:17.010Z"
    },
    {
      "id": 203,
      "suiteName": "Tribe Configuration Updates",
      "testName": "Should handle join type changes correctly",
      "description": "Should handle join type changes correctly",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Tribe Configuration Updates - Should handle join type changes correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle join type changes correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.968Z"
    },
    {
      "id": 177,
      "suiteName": "Tribe Creation with Metadata",
      "testName": "Should create a tribe with collectible requirement",
      "description": "Should create a tribe with collectible requirement",
      "status": "passed",
      "duration": 52,
      "output": [
        "[log] Starting test: Tribe Creation with Metadata - Should create a tribe with collectible requirement",
        "Duration: 6ms",
        "[log] Ending test: Should create a tribe with collectible requirement (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.901Z"
    },
    {
      "id": 176,
      "suiteName": "Tribe Creation with Metadata",
      "testName": "Should create a tribe with detailed metadata",
      "description": "Should create a tribe with detailed metadata",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Tribe Creation with Metadata - Should create a tribe with detailed metadata",
        "Duration: 2ms",
        "[log] Ending test: Should create a tribe with detailed metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.849Z"
    },
    {
      "id": 174,
      "suiteName": "Tribe Listing Tests",
      "testName": "Should get all tribes with pagination",
      "description": "Should get all tribes with pagination",
      "status": "passed",
      "duration": 25,
      "output": [
        "[log] Starting test: Tribe Listing Tests - Should get all tribes with pagination",
        "Duration: 7ms",
        "[log] Ending test: Should get all tribes with pagination (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.790Z"
    },
    {
      "id": 173,
      "suiteName": "Tribe Listing Tests",
      "testName": "Should get total number of tribes",
      "description": "Should get total number of tribes",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Tribe Listing Tests - Should get total number of tribes",
        "Duration: 4ms",
        "[log] Ending test: Should get total number of tribes (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.765Z"
    },
    {
      "id": 175,
      "suiteName": "Tribe Listing Tests",
      "testName": "Should get tribe details with metadata",
      "description": "Should get tribe details with metadata",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Tribe Listing Tests - Should get tribe details with metadata",
        "Duration: 2ms",
        "[log] Ending test: Should get tribe details with metadata (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.809Z"
    },
    {
      "id": 178,
      "suiteName": "Tribe Membership and Role Management",
      "testName": "Should track member roles and permissions",
      "description": "Should track member roles and permissions",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Tribe Membership and Role Management - Should track member roles and permissions",
        "Duration: 2ms",
        "[log] Ending test: Should track member roles and permissions (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.943Z"
    },
    {
      "id": 179,
      "suiteName": "Tribe Membership and Role Management",
      "testName": "Should track tribe membership accurately",
      "description": "Should track tribe membership accurately",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Tribe Membership and Role Management - Should track tribe membership accurately",
        "Duration: 4ms",
        "[log] Ending test: Should track tribe membership accurately (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.985Z"
    },
    {
      "id": 181,
      "suiteName": "Tribe Metadata Loading and Updates",
      "testName": "Should handle user membership queries efficiently",
      "description": "Should handle user membership queries efficiently",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Tribe Metadata Loading and Updates - Should handle user membership queries efficiently",
        "Duration: 3ms",
        "[log] Ending test: Should handle user membership queries efficiently (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.065Z"
    },
    {
      "id": 180,
      "suiteName": "Tribe Metadata Loading and Updates",
      "testName": "Should load tribe metadata with member information",
      "description": "Should load tribe metadata with member information",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Tribe Metadata Loading and Updates - Should load tribe metadata with member information",
        "Duration: 1ms",
        "[log] Ending test: Should load tribe metadata with member information (passed)"
      ],
      "timestamp": "2025-04-24T12:45:16.024Z"
    },
    {
      "id": 149,
      "suiteName": "User Flow Scenarios",
      "testName": "Should handle community engagement scenario",
      "description": "Should handle community engagement scenario",
      "status": "passed",
      "duration": 128,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should handle community engagement scenario",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x2451c39ED4f33D0a9A786445C41e68396f7cd80c",
        "[log] TribeController deployed at: 0x06E5297780b87dCDD51A71Cf036E738F69Eca3e4",
        "[log] AstrixToken deployed at: 0x1D7509613056c3d6D319C599aBaB85A57E731FB3",
        "[log] TokenDispenser deployed at: 0x3435016a95338c648339EA2a74D6BAef2948Ed5C",
        "[log] PointSystem deployed at: 0xAe546209767Ae0a7bbc4233F2f73137b67923177",
        "[log] CollectibleController deployed at: 0x610f8158559D6464Cb1DFF9F5c5b74898aB3C1CC",
        "[log] PostFeedManager deployed at: 0xff789c44494e2D4aA3B1dF785CBba1B1cd58703a",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x809c2477DBa0A7518890EaF16A78249f63C20Eb7",
        "[log] PostEncryptionManager deployed at: 0xb45a34F40Ee79cc52aa7917DdCbAAAAD5637845A",
        "[log] PostInteractionManager deployed at: 0x83d9980654142968CFd457df830Bf8A0dDDca92A",
        "[log] PostQueryManager deployed at: 0xBfb3C83539F9BC85E28C1E00a9e2936d11cc2446",
        "[log] PostMinterProxy deployed at: 0xE52B0283787ab846019690E18C53Ac48652826E0",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: Community engagement simulation",
        "[log] \nStep 1: Users engaging in discussion",
        "[log] User1 final state - Points: 120, Comments: 1",
        "[log] User2 final state - Points: 25, Comments: 1",
        "Duration: 3ms",
        "[log] Ending test: Should handle community engagement scenario (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.564Z"
    },
    {
      "id": 150,
      "suiteName": "User Flow Scenarios",
      "testName": "Should handle point redemption scenario",
      "description": "Should handle point redemption scenario",
      "status": "passed",
      "duration": 135,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should handle point redemption scenario",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x6c7Df3575f1d69eb3B245A082937794794C2b82E",
        "[log] TribeController deployed at: 0x74ef79CFC735A10436eF9D4808547df0Ce38f788",
        "[log] AstrixToken deployed at: 0x5f9dD176ea5282d392225ceC5c2E7A24d5d02672",
        "[log] TokenDispenser deployed at: 0x819F9213cE51Adac4C1c2EF7D4Cba563727C1206",
        "[log] PointSystem deployed at: 0x2C834EFcDd2E9D04C1a34367BA9D8aa587F90fBe",
        "[log] CollectibleController deployed at: 0xE41bBcf8ec773B477735b0b0D8bF6E7Ca6BDe9Ee",
        "[log] PostFeedManager deployed at: 0x3A5fBC501c5D515383fADFf5ebD92C393f5eFee9",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xeC67cF0755c0A5aaD6C4A4235fDfA35c1EFEA6A9",
        "[log] PostEncryptionManager deployed at: 0x49c58c6BE0680Eb756595c0F59ab3E0b6e1624cd",
        "[log] PostInteractionManager deployed at: 0x7811A1648e43F1bC207d7DF21B039AE9D2870b91",
        "[log] PostQueryManager deployed at: 0x736D46D93104EDd3c3968a718F02D46f422D91E9",
        "[log] PostMinterProxy deployed at: 0x319554eF50998660776CF0EF924073e5c416b890",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: Point redemption flow",
        "[log] \nStep 1: Building up points",
        "[log] Initial points accumulated: 450",
        "[log] \nStep 2: Approving point deduction",
        "[log] \nStep 3: Redeeming points",
        "[log] Points after redemption: 250",
        "Duration: 13ms",
        "[log] Ending test: Should handle point redemption scenario (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.699Z"
    },
    {
      "id": 148,
      "suiteName": "User Flow Scenarios",
      "testName": "Should track milestone achievements",
      "description": "Should track milestone achievements",
      "status": "passed",
      "duration": 124,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should track milestone achievements",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x78AD159914d79F5D04b2ab603D47c95c3b9E968F",
        "[log] TribeController deployed at: 0x0Ee29547347E41fD7Bf14a0d064421275C2ae0bA",
        "[log] AstrixToken deployed at: 0xCC4699e54c5D98b82702305e63835B50e6B5Bfb5",
        "[log] TokenDispenser deployed at: 0x01573eC31E4b0f87B30008d869192faA3cd9714D",
        "[log] PointSystem deployed at: 0x617F736317e8D807ae7c0821388B26EFe0020CbC",
        "[log] CollectibleController deployed at: 0x9c5a467ca0c1BD182d0d5E0eb838261C2a2902D0",
        "[log] PostFeedManager deployed at: 0xb228c48Cf7766b80490Ed0Ef4a3A5C557aEEE867",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0x622e8Bc96bA8DC25B82c6280b03d1fbBD14BA796",
        "[log] PostEncryptionManager deployed at: 0x8bA11402a50C693539dc1FDDedBce92f6429906D",
        "[log] PostInteractionManager deployed at: 0x006683bDcfbdbac7b849d4e8dbE2e01BFC39135f",
        "[log] PostQueryManager deployed at: 0x5cFcB00a403E43572CCC2439d368b12A1230397C",
        "[log] PostMinterProxy deployed at: 0xA5FADc335E030bee0f3A9Cb2e01F18a2855F332d",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: User milestone achievements",
        "[log] \nStep 1: Tracking post milestones",
        "[log] User1 after 1 posts: 100 points",
        "[log] User1 after 2 posts: 200 points",
        "[log] User1 after 3 posts: 300 points",
        "[log] User1 after 4 posts: 400 points",
        "[log] User1 after 5 posts: 500 points",
        "[log] Final state - Posts: 5, Points: 500",
        "Duration: 5ms",
        "[log] Ending test: Should track milestone achievements (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.436Z"
    },
    {
      "id": 147,
      "suiteName": "User Flow Scenarios",
      "testName": "Should track user engagement points correctly",
      "description": "Should track user engagement points correctly",
      "status": "passed",
      "duration": 124,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should track user engagement points correctly",
        "[log] Deploying contracts for testing",
        "[log] RoleManager deployed at: 0x2fcc261bB32262a150E4905F6d550D4FF05bC582",
        "[log] TribeController deployed at: 0x5E50A3d48982Ba8CCAfE398FB0f8881A31C4f67a",
        "[log] AstrixToken deployed at: 0x63eE8865A8B25919B5103d02586AaaF078Ee9102",
        "[log] TokenDispenser deployed at: 0x90CA02Cb47113c75EB8E102c91B40181616cc9e9",
        "[log] PointSystem deployed at: 0x4B651dcC3C2e4d2Fa6feF95D73eaEC48432b5d6a",
        "[log] CollectibleController deployed at: 0xd15cF95D0DC31C7a01Ac5F73ccca6B572ADc8C05",
        "[log] PostFeedManager deployed at: 0x4f0Ab9214649A6539586FbeB575b370Ba52Bd794",
        "[log] Deploying PostMinter system...",
        "[log] PostCreationManager deployed at: 0xbdD488B78ac2b27052249e60E635B2533575a6Eb",
        "[log] PostEncryptionManager deployed at: 0xaBe1D067a76A834a853c3dEd137f14696623Be08",
        "[log] PostInteractionManager deployed at: 0xd36760784b287A381E58c9491624Da172414914a",
        "[log] PostQueryManager deployed at: 0xE943d2c6210265DeF5C06580482187Ef56f2bd18",
        "[log] PostMinterProxy deployed at: 0x839fdCcB5Bf005CBdD84DD2700fbd9B64bD94772",
        "[log] Granted admin rights to PostMinterProxy in PostFeedManager",
        "[log] Granted admin rights to all managers in PostFeedManager",
        "[log] Creating a test tribe for all tests to use",
        "[log] Default tribe created with ID: 0",
        "[log] Ensuring test users are tribe members",
        "[log] All test users added as tribe members",
        "[log] Setting up roles for PostMinter tests",
        "[log] Granting test roles to users in creation manager",
        "[log] Granting test roles to users in encryption manager",
        "[log] Granting test roles to users in interaction manager",
        "[log] Granting test roles to users in query manager",
        "[log] Contract deployment and setup completed",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: User engagement points tracking",
        "[log] \nStep 1: User1 creates a post",
        "[log] User1 points after posting: 100",
        "[log] \nStep 2: User2 likes and comments on User1's post",
        "[log] User2 points after like and comment: 25",
        "[log] \nStep 3: User1 creates another post and receives likes",
        "[log] User1 points after second post: 200",
        "[log] User2 points after second like: 30",
        "Duration: 4ms",
        "[log] Ending test: Should track user engagement points correctly (passed)"
      ],
      "timestamp": "2025-04-24T12:45:13.312Z"
    },
    {
      "id": 172,
      "suiteName": "User Role Access",
      "testName": "Should allow user to access community features if they have the correct role",
      "description": "Should allow user to access community features if they have the correct role",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: User Role Access - Should allow user to access community features if they have the correct role",
        "Duration: 1ms",
        "[log] Ending test: Should allow user to access community features if they have the correct role (passed)"
      ],
      "timestamp": "2025-04-24T12:45:15.743Z"
    }
  ],
  "systemInfo": {
    "memory": {
      "Mach Virtual Memory Statistics": "(page size of 16384 bytes)",
      "Pages free": "69644.",
      "Pages active": "572530.",
      "Pages inactive": "553205.",
      "Pages speculative": "18070.",
      "Pages throttled": "0.",
      "Pages wired down": "165103.",
      "Pages purgeable": "15882.",
      "\"Translation faults\"": "1694168108.",
      "Pages copy-on-write": "44224155.",
      "Pages zero filled": "1061608182.",
      "Pages reactivated": "116986274.",
      "Pages purged": "15378118.",
      "File-backed pages": "218414.",
      "Anonymous pages": "925391.",
      "Pages stored in compressor": "762563.",
      "Pages occupied by compressor": "151975.",
      "Decompressions": "67402158.",
      "Compressions": "84778085.",
      "Pageins": "23976258.",
      "Pageouts": "550653.",
      "Swapins": "35523.",
      "Swapouts": "215548."
    },
    "cpu": "CPU usage: 4.18% user, 9.37% sys, 86.43% idle",
    "disk": [
      "Filesystem      Size    Used   Avail Capacity iused ifree %iused  Mounted on",
      "/dev/disk3s5   460Gi   162Gi   265Gi    38%    4.1M  2.8G    0%   /System/Volumes/Data"
    ]
  },
  "suites": [
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "\u001b[33mCollectible Creation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "\u001b[33mCollectible Creation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "\u001b[33mCollectible Creation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "\u001b[33mCollectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "\u001b[33mCollectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "\u001b[33mCollectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 36
    },
    {
      "name": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 106
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 99
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 260
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 99
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 94
    },
    {
      "name": "\u001b[35m1. Tribe Creation & Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "\u001b[35m1. Tribe Management Access Control\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "\u001b[35m2. Advanced Scenarios & Edge Cases\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 92
    },
    {
      "name": "\u001b[35m2. Member Onboarding & Engagement\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 93
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 96
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 94
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 97
    },
    {
      "name": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 117
    },
    {
      "name": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 119
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 33
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 26
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 16
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 103
    },
    {
      "name": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 46
    },
    {
      "name": "Activity Scores",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 85
    },
    {
      "name": "Activity Scores",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 100
    },
    {
      "name": "Admin Functions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Admin Functions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Basic Post Creation and Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 133
    },
    {
      "name": "Basic Post Creation and Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 136
    },
    {
      "name": "Basic Post Creation and Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 131
    },
    {
      "name": "Collectible Claiming",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "Collectible Claiming",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 35
    },
    {
      "name": "Collectible Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 36
    },
    {
      "name": "Collectible Management Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 139
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 32
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 7
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 16
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 228
    },
    {
      "name": "Error Cases",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Error Cases",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Error Cases",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Event Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Event Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Event Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 139
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 141
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 145
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 193
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 204
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 201
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 222
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 33
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 34
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 59
    },
    {
      "name": "High-Demand Collectible Drop",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "High-Demand Collectible Drop",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 75
    },
    {
      "name": "Invite Code Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "Invite Code Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Invite Code Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 44
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Journey 5.1: Create Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Journey 5.1: Create Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Journey 5.2: Vote on Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Journey 5.2: Vote on Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Journey 5.3: Unauthorized Vote Attempt",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "Journey 5.3: Unauthorized Vote Attempt",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Login Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Login Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 16
    },
    {
      "name": "Login Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 17
    },
    {
      "name": "Member Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Member Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Member Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Member Queries",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 102
    },
    {
      "name": "Member Queries",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 78
    },
    {
      "name": "Member Status Transitions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 141
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 154
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 146
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 145
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 144
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 153
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 161
    },
    {
      "name": "Moderation Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 16
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 123
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 157
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 131
    },
    {
      "name": "NFT Gated Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "NFT Gated Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "NFT Gated Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "Point Redemption",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Point Redemption",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Point Redemption",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Point System Analytics",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 123
    },
    {
      "name": "Point System Basic Operations",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 120
    },
    {
      "name": "Point System Basic Operations",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 117
    },
    {
      "name": "Point System Basic Operations",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 118
    },
    {
      "name": "Point System Integration with Collectibles",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 128
    },
    {
      "name": "Point System Integration with Collectibles",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 123
    },
    {
      "name": "Point System Negative Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 118
    },
    {
      "name": "Point System Negative Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 119
    },
    {
      "name": "Point System Negative Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 124
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 81
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 75
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 78
    },
    {
      "name": "PostMinter Cooldown Test",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 156
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "Project Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 146
    },
    {
      "name": "Project Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 141
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 27
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Project Update Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Project Update Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 26
    },
    {
      "name": "Project Update Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 173
    },
    {
      "name": "Project Validation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 32
    },
    {
      "name": "Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Role Verification",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Role Verification",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Role Verification",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Role-based Access Control",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "Role-based Access Control",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Scenario 1: Tribe Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Scenario 1: Tribe Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Scenario 2: Update Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Scenario 2: Update Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Scenario 9.1: Creating a Community",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 80
    },
    {
      "name": "Scenario 9.1: Creating a Community",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 75
    },
    {
      "name": "Scenario 9.1: Creating a Community",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 74
    },
    {
      "name": "Security Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 145
    },
    {
      "name": "Security Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 145
    },
    {
      "name": "Security Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 273
    },
    {
      "name": "Signup Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 433
    },
    {
      "name": "Signup Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Special Fan Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 17
    },
    {
      "name": "Special Fan Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 17
    },
    {
      "name": "Team Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 147
    },
    {
      "name": "Team Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 141
    },
    {
      "name": "Team Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 144
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 14
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 14
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 14
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 14
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Tribe Analytics",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 83
    },
    {
      "name": "Tribe Analytics",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 91
    },
    {
      "name": "Tribe Configuration Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Tribe Configuration Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Tribe Creation with Metadata",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Tribe Creation with Metadata",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 53
    },
    {
      "name": "Tribe Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Tribe Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 25
    },
    {
      "name": "Tribe Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Tribe Membership and Role Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "Tribe Membership and Role Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Tribe Metadata Loading and Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Tribe Metadata Loading and Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 124
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 124
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 128
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 135
    },
    {
      "name": "User Role Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    }
  ]
}