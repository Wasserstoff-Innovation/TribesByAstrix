{
  "timestamp": "2025-04-20T13:28:20.010Z",
  "summary": {
    "total": 240,
    "passed": 240,
    "failed": 0,
    "duration": 5061,
    "startTime": "2025-04-20T13:28:20.010Z",
    "endTime": "2025-04-20T13:28:25.984Z"
  },
  "results": [
    {
      "id": 156,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✓ Should allow claiming with correct payment and points",
      "description": "✓ Should allow claiming with correct payment and points",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✓ Should allow claiming with correct payment and points",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: ✓ Should allow claiming with correct payment and points (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.030Z"
    },
    {
      "id": 159,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✗ Should prevent claiming beyond max supply",
      "description": "✗ Should prevent claiming beyond max supply",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✗ Should prevent claiming beyond max supply",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: ✗ Should prevent claiming beyond max supply (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.090Z"
    },
    {
      "id": 157,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✗ Should prevent claiming with insufficient payment",
      "description": "✗ Should prevent claiming with insufficient payment",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✗ Should prevent claiming with insufficient payment",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 0ms",
        "[log] Ending test: ✗ Should prevent claiming with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.049Z"
    },
    {
      "id": 158,
      "suiteName": "\u001b[33mCollectible Claiming\u001b[39m",
      "testName": "✗ Should prevent claiming with insufficient points",
      "description": "✗ Should prevent claiming with insufficient points",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Claiming\u001b[39m - ✗ Should prevent claiming with insufficient points",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent claiming with insufficient points (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.069Z"
    },
    {
      "id": 153,
      "suiteName": "\u001b[33mCollectible Creation\u001b[39m",
      "testName": "✓ Should allow tribe admin to create a collectible",
      "description": "✓ Should allow tribe admin to create a collectible",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Creation\u001b[39m - ✓ Should allow tribe admin to create a collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✓ Should allow tribe admin to create a collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.970Z"
    },
    {
      "id": 155,
      "suiteName": "\u001b[33mCollectible Creation\u001b[39m",
      "testName": "✗ Should prevent creating collectible with invalid parameters",
      "description": "✗ Should prevent creating collectible with invalid parameters",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Creation\u001b[39m - ✗ Should prevent creating collectible with invalid parameters",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 3ms",
        "[log] Ending test: ✗ Should prevent creating collectible with invalid parameters (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.009Z"
    },
    {
      "id": 154,
      "suiteName": "\u001b[33mCollectible Creation\u001b[39m",
      "testName": "✗ Should prevent non-admin from creating collectible",
      "description": "✗ Should prevent non-admin from creating collectible",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Creation\u001b[39m - ✗ Should prevent non-admin from creating collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent non-admin from creating collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.989Z"
    },
    {
      "id": 160,
      "suiteName": "\u001b[33mCollectible Management\u001b[39m",
      "testName": "✓ Should allow admin to deactivate collectible",
      "description": "✓ Should allow admin to deactivate collectible",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Management\u001b[39m - ✓ Should allow admin to deactivate collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✓ Should allow admin to deactivate collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.110Z"
    },
    {
      "id": 162,
      "suiteName": "\u001b[33mCollectible Management\u001b[39m",
      "testName": "✗ Should prevent claiming deactivated collectible",
      "description": "✗ Should prevent claiming deactivated collectible",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Management\u001b[39m - ✗ Should prevent claiming deactivated collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent claiming deactivated collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.149Z"
    },
    {
      "id": 161,
      "suiteName": "\u001b[33mCollectible Management\u001b[39m",
      "testName": "✗ Should prevent non-admin from deactivating collectible",
      "description": "✗ Should prevent non-admin from deactivating collectible",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: \u001b[33mCollectible Management\u001b[39m - ✗ Should prevent non-admin from deactivating collectible",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent non-admin from deactivating collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.129Z"
    },
    {
      "id": 163,
      "suiteName": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "testName": "✗ Should prevent direct NFT minting",
      "description": "✗ Should prevent direct NFT minting",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: \u001b[33mDirect NFT Interactions\u001b[39m - ✗ Should prevent direct NFT minting",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 1ms",
        "[log] Ending test: ✗ Should prevent direct NFT minting (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.168Z"
    },
    {
      "id": 164,
      "suiteName": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "testName": "✗ Should prevent unauthorized transfers",
      "description": "✗ Should prevent unauthorized transfers",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: \u001b[33mDirect NFT Interactions\u001b[39m - ✗ Should prevent unauthorized transfers",
        "[log] \u001b[36m\u001b[39m\n\u001b[36mSetting up test environment...\u001b[39m",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ Roles configured\u001b[39m",
        "[log] \u001b[32m✓ Test tribe created\u001b[39m",
        "[log] \u001b[32m✓ Test members added\u001b[39m",
        "Duration: 3ms",
        "[log] Ending test: ✗ Should prevent unauthorized transfers (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.188Z"
    },
    {
      "id": 77,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should allow user to update their profile metadata",
      "description": "Should allow user to update their profile metadata",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should allow user to update their profile metadata",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Profile Metadata Update ===\u001b[39m",
        "[log] \u001b[33mCreating initial profile...\u001b[39m",
        "[log] \u001b[33mUpdating profile metadata...\u001b[39m",
        "[log] \u001b[32m✓ Profile metadata successfully updated\u001b[39m",
        "Duration: 3ms",
        "[log] Ending test: Should allow user to update their profile metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.089Z"
    },
    {
      "id": 74,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should create a valid user profile",
      "description": "Should create a valid user profile",
      "status": "passed",
      "duration": 45,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should create a valid user profile",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== User Profile Creation Flow ===\u001b[39m",
        "[log] \u001b[33mCreating profile for user1...\u001b[39m",
        "[log] \u001b[32m✓ Profile created with ID: 0\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should create a valid user profile (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.983Z"
    },
    {
      "id": 75,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should prevent creating a profile with duplicate username",
      "description": "Should prevent creating a profile with duplicate username",
      "status": "passed",
      "duration": 33,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should prevent creating a profile with duplicate username",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Duplicate Username Prevention ===\u001b[39m",
        "[log] \u001b[33mCreating first profile with 'testuser' username...\u001b[39m",
        "[log] \u001b[33mAttempting to create second profile with same username...\u001b[39m",
        "[log] \u001b[32m✓ Duplicate username properly rejected\u001b[39m",
        "Duration: 5ms",
        "[log] Ending test: Should prevent creating a profile with duplicate username (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.016Z"
    },
    {
      "id": 78,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should prevent unauthorized metadata updates",
      "description": "Should prevent unauthorized metadata updates",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should prevent unauthorized metadata updates",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Unauthorized Update Prevention ===\u001b[39m",
        "[log] \u001b[33mCreating profile owned by user1...\u001b[39m",
        "[log] \u001b[33mAttempting unauthorized update from user2...\u001b[39m",
        "[log] \u001b[32m✓ Unauthorized update properly rejected\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: Should prevent unauthorized metadata updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.120Z"
    },
    {
      "id": 76,
      "suiteName": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "testName": "Should validate username format requirements",
      "description": "Should validate username format requirements",
      "status": "passed",
      "duration": 36,
      "output": [
        "[log] Starting test: \u001b[35m1. Profile Creation & Validation\u001b[39m - Should validate username format requirements",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Username Format Validation ===\u001b[39m",
        "[log] \u001b[33mTesting various invalid usernames...\u001b[39m",
        "[log] \u001b[32m✓ Username validation properly enforced\u001b[39m",
        "Duration: 7ms",
        "[log] Ending test: Should validate username format requirements (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.052Z"
    },
    {
      "id": 110,
      "suiteName": "\u001b[35m1. Tribe Creation & Management\u001b[39m",
      "testName": "Should demonstrate complete tribe creation and management flow",
      "description": "Should demonstrate complete tribe creation and management flow",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: \u001b[35m1. Tribe Creation & Management\u001b[39m - Should demonstrate complete tribe creation and management flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Creation & Management Flow ===\u001b[39m",
        "[log] \u001b[33mCreating tribe...\u001b[39m",
        "[log] \u001b[33mSetting up tribe token...\u001b[39m",
        "[log] \u001b[33mCreating access collectible...\u001b[39m",
        "[log] \u001b[33mUpdating tribe to NFT-gated...\u001b[39m",
        "[log] \u001b[32m✓ Tribe creation and setup complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should demonstrate complete tribe creation and management flow (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.250Z"
    },
    {
      "id": 108,
      "suiteName": "\u001b[35m1. Tribe Management Access Control\u001b[39m",
      "testName": "Forbidden test: Should prevent banned moderator from exercising moderator powers",
      "description": "Forbidden test: Should prevent banned moderator from exercising moderator powers",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: \u001b[35m1. Tribe Management Access Control\u001b[39m - Forbidden test: Should prevent banned moderator from exercising moderator powers",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Banned Moderator Access Control ===\u001b[39m",
        "[log] \u001b[33mCreating test tribe...\u001b[39m",
        "[log] \u001b[33mGranting Moderator role to User1...\u001b[39m",
        "[log] \u001b[33mBanning User1 (Moderator) from tribe...\u001b[39m",
        "[log] \u001b[33mAttempting banned moderator action (ban User2)...\u001b[39m",
        "[log] \u001b[32m✓ Banned moderator correctly prevented from acting\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Forbidden test: Should prevent banned moderator from exercising moderator powers (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.197Z"
    },
    {
      "id": 109,
      "suiteName": "\u001b[35m2. Advanced Scenarios & Edge Cases\u001b[39m",
      "testName": "Forbidden test: Should handle changing tribe gating after member joins",
      "description": "Forbidden test: Should handle changing tribe gating after member joins",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: \u001b[35m2. Advanced Scenarios & Edge Cases\u001b[39m - Forbidden test: Should handle changing tribe gating after member joins",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Dynamic Gating Change Test ====\u001b[39m",
        "[log] \u001b[33mCreating public tribe...\u001b[39m",
        "[log] \u001b[33mUser1 joining public tribe...\u001b[39m",
        "[log] \u001b[33mCreating gating collectible...\u001b[39m",
        "[log] \u001b[33mUpdating tribe to require NFT...\u001b[39m",
        "[log] \u001b[33mChecking User1's status after gating change...\u001b[39m",
        "[log] User1 status is now: 1",
        "[log] \u001b[33mUser1 attempting to create post after gating change...\u001b[39m",
        "[log] \u001b[33mPre-posting debug information:\u001b[39m",
        "[log] User1 member status: 1",
        "[log] TribeId: 1",
        "[log] NFT Contract: 0x77AD263Cd578045105FBFC88A477CAd808d39Cf6",
        "[log] Token ID: 0",
        "[log] \u001b[33mClaiming collectible for user1...\u001b[39m",
        "[log] \u001b[32mSuccessfully claimed collectible\u001b[39m",
        "[log] User1 now has 1 of collectible ID 0",
        "[log] \u001b[31mFailed to claim collectible: Transaction reverted without a reason string\u001b[39m",
        "[log] \u001b[33mTrying non-gated post instead...\u001b[39m",
        "[log] \u001b[33mObservation: Post creation failed - Transaction reverted without a reason string. PostMinter might re-check NFT reqs.\u001b[39m",
        "[log] Error details: {\"stackTrace\":[{\"type\":4,\"returnData\":{},\"sourceReference\":{\"sourceName\":\"contracts/PostMinter.sol\",\"sourceContent\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./interfaces/IRoleManager.sol\\\";\\nimport \\\"./interfaces/ITribeController.sol\\\";\\nimport \\\"./interfaces/ICollectibleController.sol\\\";\\nimport \\\"./interfaces/IPostMinter.sol\\\";\\nimport \\\"./libraries/PostHelpers.sol\\\";\\nimport \\\"./libraries/ProjectHelpers.sol\\\";\\nimport \\\"./libraries/FeedHelpers.sol\\\";\\nimport \\\"./libraries/InteractionHelpers.sol\\\";\\nimport \\\"./libraries/PostCreationHelpers.sol\\\";\\nimport \\\"./libraries/PostErrors.sol\\\";\\nimport \\\"./PostFeedManager.sol\\\";\\n\\n/// @custom:oz-upgrades-unsafe-allow constructor\\n/// @custom:solidity-optimizer-runs 1\\ncontract PostMinter is IPostMinter, AccessControl, ReentrancyGuard, Pausable {\\n    using ECDSA for bytes32;\\n    using PostHelpers for bytes;\\n    using FeedHelpers for FeedHelpers.PostData;\\n    using InteractionHelpers for *;\\n    using PostCreationHelpers for *;\\n\\n    // Constants\\n    uint256 public constant MAX_BATCH_POSTS = 5;\\n    uint256 public constant BATCH_POST_COOLDOWN = 5 minutes;\\n    uint256 public constant REPORT_THRESHOLD = 5;\\n    bytes32 public constant RATE_LIMIT_MANAGER_ROLE = keccak256(\\\"RATE_LIMIT_MANAGER_ROLE\\\");\\n    bytes32 public constant PROJECT_CREATOR_ROLE = keccak256(\\\"PROJECT_CREATOR_ROLE\\\");\\n\\n    // Core contracts\\n    IRoleManager public roleManager;\\n    ITribeController public tribeController;\\n    ICollectibleController public collectibleController;\\n    PostFeedManager public feedManager;\\n\\n    // Post storage\\n    uint256 public nextPostId;\\n\\n    // Mappings - combined for gas efficiency\\n    mapping(uint256 => mapping(address => mapping(InteractionType => bool))) private hasInteracted;\\n    mapping(uint256 => mapping(InteractionType => uint256)) private interactionCounts;\\n    mapping(uint256 => mapping(address => bool)) private authorizedViewers;\\n    mapping(uint256 => mapping(address => bytes32)) private postDecryptionKeys;\\n    mapping(address => mapping(PostType => uint256)) public lastPostTimeByType;\\n    mapping(address => uint256) public lastBatchTime;\\n    mapping(uint256 => uint256) public reportCount;\\n    mapping(uint256 => bytes32) public tribeEncryptionKeys;\\n    mapping(PostType => uint256) public postTypeCooldowns;\\n\\n    constructor(\\n        address _roleManager,\\n        address _tribeController,\\n        address _collectibleController,\\n        address _feedManager\\n    ) {\\n        roleManager = IRoleManager(_roleManager);\\n        tribeController = ITribeController(_tribeController);\\n        collectibleController = ICollectibleController(_collectibleController);\\n        feedManager = PostFeedManager(_feedManager);\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(RATE_LIMIT_MANAGER_ROLE, msg.sender);\\n        _grantRole(PROJECT_CREATOR_ROLE, msg.sender);\\n\\n        _initializeCooldowns();\\n    }\\n\\n    function _initializeCooldowns() private {\\n        postTypeCooldowns[PostType.TEXT] = 1 minutes;\\n        postTypeCooldowns[PostType.RICH_MEDIA] = 2 minutes;\\n        postTypeCooldowns[PostType.EVENT] = 30 seconds;\\n        postTypeCooldowns[PostType.POLL] = 5 minutes;\\n        postTypeCooldowns[PostType.PROJECT_UPDATE] = 2 minutes;\\n        postTypeCooldowns[PostType.COMMUNITY_UPDATE] = 5 minutes;\\n        postTypeCooldowns[PostType.ENCRYPTED] = 2 minutes;\\n    }\\n\\n    // Modified to use functions instead of modifiers where possible\\n    function _checkTribeMember(uint256 tribeId) internal view {\\n        if (tribeController.getMemberStatus(tribeId, msg.sender) != ITribeController.MemberStatus.ACTIVE) {\\n            revert PostErrors.NotTribeMember(uint(tribeController.getMemberStatus(tribeId, msg.sender)));\\n        }\\n    }\\n\\n    function _checkPostCreator(uint256 postId) internal view {\\n        if (feedManager.getPost(postId).creator != msg.sender) {\\n            revert PostErrors.NotPostCreator();\\n        }\\n    }\\n\\n    function _checkCooldown(PostType postType) internal {\\n        if (!hasRole(RATE_LIMIT_MANAGER_ROLE, msg.sender)) {\\n            if (block.timestamp < lastPostTimeByType[msg.sender][postType] + postTypeCooldowns[postType]) {\\n                revert PostErrors.CooldownActive();\\n            }\\n        }\\n    }\\n\\n    function _updateLastPostTime(PostType postType) internal {\\n        lastPostTimeByType[msg.sender][postType] = block.timestamp;\\n    }\\n\\n    // Kept as modifier for onlyTribeMember because of frequent use\\n    modifier onlyTribeMember(uint256 tribeId) {\\n        _checkTribeMember(tribeId);\\n        _;\\n    }\\n\\n    modifier onlyPostCreator(uint256 postId) {\\n        _checkPostCreator(postId);\\n        _;\\n    }\\n\\n    modifier notTooFrequent(PostType postType) {\\n        _checkCooldown(postType);\\n        _;\\n        _updateLastPostTime(postType);\\n    }\\n\\n    function createPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external override onlyTribeMember(tribeId) whenNotPaused returns (uint256) {\\n        // Check for empty metadata\\n        if (bytes(metadata).length == 0) revert PostErrors.EmptyMetadata();\\n        \\n        // Validate JSON format\\n        bytes memory metadataBytes = bytes(metadata);\\n        if (metadataBytes[0] != '{' || metadataBytes[metadataBytes.length - 1] != '}') \\n            revert PostErrors.InvalidJsonFormat();\\n\\n        // Determine post type from metadata\\n        PostType postType = _determinePostType(metadataBytes);\\n        \\n        // Validate required fields\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"title\\\\\\\"\\\")) \\n            revert PostErrors.MissingTitleField();\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"content\\\\\\\"\\\")) \\n            revert PostErrors.MissingContentField();\\n\\n        // Check cooldown unless user has rate limit manager role\\n        _checkCooldown(postType);\\n        _updateLastPostTime(postType);\\n\\n        PostCreationHelpers.PostCreationParams memory params = PostCreationHelpers.PostCreationParams({\\n            tribeId: tribeId,\\n            metadata: metadata,\\n            isGated: isGated,\\n            collectibleContract: collectibleContract,\\n            collectibleId: collectibleId,\\n            creator: msg.sender,\\n            nextPostId: nextPostId++,\\n            postType: postType\\n        });\\n\\n        FeedHelpers.PostData memory post;\\n\\n        // For gated posts, perform additional validation - otherwise simplify flow\\n        if (isGated) {\\n            if (collectibleContract == address(0)) revert PostErrors.InvalidCollectibleContract();\\n            if (!collectibleController.getCollectible(collectibleId).isActive) revert PostErrors.InvalidCollectible();\\n            post = PostCreationHelpers.validateAndCreatePost(\\n                params,\\n                collectibleController\\n            );\\n        } else {\\n            // Create post without additional NFT checks for already verified members\\n            post = FeedHelpers.PostData({\\n                id: params.nextPostId,\\n                creator: params.creator,\\n                tribeId: params.tribeId,\\n                metadata: params.metadata,\\n                isGated: params.isGated,\\n                collectibleContract: params.collectibleContract,\\n                collectibleId: params.collectibleId,\\n                isEncrypted: false,\\n                encryptionKeyHash: bytes32(0),\\n                accessSigner: address(0),\\n                parentPostId: 0,\\n                createdAt: block.timestamp,\\n                isDeleted: false\\n            });\\n        }\\n\\n        feedManager.addPost(post);\\n        emit PostCreated(post.id, tribeId, msg.sender, metadata);\\n        return post.id;\\n    }\\n\\n    // Extract post type determination to a separate function\\n    function _determinePostType(bytes memory metadataBytes) internal view returns (PostType) {\\n        PostType postType = PostType.TEXT;\\n\\n        if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"EVENT\\\\\\\"\\\")) {\\n            postType = PostType.EVENT;\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"eventDetails\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"RICH_MEDIA\\\\\\\"\\\")) {\\n            postType = PostType.RICH_MEDIA;\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"mediaContent\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT\\\\\\\"\\\") ||\\n                  PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT_UPDATE\\\\\\\"\\\")) {\\n            postType = PostType.PROJECT_UPDATE;\\n            \\n            // Project creation permission check\\n            if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT\\\\\\\"\\\") && \\n                !roleManager.hasRole(PROJECT_CREATOR_ROLE, msg.sender)) {\\n                revert PostErrors.InsufficientAccess();\\n            }\\n            // For project updates, do a simpler check to avoid increasing contract size\\n            else if (PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT_UPDATE\\\\\\\"\\\") &&\\n                     !roleManager.hasRole(PROJECT_CREATOR_ROLE, msg.sender)) {\\n                revert PostErrors.InsufficientAccess();\\n            }\\n        }\\n        \\n        return postType;\\n    }\\n\\n    function createReply(\\n        uint256 parentPostId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external onlyTribeMember(feedManager.getPost(parentPostId).tribeId) notTooFrequent(PostType.TEXT) whenNotPaused returns (uint256) {\\n        if (parentPostId >= nextPostId) revert PostErrors.InvalidParentPost();\\n        if (feedManager.getPost(parentPostId).isDeleted) revert PostErrors.PostDeleted();\\n\\n        uint256 tribeId = feedManager.getPost(parentPostId).tribeId;\\n        PostCreationHelpers.PostCreationParams memory params = PostCreationHelpers.PostCreationParams({\\n            tribeId: tribeId,\\n            metadata: metadata,\\n            isGated: isGated,\\n            collectibleContract: collectibleContract,\\n            collectibleId: collectibleId,\\n            creator: msg.sender,\\n            nextPostId: nextPostId++,\\n            postType: PostType.TEXT\\n        });\\n\\n        FeedHelpers.PostData memory post = PostCreationHelpers.validateAndCreatePost(\\n            params,\\n            collectibleController\\n        );\\n\\n        post.parentPostId = parentPostId;\\n        feedManager.addPost(post);\\n        interactionCounts[parentPostId][InteractionType.REPLY]++;\\n        return post.id;\\n    }\\n\\n    function createEncryptedPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bytes32 encryptionKeyHash,\\n        address accessSigner\\n    ) external onlyTribeMember(tribeId) notTooFrequent(PostType.ENCRYPTED) whenNotPaused returns (uint256) {\\n        if (bytes(metadata).length == 0) revert PostErrors.EmptyMetadata();\\n        if (encryptionKeyHash == bytes32(0)) revert PostErrors.InvalidEncryptionKey();\\n        if (accessSigner == address(0)) revert PostErrors.InvalidSigner();\\n\\n        uint256 postId = nextPostId++;\\n        FeedHelpers.PostData memory post = FeedHelpers.PostData({\\n            id: postId,\\n            creator: msg.sender,\\n            tribeId: tribeId,\\n            metadata: metadata,\\n            isGated: false,\\n            collectibleContract: address(0),\\n            collectibleId: 0,\\n            isEncrypted: true,\\n            encryptionKeyHash: encryptionKeyHash,\\n            accessSigner: accessSigner,\\n            parentPostId: 0,\\n            createdAt: block.timestamp,\\n            isDeleted: false\\n        });\\n\\n        // Store decryption key for the creator\\n        postDecryptionKeys[postId][msg.sender] = encryptionKeyHash;\\n        \\n        // Store tribe encryption key if not already set\\n        if (tribeEncryptionKeys[tribeId] == bytes32(0)) {\\n            tribeEncryptionKeys[tribeId] = encryptionKeyHash;\\n        }\\n\\n        feedManager.addPost(post);\\n        emit EncryptedPostCreated(postId, tribeId, msg.sender, metadata, encryptionKeyHash, accessSigner);\\n        return postId;\\n    }\\n\\n    function createSignatureGatedPost(\\n        uint256 tribeId,\\n        string memory metadata,\\n        bytes32 encryptionKeyHash,\\n        address accessSigner,\\n        address collectibleContract,\\n        uint256 collectibleId\\n    ) external onlyTribeMember(tribeId) notTooFrequent(PostType.TEXT) whenNotPaused returns (uint256) {\\n        if (bytes(metadata).length == 0) revert PostErrors.EmptyMetadata();\\n        if (encryptionKeyHash == bytes32(0)) revert PostErrors.InvalidEncryptionKey();\\n        if (accessSigner == address(0)) revert PostErrors.InvalidSigner();\\n        if (collectibleContract != address(collectibleController)) revert PostErrors.InvalidCollectibleContract();\\n        if (!collectibleController.getCollectible(collectibleId).isActive) revert PostErrors.InvalidCollectible();\\n\\n        uint256 postId = nextPostId++;\\n        FeedHelpers.PostData memory post = FeedHelpers.PostData({\\n            id: postId,\\n            creator: msg.sender,\\n            tribeId: tribeId,\\n            metadata: metadata,\\n            isGated: true,\\n            collectibleContract: collectibleContract,\\n            collectibleId: collectibleId,\\n            isEncrypted: true,\\n            encryptionKeyHash: encryptionKeyHash,\\n            accessSigner: accessSigner,\\n            parentPostId: 0,\\n            createdAt: block.timestamp,\\n            isDeleted: false\\n        });\\n\\n        feedManager.addPost(post);\\n        emit SignatureGatedPostCreated(\\n            postId,\\n            tribeId,\\n            msg.sender,\\n            metadata,\\n            encryptionKeyHash,\\n            accessSigner,\\n            collectibleContract,\\n            collectibleId\\n        );\\n        return postId;\\n    }\\n\\n    function deletePost(uint256 postId) external override onlyPostCreator(postId) whenNotPaused nonReentrant {\\n        if (feedManager.getPost(postId).isDeleted) revert PostErrors.PostDeleted();\\n        feedManager.markPostDeleted(postId);\\n        emit PostDeleted(postId, msg.sender);\\n    }\\n\\n    function reportPost(uint256 postId, string calldata reason) external override whenNotPaused nonReentrant {\\n        if (feedManager.getPost(postId).isDeleted) revert PostErrors.PostDeleted();\\n        if (hasInteracted[postId][msg.sender][InteractionType.REPORT]) revert PostErrors.AlreadyReported();\\n\\n        hasInteracted[postId][msg.sender][InteractionType.REPORT] = true;\\n        reportCount[postId]++;\\n\\n        if (reportCount[postId] >= REPORT_THRESHOLD) {\\n            feedManager.getPost(postId).isDeleted = true;\\n            emit PostDeleted(postId, msg.sender);\\n        }\\n        \\n        emit PostReported(postId, msg.sender, reason);\\n    }\\n\\n    function authorizeViewer(uint256 postId, address viewer) external override onlyPostCreator(postId) whenNotPaused {\\n        authorizedViewers[postId][viewer] = true;\\n    }\\n\\n    function setTribeEncryptionKey(uint256 tribeId, bytes32 encryptionKey) external override onlyTribeMember(tribeId) whenNotPaused {\\n        if (tribeController.getTribeAdmin(tribeId) != msg.sender) revert PostErrors.NotTribeAdmin();\\n        tribeEncryptionKeys[tribeId] = encryptionKey;\\n    }\\n\\n    function interactWithPost(uint256 postId, InteractionType interactionType) external override {\\n        FeedHelpers.PostData memory post = feedManager.getPost(postId);\\n        if (post.isDeleted) revert PostErrors.PostDeleted();\\n        if (post.creator == msg.sender) revert PostErrors.CannotInteractWithOwnPost();\\n        if (hasInteracted[postId][msg.sender][interactionType]) revert PostErrors.AlreadyInteracted();\\n        \\n        if (!canViewPost(postId, msg.sender)) {\\n            revert PostErrors.InsufficientAccess();\\n        }\\n        \\n        hasInteracted[postId][msg.sender][interactionType] = true;\\n        interactionCounts[postId][interactionType]++;\\n    }\\n\\n    function canViewPost(uint256 postId, address viewer) public view override returns (bool) {\\n        FeedHelpers.PostData memory post = feedManager.getPost(postId);\\n        \\n        if (post.isDeleted) return false;\\n        \\n        if (authorizedViewers[postId][viewer]) return true;\\n        if (post.creator == viewer) return true;\\n\\n        if (tribeController.getMemberStatus(post.tribeId, viewer) != ITribeController.MemberStatus.ACTIVE) {\\n            return false;\\n        }\\n\\n        if (!post.isGated) {\\n            return true;\\n        }\\n\\n        if (post.collectibleContract != address(0)) {\\n            try ICollectibleController(post.collectibleContract).balanceOf(viewer, post.collectibleId) returns (uint256 balance) {\\n                return balance > 0;\\n            } catch {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function getPostDecryptionKey(uint256 postId, address viewer) external view override returns (bytes32) {\\n        if (!canViewPost(postId, viewer)) revert PostErrors.InsufficientAccess();\\n        \\n        // If viewer has a direct key, return it\\n        if (postDecryptionKeys[postId][viewer] != bytes32(0)) {\\n            return postDecryptionKeys[postId][viewer];\\n        }\\n        \\n        // If viewer is a tribe member, derive their key\\n        FeedHelpers.PostData memory post = feedManager.getPost(postId);\\n        if (post.isEncrypted && tribeController.getMemberStatus(post.tribeId, viewer) == ITribeController.MemberStatus.ACTIVE) {\\n            return deriveSharedKey(post.tribeId, viewer);\\n        }\\n        \\n        return bytes32(0);\\n    }\\n\\n    function verifyPostAccess(\\n        uint256 postId,\\n        address viewer,\\n        bytes memory signature\\n    ) external view override returns (bool) {\\n        FeedHelpers.PostData memory post = feedManager.getPost(postId);\\n        if (post.accessSigner == address(0)) revert PostErrors.InvalidSigner();\\n\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(viewer, post.tribeId)\\n        );\\n        bytes32 ethSignedMessageHash = MessageHashUtils.toEthSignedMessageHash(messageHash);\\n        \\n        (address recoveredSigner, ECDSA.RecoverError error, ) = ECDSA.tryRecover(ethSignedMessageHash, signature);\\n        if (error != ECDSA.RecoverError.NoError) return false;\\n\\n        return recoveredSigner == post.accessSigner;\\n    }\\n\\n    function getInteractionCount(uint256 postId, InteractionType interactionType) external view override returns (uint256) {\\n        return interactionCounts[postId][interactionType];\\n    }\\n\\n    function getPostReplies(uint256 postId) external view override returns (uint256[] memory) {\\n        uint256[] memory replies = new uint256[](interactionCounts[postId][InteractionType.REPLY]);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 0; i < nextPostId; i++) {\\n            if (feedManager.getPost(i).parentPostId == postId && !feedManager.getPost(i).isDeleted) {\\n                replies[count++] = i;\\n            }\\n        }\\n        \\n        return replies;\\n    }\\n\\n    function generatePostKey(uint256 postId) public view override returns (bytes32) {\\n        return keccak256(abi.encodePacked(postId, block.timestamp, msg.sender));\\n    }\\n\\n    function deriveSharedKey(uint256 tribeId, address member) public view override returns (bytes32) {\\n        return keccak256(abi.encodePacked(tribeEncryptionKeys[tribeId], member));\\n    }\\n\\n    function getPost(uint256 postId) external view override returns (\\n        uint256 id,\\n        address creator,\\n        uint256 tribeId,\\n        string memory metadata,\\n        bool isGated,\\n        address collectibleContract,\\n        uint256 collectibleId,\\n        bool isEncrypted,\\n        address accessSigner\\n    ) {\\n        FeedHelpers.PostData memory post = feedManager.getPost(postId);\\n        return (\\n            post.id,\\n            post.creator,\\n            post.tribeId,\\n            post.metadata,\\n            post.isGated,\\n            post.collectibleContract,\\n            post.collectibleId,\\n            post.isEncrypted,\\n            post.accessSigner\\n        );\\n    }\\n\\n    function pause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // Move metadata validation into a library later to save space\\n    function validateMetadata(string memory metadata, PostType postType) public pure returns (bool) {\\n        bytes memory metadataBytes = bytes(metadata);\\n        \\n        // Validate basic format - this will revert with InvalidJsonFormat if format is invalid\\n        if (metadataBytes.length == 0) revert PostErrors.EmptyMetadata();\\n        if (metadataBytes[0] != \\\"{\\\" || metadataBytes[metadataBytes.length - 1] != \\\"}\\\") revert PostErrors.InvalidJsonFormat();\\n        \\n        // Check for required fields based on post type\\n        if (postType == PostType.EVENT) {\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"EVENT\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (postType == PostType.RICH_MEDIA) {\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"RICH_MEDIA\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        } else if (postType == PostType.PROJECT_UPDATE) {\\n            if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT_UPDATE\\\\\\\"\\\")) {\\n                revert PostErrors.InvalidPostType();\\n            }\\n        }\\n\\n        // Check for title field\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"title\\\\\\\"\\\")) {\\n            revert PostErrors.MissingTitleField();\\n        }\\n        \\n        // Check for content field\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"content\\\\\\\"\\\")) {\\n            revert PostErrors.MissingContentField();\\n        }\\n\\n        // Check for empty values\\n        if (PostHelpers.hasEmptyValue(metadataBytes, \\\"\\\\\\\"title\\\\\\\"\\\") || \\n            PostHelpers.hasEmptyValue(metadataBytes, \\\"\\\\\\\"content\\\\\\\"\\\")) {\\n            revert PostErrors.InvalidMetadata();\\n        }\\n\\n        return true;\\n    }\\n\\n    function createBatchPosts(\\n        uint256 tribeId,\\n        BatchPostData[] calldata posts\\n    ) external override onlyTribeMember(tribeId) whenNotPaused returns (uint256[] memory) {\\n        if (posts.length > MAX_BATCH_POSTS) revert PostErrors.BatchLimitExceeded();\\n        \\n        if (!hasRole(RATE_LIMIT_MANAGER_ROLE, msg.sender)) {\\n            if (block.timestamp < lastBatchTime[msg.sender] + BATCH_POST_COOLDOWN) {\\n                revert PostErrors.BatchCooldownActive();\\n            }\\n        }\\n\\n        uint256[] memory postIds = new uint256[](posts.length);\\n        \\n        for (uint256 i = 0; i < posts.length; i++) {\\n            PostCreationHelpers.PostCreationParams memory params = PostCreationHelpers.PostCreationParams({\\n                tribeId: tribeId,\\n                metadata: posts[i].metadata,\\n                isGated: posts[i].isGated,\\n                collectibleContract: posts[i].collectibleContract,\\n                collectibleId: posts[i].collectibleId,\\n                creator: msg.sender,\\n                nextPostId: nextPostId++,\\n                postType: posts[i].postType\\n            });\\n\\n            FeedHelpers.PostData memory post = PostCreationHelpers.validateAndCreatePost(\\n                params,\\n                collectibleController\\n            );\\n\\n            feedManager.addPost(post);\\n            postIds[i] = post.id;\\n            emit PostCreated(post.id, tribeId, msg.sender, posts[i].metadata);\\n        }\\n\\n        lastBatchTime[msg.sender] = block.timestamp;\\n        emit BatchPostsCreated(tribeId, msg.sender, postIds);\\n        return postIds;\\n    }\\n\\n    // Rate limit management functions\\n    function setPostTypeCooldown(PostType postType, uint256 cooldown) external override onlyRole(RATE_LIMIT_MANAGER_ROLE) {\\n        postTypeCooldowns[postType] = cooldown;\\n        emit PostTypeCooldownUpdated(postType, cooldown);\\n    }\\n\\n    function getPostTypeCooldown(PostType postType) external view override returns (uint256) {\\n        return postTypeCooldowns[postType];\\n    }\\n\\n    function getRemainingCooldown(address user, PostType postType) external view override returns (uint256) {\\n        uint256 lastPost = lastPostTimeByType[user][postType];\\n        uint256 cooldown = postTypeCooldowns[postType];\\n        uint256 nextAllowedTime = lastPost + cooldown;\\n        \\n        if (block.timestamp >= nextAllowedTime) return 0;\\n        return nextAllowedTime - block.timestamp;\\n    }\\n\\n    function getBatchPostingLimits() external pure override returns (uint256 maxBatchSize, uint256 batchCooldown) {\\n        return (MAX_BATCH_POSTS, BATCH_POST_COOLDOWN);\\n    }\\n\\n    function updatePost(uint256 postId, string memory metadata) external {\\n        _checkPostCreator(postId);\\n        if (feedManager.getPost(postId).isDeleted) revert PostErrors.PostDeleted();\\n        \\n        feedManager.getPost(postId).metadata = metadata;\\n        emit PostUpdated(postId, msg.sender, metadata);\\n    }\\n\\n    event PostUpdated(uint256 indexed postId, address indexed updater, string metadata);\\n\\n    function _validateProjectUpdatePermissions(string memory metadata) internal view returns (bool) {\\n        bytes memory metadataBytes = bytes(metadata);\\n        if (!PostHelpers.containsField(metadataBytes, \\\"\\\\\\\"type\\\\\\\":\\\\\\\"PROJECT_UPDATE\\\\\\\"\\\")) {\\n            return true;\\n        }\\n\\n        uint256 projectPostId = ProjectHelpers.parseProjectPostId(metadataBytes);\\n        if (projectPostId == type(uint256).max) {\\n            return false;\\n        }\\n\\n        // Get the original post\\n        FeedHelpers.PostData memory originalPost = feedManager.getPost(projectPostId);\\n        \\n        if (originalPost.isDeleted) {\\n            return false;\\n        }\\n\\n        if (originalPost.creator == msg.sender) {\\n            return true;\\n        }\\n\\n        // Check if user has update permission in the project team\\n        bytes memory originalMetadata = bytes(originalPost.metadata);\\n        if (!PostHelpers.containsField(originalMetadata, \\\"\\\\\\\"team\\\\\\\"\\\")) {\\n            return false;\\n        }\\n\\n        return ProjectHelpers.checkUserUpdatePermission(originalMetadata, msg.sender);\\n    }\\n\\n    // Feed querying functions\\n    function getPostsByTribe(\\n        uint256 tribeId,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return feedManager.getPostsByTribe(tribeId, offset, limit);\\n    }\\n\\n    function getPostsByUser(\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return feedManager.getPostsByUser(user, offset, limit);\\n    }\\n\\n    function getPostsByTribeAndUser(\\n        uint256 tribeId,\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return feedManager.getPostsByTribeAndUser(tribeId, user, offset, limit);\\n    }\\n\\n    function getFeedForUser(\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view override returns (uint256[] memory postIds, uint256 total) {\\n        return feedManager.getFeedForUser(user, offset, limit);\\n    }\\n\\n    // Ultra simple function that just returns a constant\\n    function testCreate() external pure returns (uint256) {\\n        return 42;\\n    }\\n} \",\"contract\":\"PostMinter\",\"function\":\"createPost\",\"line\":126,\"range\":[4964,7873]},\"isInvalidOpcodeError\":false}],\"data\":\"0x\",\"transactionHash\":\"0x39ade513054f79b434c5c6122d21a65e6b2911a0381de9ee0a23046774c9d6e0\"}",
        "[log] \u001b[31mKNOWN ISSUE: Grandfathered users can't create posts after tribe gating changes\u001b[39m",
        "[log] \u001b[33mThis has been partially fixed with our TribeController modifications\u001b[39m",
        "[log] \u001b[33mBut PostMinter may need additional changes to properly handle grandfathered users\u001b[39m",
        "[log] \u001b[32m✓ Dynamic gating change test completed.\u001b[39m",
        "Duration: 18ms",
        "[log] Ending test: Forbidden test: Should handle changing tribe gating after member joins (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.215Z"
    },
    {
      "id": 111,
      "suiteName": "\u001b[35m2. Member Onboarding & Engagement\u001b[39m",
      "testName": "Should demonstrate complete member onboarding and engagement flow",
      "description": "Should demonstrate complete member onboarding and engagement flow",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: \u001b[35m2. Member Onboarding & Engagement\u001b[39m - Should demonstrate complete member onboarding and engagement flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Member Onboarding & Engagement Flow ===\u001b[39m",
        "[log] \u001b[33mUser1 claiming access NFT...\u001b[39m",
        "[log] \u001b[33mUser1 joining tribe...\u001b[39m",
        "[log] \u001b[33mCreating welcome post...\u001b[39m",
        "[log] \u001b[33mUser1 creating introduction...\u001b[39m",
        "[log] \u001b[33mAwarding engagement points...\u001b[39m",
        "[log] \u001b[33mCreating community poll...\u001b[39m",
        "[log] \u001b[32m✓ Member onboarding and engagement flow complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 22ms",
        "[log] Ending test: Should demonstrate complete member onboarding and engagement flow (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.272Z"
    },
    {
      "id": 80,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should allow updating tribe configuration",
      "description": "Should allow updating tribe configuration",
      "status": "passed",
      "duration": 29,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should allow updating tribe configuration",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Configuration Update ===\u001b[39m",
        "[log] \u001b[33mCreating initial public tribe...\u001b[39m",
        "[log] \u001b[33mUpdating tribe to be private with entry fee...\u001b[39m",
        "[log] \u001b[33mUpdating tribe metadata...\u001b[39m",
        "[log] \u001b[32m✓ Tribe configuration successfully updated\u001b[39m",
        "Duration: 2ms",
        "[log] Ending test: Should allow updating tribe configuration (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.182Z"
    },
    {
      "id": 79,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should create different types of tribes",
      "description": "Should create different types of tribes",
      "status": "passed",
      "duration": 32,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should create different types of tribes",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Creation with Different Join Types ===\u001b[39m",
        "[log] \u001b[33mCreating public tribe...\u001b[39m",
        "[log] \u001b[33mCreating private tribe...\u001b[39m",
        "[log] \u001b[33mCreating invite-only tribe...\u001b[39m",
        "[log] \u001b[32m✓ Successfully created tribes with different join types\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should create different types of tribes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.153Z"
    },
    {
      "id": 81,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should handle different tribe joining flows",
      "description": "Should handle different tribe joining flows",
      "status": "passed",
      "duration": 34,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should handle different tribe joining flows",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Joining Flows ===\u001b[39m",
        "[log] \u001b[33mSetting up public tribe...\u001b[39m",
        "[log] \u001b[33mSetting up private tribe...\u001b[39m",
        "[log] \u001b[33mSetting up invite code tribe...\u001b[39m",
        "[log] \u001b[33mCreating invite code...\u001b[39m",
        "[log] \u001b[33mUser1 joining public tribe...\u001b[39m",
        "[log] \u001b[33mUser1 requesting to join private tribe...\u001b[39m",
        "[log] \u001b[33mCreator approving user1 for private tribe...\u001b[39m",
        "[log] \u001b[33mUser1 joining invite code tribe with code...\u001b[39m",
        "[log] \u001b[32m✓ Successfully tested different joining flows\u001b[39m",
        "Duration: 6ms",
        "[log] Ending test: Should handle different tribe joining flows (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.216Z"
    },
    {
      "id": 82,
      "suiteName": "\u001b[35m2. Tribe Management\u001b[39m",
      "testName": "Should properly enforce access control in tribe management",
      "description": "Should properly enforce access control in tribe management",
      "status": "passed",
      "duration": 33,
      "output": [
        "[log] Starting test: \u001b[35m2. Tribe Management\u001b[39m - Should properly enforce access control in tribe management",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Tribe Management Access Control ===\u001b[39m",
        "[log] \u001b[33mCreating test tribe...\u001b[39m",
        "[log] \u001b[33mTesting member banning permissions...\u001b[39m",
        "[log] \u001b[33mTesting tribe configuration update permissions...\u001b[39m",
        "[log] \u001b[32m✓ Tribe management access control properly enforced\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should properly enforce access control in tribe management (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.249Z"
    },
    {
      "id": 83,
      "suiteName": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "testName": "Should demonstrate complete user onboarding flow",
      "description": "Should demonstrate complete user onboarding flow",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: \u001b[35m3. Combined User Journeys\u001b[39m - Should demonstrate complete user onboarding flow",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Complete User Onboarding Journey ===\u001b[39m",
        "[log] \u001b[33mUser2 creating profile...\u001b[39m",
        "[log] \u001b[32m✓ Profile created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser2 creating a tribe...\u001b[39m",
        "[log] \u001b[32m✓ Tribe created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser2 creating welcome post...\u001b[39m",
        "[log] \u001b[32m✓ Welcome post created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser1 joining Alice's tribe...\u001b[39m",
        "[log] \u001b[32m✓ User1 successfully joined the tribe\u001b[39m",
        "[log] \u001b[33mUser2 creating tribe collectible...\u001b[39m",
        "[log] \u001b[32m✓ Collectible created with ID: 0\u001b[39m",
        "[log] \u001b[33mUser1 interacting with welcome post...\u001b[39m",
        "[log] \u001b[32m✓ Post interaction recorded\u001b[39m",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m✓ Complete user onboarding journey successfully demonstrated\u001b[39m",
        "Duration: 14ms",
        "[log] Ending test: Should demonstrate complete user onboarding flow (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.292Z"
    },
    {
      "id": 84,
      "suiteName": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "testName": "Should handle error cases across the user journey",
      "description": "Should handle error cases across the user journey",
      "status": "passed",
      "duration": 45,
      "output": [
        "[log] Starting test: \u001b[35m3. Combined User Journeys\u001b[39m - Should handle error cases across the user journey",
        "[log] \u001b[32m✓ RoleManager deployed\u001b[39m",
        "[log] \u001b[32m✓ ProfileNFTMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ TribeController deployed\u001b[39m",
        "[log] \u001b[32m✓ PointSystem deployed\u001b[39m",
        "[log] \u001b[32m✓ CollectibleController deployed\u001b[39m",
        "[log] \u001b[32m✓ PostFeedManager deployed\u001b[39m",
        "[log] \u001b[32m✓ PostMinter deployed\u001b[39m",
        "[log] \u001b[32m✓ Permissions configured\u001b[39m",
        "[log] \u001b[32m✓ Roles assigned\u001b[39m",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Error Handling Throughout User Journey ===\u001b[39m",
        "[log] \u001b[33mSetting up test environment...\u001b[39m",
        "[log] \u001b[33mCreating test profile...\u001b[39m",
        "[log] \u001b[33mCreating test tribe...\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting profile error scenarios...\u001b[39m",
        "[log] \u001b[32m✓ Unauthorized profile update properly rejected\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting tribe membership error scenarios...\u001b[39m",
        "[log] \u001b[32m✓ Missing entry fee properly rejected\u001b[39m",
        "[log] \u001b[32m✓ Banned user properly rejected\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting post creation error scenarios...\u001b[39m",
        "[log] \u001b[32m✓ Non-member post creation properly rejected\u001b[39m",
        "[log] \u001b[32m✓ Post cooldown properly enforced\u001b[39m",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m✓ Error handling throughout user journey successfully demonstrated\u001b[39m",
        "Duration: 15ms",
        "[log] Ending test: Should handle error cases across the user journey (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.337Z"
    },
    {
      "id": 115,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate advanced content gating scenarios",
      "description": "Should demonstrate advanced content gating scenarios",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate advanced content gating scenarios",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Advanced Content Gating Flow ===\u001b[39m",
        "[log] \u001b[33mCreating gating collectible...\u001b[39m",
        "[log] \u001b[33mCreator claiming gating collectible...\u001b[39m",
        "[log] \u001b[33mCreating gated post...\u001b[39m",
        "[log] \u001b[33mTesting access control...\u001b[39m",
        "[log] \u001b[33mUser claiming collectible and joining tribe...\u001b[39m",
        "[log] \u001b[32m✓ Advanced gating scenarios complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 13ms",
        "[log] Ending test: Should demonstrate advanced content gating scenarios (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.353Z"
    },
    {
      "id": 118,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate advanced post types and metadata",
      "description": "Should demonstrate advanced post types and metadata",
      "status": "passed",
      "duration": 34,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate advanced post types and metadata",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Advanced Post Types ===\u001b[39m",
        "[log] \u001b[33mCreating rich media post...\u001b[39m",
        "[log] \u001b[33mCreating event post...\u001b[39m",
        "[log] \u001b[33mCreating milestone post...\u001b[39m",
        "[log] \u001b[32m✓ Advanced post types complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 34ms",
        "[log] Ending test: Should demonstrate advanced post types and metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.399Z"
    },
    {
      "id": 114,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate comprehensive error handling and edge cases",
      "description": "Should demonstrate comprehensive error handling and edge cases",
      "status": "passed",
      "duration": 25,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate comprehensive error handling and edge cases",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Comprehensive Error Handling Flow ===\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting metadata validation...\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting permission and access control...\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mTesting rate limiting...\u001b[39m",
        "[log] \u001b[32m✓ Error handling tests complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 25ms",
        "[log] Ending test: Should demonstrate comprehensive error handling and edge cases (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.339Z"
    },
    {
      "id": 116,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate content discovery and feed management",
      "description": "Should demonstrate content discovery and feed management",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate content discovery and feed management",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Content Discovery Flow ===\u001b[39m",
        "[log] \u001b[33mGetting tribe feed...\u001b[39m",
        "[log] \u001b[33mGetting user feed...\u001b[39m",
        "[log] \u001b[33mGetting filtered feed...\u001b[39m",
        "[log] \u001b[32m✓ Content discovery flow complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 6ms",
        "[log] Ending test: Should demonstrate content discovery and feed management (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.360Z"
    },
    {
      "id": 112,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate different post types and content creation",
      "description": "Should demonstrate different post types and content creation",
      "status": "passed",
      "duration": 35,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate different post types and content creation",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Content Creation Flow ===\u001b[39m",
        "[log] \u001b[33mCreating rich media post...\u001b[39m",
        "[log] \u001b[33mCreating gated announcement...\u001b[39m",
        "[log] \u001b[33mCreating interactive poll...\u001b[39m",
        "[log] \u001b[32m✓ Content creation complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 35ms",
        "[log] Ending test: Should demonstrate different post types and content creation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.308Z"
    },
    {
      "id": 117,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate post interaction scenarios",
      "description": "Should demonstrate post interaction scenarios",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate post interaction scenarios",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Post Interaction Scenarios ===\u001b[39m",
        "[log] \u001b[32m✓ Post interaction scenarios complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 5ms",
        "[log] Ending test: Should demonstrate post interaction scenarios (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.365Z"
    },
    {
      "id": 113,
      "suiteName": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "testName": "Should demonstrate post interactions and updates",
      "description": "Should demonstrate post interactions and updates",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: \u001b[35m3. Content Creation & Interactions\u001b[39m - Should demonstrate post interactions and updates",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Post Interactions Flow ===\u001b[39m",
        "[log] \u001b[33mUser1 interacting with post...\u001b[39m",
        "[log] \u001b[32m✓ Post interactions complete\u001b[39m\n\u001b[32m\u001b[39m",
        "Duration: 6ms",
        "[log] Ending test: Should demonstrate post interactions and updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.314Z"
    },
    {
      "id": 120,
      "suiteName": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "testName": "Should demonstrate complete fundraiser flow",
      "description": "Should demonstrate complete fundraiser flow",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: \u001b[35m4. Project & Fundraising Management\u001b[39m - Should demonstrate complete fundraiser flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Fundraiser Creation Flow ===\u001b[39m",
        "[log] \u001b[33mCreating a fundraiser post...\u001b[39m",
        "[log] \u001b[32m✓ Fundraiser created with post ID: 15\u001b[39m",
        "[log] \u001b[33mSimulating fundraiser contribution...\u001b[39m",
        "[log] \u001b[32m✓ Fundraiser contribution recorded\u001b[39m",
        "Duration: 30ms",
        "[log] Ending test: Should demonstrate complete fundraiser flow (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.526Z"
    },
    {
      "id": 119,
      "suiteName": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "testName": "Should demonstrate complete project creation flow",
      "description": "Should demonstrate complete project creation flow",
      "status": "passed",
      "duration": 96,
      "output": [
        "[log] Starting test: \u001b[35m4. Project & Fundraising Management\u001b[39m - Should demonstrate complete project creation flow",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Project Creation Flow ===\u001b[39m",
        "[log] \u001b[33mWaiting for cooldown...\u001b[39m",
        "[log] \u001b[33mCreating a project post...\u001b[39m",
        "[log] \u001b[32m✓ Project created with post ID: 13\u001b[39m",
        "[log] \u001b[33mWaiting for cooldown before creating update...\u001b[39m",
        "[log] \u001b[33mCreating a project update post...\u001b[39m",
        "[log] \u001b[32m✓ Project update created successfully\u001b[39m",
        "[log] \u001b[33mWaiting for cooldown before testing unauthorized update...\u001b[39m",
        "[log] \u001b[33mTesting unauthorized update attempt...\u001b[39m",
        "[log] \u001b[32m✓ Unauthorized update properly rejected with error\u001b[39m",
        "[log] \u001b[32m✓ Project creation flow test complete\u001b[39m",
        "Duration: 96ms",
        "[log] Ending test: Should demonstrate complete project creation flow (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.495Z"
    },
    {
      "id": 121,
      "suiteName": "\u001b[35m5. Advanced Collectible Management\u001b[39m",
      "testName": "Should demonstrate collectible creation with points-based gating",
      "description": "Should demonstrate collectible creation with points-based gating",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: \u001b[35m5. Advanced Collectible Management\u001b[39m - Should demonstrate collectible creation with points-based gating",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Points-gated Collectible Flow ===\u001b[39m",
        "[log] \u001b[33mSetting up points for testing...\u001b[39m",
        "[log] \u001b[32mUser1 has 600 points\u001b[39m",
        "[log] \u001b[33mCreating points-gated collectible...\u001b[39m",
        "[log] \u001b[32m✓ Points-gated collectible created with ID: 2\u001b[39m",
        "[log] \u001b[33mUser1 claiming collectible with points...\u001b[39m",
        "[log] \u001b[32m✓ User1 successfully claimed points-gated collectible\u001b[39m",
        "[log] \u001b[33mTesting points requirement validation...\u001b[39m",
        "[log] \u001b[32m✓ Points requirement properly enforced\u001b[39m",
        "Duration: 4ms",
        "[log] Ending test: Should demonstrate collectible creation with points-based gating (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.530Z"
    },
    {
      "id": 122,
      "suiteName": "\u001b[35m5. Advanced Collectible Management\u001b[39m",
      "testName": "Should demonstrate collectible deactivation and supply limits",
      "description": "Should demonstrate collectible deactivation and supply limits",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: \u001b[35m5. Advanced Collectible Management\u001b[39m - Should demonstrate collectible deactivation and supply limits",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Collectible Management Flow ===\u001b[39m",
        "[log] \u001b[33mCreating limited supply collectible...\u001b[39m",
        "[log] \u001b[32m✓ Limited collectible created with ID: 3\u001b[39m",
        "[log] \u001b[33mUsers claiming limited collectible...\u001b[39m",
        "[log] \u001b[32m✓ Supply limit properly enforced\u001b[39m",
        "[log] \u001b[33mTesting collectible deactivation...\u001b[39m",
        "[log] \u001b[32m✓ Collectible deactivation properly handled\u001b[39m",
        "Duration: 5ms",
        "[log] Ending test: Should demonstrate collectible deactivation and supply limits (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.535Z"
    },
    {
      "id": 123,
      "suiteName": "\u001b[35m6. User Role Management & Permissions\u001b[39m",
      "testName": "Should demonstrate comprehensive role management",
      "description": "Should demonstrate comprehensive role management",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: \u001b[35m6. User Role Management & Permissions\u001b[39m - Should demonstrate comprehensive role management",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== Role Management Flow ===\u001b[39m",
        "[log] \u001b[33mSetting up public tribe for role testing...\u001b[39m",
        "[log] \u001b[33mTesting role assignment...\u001b[39m",
        "[log] \u001b[32m✓ Role assignment successful\u001b[39m",
        "[log] \u001b[33mTesting role-based permissions...\u001b[39m",
        "[log] \u001b[32m✓ Role-based permissions properly enforced\u001b[39m",
        "[log] \u001b[33mTesting role revocation...\u001b[39m",
        "[log] \u001b[32m✓ Role revocation properly handled\u001b[39m",
        "Duration: 7ms",
        "[log] Ending test: Should demonstrate comprehensive role management (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.543Z"
    },
    {
      "id": 124,
      "suiteName": "\u001b[35m7. Frontend Integration Guide\u001b[39m",
      "testName": "Should provide comprehensive integration guidelines",
      "description": "Should provide comprehensive integration guidelines",
      "status": "passed",
      "duration": 0,
      "output": [
        "[log] Starting test: \u001b[35m7. Frontend Integration Guide\u001b[39m - Should provide comprehensive integration guidelines",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== FRONTEND INTEGRATION GUIDE ===\u001b[39m",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mThis test suite demonstrates complete user journeys that frontend developers should implement:\u001b[39m",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m1. User Authentication & Onboarding\u001b[39m",
        "[log]    • Connect wallet and verify identity",
        "[log]    • Create/update user profile",
        "[log]    • Join tribes based on interests",
        "[log]    • View and manage memberships",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m2. Community Management\u001b[39m",
        "[log]    • Create and configure tribes",
        "[log]    • Set access requirements (open, invite, NFT-gated)",
        "[log]    • Manage members (approve, ban, assign roles)",
        "[log]    • Create collectibles and define requirements",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m3. Content Creation & Interaction\u001b[39m",
        "[log]    • Create various post types (text, rich media, polls)",
        "[log]    • Implement content gating mechanisms",
        "[log]    • Handle interactions (likes, comments, shares)",
        "[log]    • Implement polls and voting mechanisms",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m4. Project & Fundraising\u001b[39m",
        "[log]    • Create detailed project proposals with milestones",
        "[log]    • Implement team management with permissions",
        "[log]    • Track project updates and milestone completion",
        "[log]    • Create fundraisers with specific tiers/slabs",
        "[log]    • Track contributions and update progress",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m5. Collectibles & Points Management\u001b[39m",
        "[log]    • Create collectibles with different requirements",
        "[log]    • Implement claiming mechanisms",
        "[log]    • Track points earned through engagement",
        "[log]    • Implement points redemption flows",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m6. Error Handling\u001b[39m",
        "[log]    • Validate user inputs before submission",
        "[log]    • Display appropriate error messages",
        "[log]    • Handle rate limiting and cooldowns",
        "[log]    • Validate permissions before actions",
        "[log] \u001b[32m\u001b[39m\n\u001b[32m7. Data Models\u001b[39m",
        "[log]    • Follow the exact data structures shown in tests",
        "[log]    • Ensure all required fields are included",
        "[log]    • Validate metadata before submission",
        "[log]    • Handle BigInt values properly (for amounts)",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mAPI Integration Patterns:\u001b[39m",
        "[log] 1. Always check permissions before attempting actions",
        "[log] 2. Implement proper cooldown handling between post creations",
        "[log] 3. Handle collectible requirements and gating correctly",
        "[log] 4. Ensure team permissions are properly set for projects and fundraisers",
        "[log] 5. Always format timestamps as UNIX timestamps (seconds since epoch)",
        "[log] 6. Handle ETH values as strings to avoid precision loss",
        "[log] \u001b[33m\u001b[39m\n\u001b[33mContract Interaction Flow:\u001b[39m",
        "[log] 1. Get user's wallet address and verify connection",
        "[log] 2. Check user's tribe memberships and permissions",
        "[log] 3. Load relevant tribe, collectible, or post data",
        "[log] 4. Validate user inputs against contract requirements",
        "[log] 5. Submit transactions with proper error handling",
        "[log] 6. Update UI based on transaction results",
        "[log] 7. Implement polling or event listeners for updates",
        "[log] \u001b[31m\u001b[39m\n\u001b[31mCommon Pitfalls to Avoid:\u001b[39m",
        "[log] 1. Not handling cooldowns between post creations",
        "[log] 2. Missing required metadata fields",
        "[log] 3. Not checking permissions before actions",
        "[log] 4. Improper handling of ETH values (use ethers.utils.parseEther)",
        "[log] 5. Not validating collectible requirements",
        "[log] 6. Forgetting to include team structure in projects",
        "[log] 7. Not handling rate limiting properly",
        "[log] \u001b[36m\u001b[39m\n\u001b[36m=== END INTEGRATION GUIDE ===\u001b[39m",
        "Duration: 0ms",
        "[log] Ending test: Should provide comprehensive integration guidelines (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.543Z"
    },
    {
      "id": 129,
      "suiteName": "Activity Scores",
      "testName": "Should calculate member activity scores correctly",
      "description": "Should calculate member activity scores correctly",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Activity Scores - Should calculate member activity scores correctly",
        "Duration: 2ms",
        "[log] Ending test: Should calculate member activity scores correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.716Z"
    },
    {
      "id": 130,
      "suiteName": "Activity Scores",
      "testName": "Should handle invalid queries gracefully",
      "description": "Should handle invalid queries gracefully",
      "status": "passed",
      "duration": 28,
      "output": [
        "[log] Starting test: Activity Scores - Should handle invalid queries gracefully",
        "Duration: 2ms",
        "[log] Ending test: Should handle invalid queries gracefully (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.744Z"
    },
    {
      "id": 137,
      "suiteName": "Admin Functions",
      "testName": "Should allow admin to update verifier",
      "description": "Should allow admin to update verifier",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Admin Functions - Should allow admin to update verifier",
        "Duration: 2ms",
        "[log] Ending test: Should allow admin to update verifier (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.827Z"
    },
    {
      "id": 138,
      "suiteName": "Admin Functions",
      "testName": "Should prevent non-admin from updating verifier",
      "description": "Should prevent non-admin from updating verifier",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Admin Functions - Should prevent non-admin from updating verifier",
        "Duration: 0ms",
        "[log] Ending test: Should prevent non-admin from updating verifier (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.832Z"
    },
    {
      "id": 51,
      "suiteName": "Basic Post Creation",
      "testName": "Should create a basic public post",
      "description": "Should create a basic public post",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Basic Post Creation - Should create a basic public post",
        "Duration: 5ms",
        "[log] Ending test: Should create a basic public post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.774Z"
    },
    {
      "id": 52,
      "suiteName": "Basic Post Creation",
      "testName": "Should create a post with attachments",
      "description": "Should create a post with attachments",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Basic Post Creation - Should create a post with attachments",
        "Duration: 5ms",
        "[log] Ending test: Should create a post with attachments (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.779Z"
    },
    {
      "id": 182,
      "suiteName": "Basic Post Creation and Access",
      "testName": "Should allow tribe member to create a public post",
      "description": "Should allow tribe member to create a public post",
      "status": "passed",
      "duration": 36,
      "output": [
        "[log] Starting test: Basic Post Creation and Access - Should allow tribe member to create a public post",
        "[log] \nScenario: Creating a public post as a tribe member",
        "[log] Step 1: Creating public post",
        "[log] Post created with ID: 0",
        "[log] \nStep 2: Verifying post data",
        "[log] Post data verified successfully",
        "[log] \nStep 3: Checking post access",
        "[log] Access control verified successfully",
        "Duration: 5ms",
        "[log] Ending test: Should allow tribe member to create a public post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.694Z"
    },
    {
      "id": 183,
      "suiteName": "Basic Post Creation and Access",
      "testName": "Should create and manage collectible-gated post",
      "description": "Should create and manage collectible-gated post",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: Basic Post Creation and Access - Should create and manage collectible-gated post",
        "[log] \nScenario: Creating and managing a collectible-gated post",
        "[log] Step 1: User2 claiming collectible",
        "[log] Collectible claimed successfully",
        "[log] \nStep 2: Creating collectible-gated post",
        "[log] Gated post created with ID: 0",
        "[log] \nStep 3: Verifying access control",
        "[log] User2 (with collectible) can view post",
        "[log] User3 (without collectible) cannot view post",
        "Duration: 5ms",
        "[log] Ending test: Should create and manage collectible-gated post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.725Z"
    },
    {
      "id": 184,
      "suiteName": "Basic Post Creation and Access",
      "testName": "Should handle encrypted posts with proper key management",
      "description": "Should handle encrypted posts with proper key management",
      "status": "passed",
      "duration": 30,
      "output": [
        "[log] Starting test: Basic Post Creation and Access - Should handle encrypted posts with proper key management",
        "[log] \nScenario: Creating and managing an encrypted post",
        "[log] Step 1: Setting up tribe encryption",
        "[log] Tribe encryption key set",
        "[log] \nStep 2: Creating encrypted post",
        "[log] Encrypted post created with ID: 0",
        "[log] \nStep 3: Verifying post encryption",
        "[log] Post encryption verified",
        "[log] \nStep 4: Checking decryption key access",
        "[log] Decryption key access verified",
        "[log] \nStep 5: Verifying key derivation",
        "[log] Key derivation verified",
        "Duration: 3ms",
        "[log] Ending test: Should handle encrypted posts with proper key management (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.755Z"
    },
    {
      "id": 132,
      "suiteName": "Collectible Claiming",
      "testName": "Should allow claiming a collectible with correct payment",
      "description": "Should allow claiming a collectible with correct payment",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Collectible Claiming - Should allow claiming a collectible with correct payment",
        "Duration: 2ms",
        "[log] Ending test: Should allow claiming a collectible with correct payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.780Z"
    },
    {
      "id": 133,
      "suiteName": "Collectible Claiming",
      "testName": "Should prevent claiming with insufficient payment",
      "description": "Should prevent claiming with insufficient payment",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Collectible Claiming - Should prevent claiming with insufficient payment",
        "Duration: 1ms",
        "[log] Ending test: Should prevent claiming with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.798Z"
    },
    {
      "id": 131,
      "suiteName": "Collectible Creation",
      "testName": "Should create a collectible successfully",
      "description": "Should create a collectible successfully",
      "status": "passed",
      "duration": 17,
      "output": [
        "[log] Starting test: Collectible Creation - Should create a collectible successfully",
        "Duration: 2ms",
        "[log] Ending test: Should create a collectible successfully (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.762Z"
    },
    {
      "id": 14,
      "suiteName": "Collectible Management Journey",
      "testName": "Should create a free collectible",
      "description": "Should create a free collectible",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Collectible Management Journey - Should create a free collectible",
        "Duration: 1ms",
        "[log] Ending test: Should create a free collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.121Z"
    },
    {
      "id": 64,
      "suiteName": "Community Update Posts",
      "testName": "Should create a community update post",
      "description": "Should create a community update post",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Community Update Posts - Should create a community update post",
        "Duration: 10ms",
        "[log] Ending test: Should create a community update post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.860Z"
    },
    {
      "id": 41,
      "suiteName": "Content Creator Journey",
      "testName": "Should create different types of posts",
      "description": "Should create different types of posts",
      "status": "passed",
      "duration": 15,
      "output": [
        "[log] Starting test: Content Creator Journey - Should create different types of posts",
        "Duration: 15ms",
        "[log] Ending test: Should create different types of posts (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.589Z"
    },
    {
      "id": 44,
      "suiteName": "Content Creator Journey",
      "testName": "Should handle post deletion",
      "description": "Should handle post deletion",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Content Creator Journey - Should handle post deletion",
        "Duration: 5ms",
        "[log] Ending test: Should handle post deletion (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.604Z"
    },
    {
      "id": 42,
      "suiteName": "Content Creator Journey",
      "testName": "Should handle post interactions",
      "description": "Should handle post interactions",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Content Creator Journey - Should handle post interactions",
        "Duration: 5ms",
        "[log] Ending test: Should handle post interactions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.594Z"
    },
    {
      "id": 43,
      "suiteName": "Content Creator Journey",
      "testName": "Should handle post reporting",
      "description": "Should handle post reporting",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Content Creator Journey - Should handle post reporting",
        "Duration: 4ms",
        "[log] Ending test: Should handle post reporting (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.598Z"
    },
    {
      "id": 39,
      "suiteName": "Contribution Scenarios",
      "testName": "Should prevent banned members from interacting",
      "description": "Should prevent banned members from interacting",
      "status": "passed",
      "duration": 15,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should prevent banned members from interacting",
        "Duration: 2ms",
        "[log] Ending test: Should prevent banned members from interacting (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.515Z"
    },
    {
      "id": 40,
      "suiteName": "Contribution Scenarios",
      "testName": "Should prevent interactions with deleted fundraiser",
      "description": "Should prevent interactions with deleted fundraiser",
      "status": "passed",
      "duration": 17,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should prevent interactions with deleted fundraiser",
        "Duration: 8ms",
        "[log] Ending test: Should prevent interactions with deleted fundraiser (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.532Z"
    },
    {
      "id": 37,
      "suiteName": "Contribution Scenarios",
      "testName": "Should simulate contribution through interaction",
      "description": "Should simulate contribution through interaction",
      "status": "passed",
      "duration": 48,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should simulate contribution through interaction",
        "Duration: 2ms",
        "[log] Ending test: Should simulate contribution through interaction (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.485Z"
    },
    {
      "id": 38,
      "suiteName": "Contribution Scenarios",
      "testName": "Should track multiple interactions",
      "description": "Should track multiple interactions",
      "status": "passed",
      "duration": 15,
      "output": [
        "[log] Starting test: Contribution Scenarios - Should track multiple interactions",
        "Duration: 3ms",
        "[log] Ending test: Should track multiple interactions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.500Z"
    },
    {
      "id": 55,
      "suiteName": "Encrypted Posts",
      "testName": "Should create an encrypted post",
      "description": "Should create an encrypted post",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Encrypted Posts - Should create an encrypted post",
        "Duration: 1ms",
        "[log] Ending test: Should create an encrypted post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.793Z"
    },
    {
      "id": 56,
      "suiteName": "Encrypted Posts",
      "testName": "Should manage viewer access for encrypted posts",
      "description": "Should manage viewer access for encrypted posts",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: Encrypted Posts - Should manage viewer access for encrypted posts",
        "Duration: 5ms",
        "[log] Ending test: Should manage viewer access for encrypted posts (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.799Z"
    },
    {
      "id": 48,
      "suiteName": "Error Cases",
      "testName": "Should handle invalid metadata",
      "description": "Should handle invalid metadata",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Error Cases - Should handle invalid metadata",
        "Duration: 2ms",
        "[log] Ending test: Should handle invalid metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.718Z"
    },
    {
      "id": 49,
      "suiteName": "Error Cases",
      "testName": "Should handle permission errors",
      "description": "Should handle permission errors",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Error Cases - Should handle permission errors",
        "Duration: 1ms",
        "[log] Ending test: Should handle permission errors (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.719Z"
    },
    {
      "id": 50,
      "suiteName": "Error Cases",
      "testName": "Should handle rate limiting",
      "description": "Should handle rate limiting",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: Error Cases - Should handle rate limiting",
        "Duration: 14ms",
        "[log] Ending test: Should handle rate limiting (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.733Z"
    },
    {
      "id": 139,
      "suiteName": "Event Creation",
      "testName": "Should allow organizer to create event",
      "description": "Should allow organizer to create event",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Event Creation - Should allow organizer to create event",
        "Duration: 3ms",
        "[log] Ending test: Should allow organizer to create event (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.842Z"
    },
    {
      "id": 140,
      "suiteName": "Event Creation",
      "testName": "Should prevent non-organizer from creating event",
      "description": "Should prevent non-organizer from creating event",
      "status": "passed",
      "duration": 7,
      "output": [
        "[log] Starting test: Event Creation - Should prevent non-organizer from creating event",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from creating event (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.849Z"
    },
    {
      "id": 20,
      "suiteName": "Event Creation Scenarios",
      "testName": "Should create a physical event with basic details",
      "description": "Should create a physical event with basic details",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Creation Scenarios - Should create a physical event with basic details",
        "Duration: 2ms",
        "[log] Ending test: Should create a physical event with basic details (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.274Z"
    },
    {
      "id": 21,
      "suiteName": "Event Creation Scenarios",
      "testName": "Should prevent non-organizer from creating event",
      "description": "Should prevent non-organizer from creating event",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Event Creation Scenarios - Should prevent non-organizer from creating event",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from creating event (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.275Z"
    },
    {
      "id": 22,
      "suiteName": "Event Creation Scenarios",
      "testName": "Should test contract-level validations for event creation",
      "description": "Should test contract-level validations for event creation",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Event Creation Scenarios - Should test contract-level validations for event creation",
        "Duration: 3ms",
        "[log] Ending test: Should test contract-level validations for event creation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.278Z"
    },
    {
      "id": 30,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to cancel event",
      "description": "Should allow organizer to cancel event",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to cancel event",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to cancel event (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.297Z"
    },
    {
      "id": 151,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to cancel event",
      "description": "Should allow organizer to cancel event",
      "status": "passed",
      "duration": 7,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to cancel event",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to cancel event (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.942Z"
    },
    {
      "id": 28,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to update metadata",
      "description": "Should allow organizer to update metadata",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to update metadata",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to update metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.294Z"
    },
    {
      "id": 149,
      "suiteName": "Event Management",
      "testName": "Should allow organizer to update metadata",
      "description": "Should allow organizer to update metadata",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Event Management - Should allow organizer to update metadata",
        "Duration: 1ms",
        "[log] Ending test: Should allow organizer to update metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.927Z"
    },
    {
      "id": 32,
      "suiteName": "Event Management",
      "testName": "Should prevent non-organizer from canceling event",
      "description": "Should prevent non-organizer from canceling event",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Management - Should prevent non-organizer from canceling event",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-organizer from canceling event (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.301Z"
    },
    {
      "id": 29,
      "suiteName": "Event Management",
      "testName": "Should prevent non-organizer from updating metadata",
      "description": "Should prevent non-organizer from updating metadata",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Event Management - Should prevent non-organizer from updating metadata",
        "Duration: 0ms",
        "[log] Ending test: Should prevent non-organizer from updating metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.295Z"
    },
    {
      "id": 150,
      "suiteName": "Event Management",
      "testName": "Should prevent non-organizer from updating metadata",
      "description": "Should prevent non-organizer from updating metadata",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Event Management - Should prevent non-organizer from updating metadata",
        "Duration: 0ms",
        "[log] Ending test: Should prevent non-organizer from updating metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.935Z"
    },
    {
      "id": 31,
      "suiteName": "Event Management",
      "testName": "Should prevent ticket purchase after cancellation",
      "description": "Should prevent ticket purchase after cancellation",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Event Management - Should prevent ticket purchase after cancellation",
        "Duration: 1ms",
        "[log] Ending test: Should prevent ticket purchase after cancellation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.299Z"
    },
    {
      "id": 152,
      "suiteName": "Event Management",
      "testName": "Should prevent ticket purchase after cancellation",
      "description": "Should prevent ticket purchase after cancellation",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Event Management - Should prevent ticket purchase after cancellation",
        "Duration: 1ms",
        "[log] Ending test: Should prevent ticket purchase after cancellation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.950Z"
    },
    {
      "id": 65,
      "suiteName": "Event Posts",
      "testName": "Should create an event post with location and time",
      "description": "Should create an event post with location and time",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Event Posts - Should create an event post with location and time",
        "Duration: 3ms",
        "[log] Ending test: Should create an event post with location and time (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.863Z"
    },
    {
      "id": 61,
      "suiteName": "Feed Management",
      "testName": "Should get posts by tribe",
      "description": "Should get posts by tribe",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Feed Management - Should get posts by tribe",
        "Duration: 1ms",
        "[log] Ending test: Should get posts by tribe (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.826Z"
    },
    {
      "id": 62,
      "suiteName": "Feed Management",
      "testName": "Should get posts by user",
      "description": "Should get posts by user",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Feed Management - Should get posts by user",
        "Duration: 1ms",
        "[log] Ending test: Should get posts by user (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.838Z"
    },
    {
      "id": 63,
      "suiteName": "Feed Management",
      "testName": "Should handle pagination correctly",
      "description": "Should handle pagination correctly",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Feed Management - Should handle pagination correctly",
        "Duration: 1ms",
        "[log] Ending test: Should handle pagination correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.850Z"
    },
    {
      "id": 46,
      "suiteName": "Feed Management",
      "testName": "Should retrieve paginated tribe feed",
      "description": "Should retrieve paginated tribe feed",
      "status": "passed",
      "duration": 54,
      "output": [
        "[log] Starting test: Feed Management - Should retrieve paginated tribe feed",
        "Duration: 1ms",
        "[log] Ending test: Should retrieve paginated tribe feed (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.666Z"
    },
    {
      "id": 47,
      "suiteName": "Feed Management",
      "testName": "Should retrieve user-specific feed",
      "description": "Should retrieve user-specific feed",
      "status": "passed",
      "duration": 49,
      "output": [
        "[log] Starting test: Feed Management - Should retrieve user-specific feed",
        "Duration: 4ms",
        "[log] Ending test: Should retrieve user-specific feed (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.715Z"
    },
    {
      "id": 189,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve paginated posts by tribe",
      "description": "Should retrieve paginated posts by tribe",
      "status": "passed",
      "duration": 61,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve paginated posts by tribe",
        "[log] \nSetting up feed test data",
        "[log] Created 10 test posts",
        "[log] \nScenario: Testing paginated tribe posts retrieval",
        "[log] Step 1: Retrieving first page (3 posts)",
        "[log] Retrieved 3 posts from first page",
        "[log] \nStep 2: Retrieving second page (3 posts)",
        "[log] Retrieved 3 posts from second page",
        "[log] Verified no duplicate posts between pages",
        "Duration: 2ms",
        "[log] Ending test: Should retrieve paginated posts by tribe (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.951Z"
    },
    {
      "id": 191,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve paginated posts by tribe and user",
      "description": "Should retrieve paginated posts by tribe and user",
      "status": "passed",
      "duration": 71,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve paginated posts by tribe and user",
        "[log] \nSetting up feed test data",
        "[log] Created 30 test posts",
        "[log] \nScenario: Testing paginated tribe-user posts retrieval",
        "[log] Step 1: Retrieving user1's posts in tribe",
        "[log] Retrieved 3 posts for user1 in tribe",
        "[log] Verified post ownership and tribe membership",
        "Duration: 3ms",
        "[log] Ending test: Should retrieve paginated posts by tribe and user (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.095Z"
    },
    {
      "id": 190,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve paginated posts by user",
      "description": "Should retrieve paginated posts by user",
      "status": "passed",
      "duration": 73,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve paginated posts by user",
        "[log] \nSetting up feed test data",
        "[log] Created 20 test posts",
        "[log] \nScenario: Testing paginated user posts retrieval",
        "[log] Step 1: Retrieving user1's posts",
        "[log] Retrieved 5 posts for user1",
        "[log] \nStep 2: Retrieving user2's posts with pagination",
        "[log] Retrieved 3 posts for user2 (first page)",
        "[log] Verified post ownership",
        "Duration: 4ms",
        "[log] Ending test: Should retrieve paginated posts by user (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.024Z"
    },
    {
      "id": 192,
      "suiteName": "Feed Querying",
      "testName": "Should retrieve user feed across tribes",
      "description": "Should retrieve user feed across tribes",
      "status": "passed",
      "duration": 98,
      "output": [
        "[log] Starting test: Feed Querying - Should retrieve user feed across tribes",
        "[log] \nSetting up feed test data",
        "[log] Created 40 test posts",
        "[log] \nScenario: Testing user feed retrieval",
        "[log] Step 1: Creating second tribe and posts",
        "[log] Created additional posts in second tribe",
        "[log] \nStep 2: Retrieving user feed",
        "[log] Retrieved 5 posts from user feed",
        "[log] Feed contains posts from both tribes (Tribe1: 2, Tribe2: 3)",
        "Duration: 16ms",
        "[log] Ending test: Should retrieve user feed across tribes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.193Z"
    },
    {
      "id": 33,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should create a standard fundraiser",
      "description": "Should create a standard fundraiser",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should create a standard fundraiser",
        "Duration: 22ms",
        "[log] Ending test: Should create a standard fundraiser (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.353Z"
    },
    {
      "id": 35,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should create fundraiser with flexible durations",
      "description": "Should create fundraiser with flexible durations",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should create fundraiser with flexible durations",
        "Duration: 23ms",
        "[log] Ending test: Should create fundraiser with flexible durations (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.402Z"
    },
    {
      "id": 34,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should create fundraiser with multiple currencies",
      "description": "Should create fundraiser with multiple currencies",
      "status": "passed",
      "duration": 26,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should create fundraiser with multiple currencies",
        "Duration: 26ms",
        "[log] Ending test: Should create fundraiser with multiple currencies (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.379Z"
    },
    {
      "id": 36,
      "suiteName": "Fundraiser Creation Scenarios",
      "testName": "Should handle different slab configurations",
      "description": "Should handle different slab configurations",
      "status": "passed",
      "duration": 35,
      "output": [
        "[log] Starting test: Fundraiser Creation Scenarios - Should handle different slab configurations",
        "Duration: 35ms",
        "[log] Ending test: Should handle different slab configurations (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.437Z"
    },
    {
      "id": 54,
      "suiteName": "Gated Post Creation",
      "testName": "Should allow viewing gated post with collectible",
      "description": "Should allow viewing gated post with collectible",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Gated Post Creation - Should allow viewing gated post with collectible",
        "Duration: 3ms",
        "[log] Ending test: Should allow viewing gated post with collectible (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.792Z"
    },
    {
      "id": 53,
      "suiteName": "Gated Post Creation",
      "testName": "Should create a collectible-gated post",
      "description": "Should create a collectible-gated post",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Gated Post Creation - Should create a collectible-gated post",
        "Duration: 7ms",
        "[log] Ending test: Should create a collectible-gated post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.788Z"
    },
    {
      "id": 18,
      "suiteName": "High-Demand Collectible Drop",
      "testName": "Should handle concurrent claiming from multiple users",
      "description": "Should handle concurrent claiming from multiple users",
      "status": "passed",
      "duration": 24,
      "output": [
        "[log] Starting test: High-Demand Collectible Drop - Should handle concurrent claiming from multiple users",
        "Duration: 4ms",
        "[log] Ending test: Should handle concurrent claiming from multiple users (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.230Z"
    },
    {
      "id": 19,
      "suiteName": "High-Demand Collectible Drop",
      "testName": "Should handle supply limits correctly",
      "description": "Should handle supply limits correctly",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: High-Demand Collectible Drop - Should handle supply limits correctly",
        "Duration: 4ms",
        "[log] Ending test: Should handle supply limits correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.252Z"
    },
    {
      "id": 231,
      "suiteName": "Invite Code Management",
      "testName": "Should enforce invite code usage limits",
      "description": "Should enforce invite code usage limits",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Invite Code Management - Should enforce invite code usage limits",
        "Duration: 2ms",
        "[log] Ending test: Should enforce invite code usage limits (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.891Z"
    },
    {
      "id": 230,
      "suiteName": "Invite Code Management",
      "testName": "Should handle invite code revocation",
      "description": "Should handle invite code revocation",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Invite Code Management - Should handle invite code revocation",
        "Duration: 1ms",
        "[log] Ending test: Should handle invite code revocation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.868Z"
    },
    {
      "id": 229,
      "suiteName": "Invite Code Management",
      "testName": "Should manage invite codes correctly",
      "description": "Should manage invite codes correctly",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: Invite Code Management - Should manage invite codes correctly",
        "Duration: 2ms",
        "[log] Ending test: Should manage invite codes correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.847Z"
    },
    {
      "id": 215,
      "suiteName": "Invite Code Tribe",
      "testName": "Should allow joining with valid invite code",
      "description": "Should allow joining with valid invite code",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should allow joining with valid invite code",
        "Duration: 1ms",
        "[log] Ending test: Should allow joining with valid invite code (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.550Z"
    },
    {
      "id": 219,
      "suiteName": "Invite Code Tribe",
      "testName": "Should enforce invite code usage limits",
      "description": "Should enforce invite code usage limits",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should enforce invite code usage limits",
        "Duration: 2ms",
        "[log] Ending test: Should enforce invite code usage limits (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.635Z"
    },
    {
      "id": 218,
      "suiteName": "Invite Code Tribe",
      "testName": "Should handle invite code expiry correctly",
      "description": "Should handle invite code expiry correctly",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should handle invite code expiry correctly",
        "Duration: 3ms",
        "[log] Ending test: Should handle invite code expiry correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.614Z"
    },
    {
      "id": 214,
      "suiteName": "Invite Code Tribe",
      "testName": "Should not allow direct joining without invite code",
      "description": "Should not allow direct joining without invite code",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should not allow direct joining without invite code",
        "Duration: 1ms",
        "[log] Ending test: Should not allow direct joining without invite code (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.530Z"
    },
    {
      "id": 216,
      "suiteName": "Invite Code Tribe",
      "testName": "Should not allow joining with invalid invite code",
      "description": "Should not allow joining with invalid invite code",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should not allow joining with invalid invite code",
        "Duration: 1ms",
        "[log] Ending test: Should not allow joining with invalid invite code (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.571Z"
    },
    {
      "id": 217,
      "suiteName": "Invite Code Tribe",
      "testName": "Should track invite code usage correctly",
      "description": "Should track invite code usage correctly",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Invite Code Tribe - Should track invite code usage correctly",
        "Duration: 2ms",
        "[log] Ending test: Should track invite code usage correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.592Z"
    },
    {
      "id": 235,
      "suiteName": "Journey 5.1: Create Proposal",
      "testName": "Should allow creating a proposal",
      "description": "Should allow creating a proposal",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.1: Create Proposal - Should allow creating a proposal",
        "Duration: 2ms",
        "[log] Ending test: Should allow creating a proposal (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.961Z"
    },
    {
      "id": 236,
      "suiteName": "Journey 5.1: Create Proposal",
      "testName": "Should increment proposalId after each creation",
      "description": "Should increment proposalId after each creation",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.1: Create Proposal - Should increment proposalId after each creation",
        "Duration: 1ms",
        "[log] Ending test: Should increment proposalId after each creation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.965Z"
    },
    {
      "id": 237,
      "suiteName": "Journey 5.2: Vote on Proposal",
      "testName": "Should allow voting on proposal",
      "description": "Should allow voting on proposal",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Journey 5.2: Vote on Proposal - Should allow voting on proposal",
        "Duration: 1ms",
        "[log] Ending test: Should allow voting on proposal (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.970Z"
    },
    {
      "id": 238,
      "suiteName": "Journey 5.2: Vote on Proposal",
      "testName": "Should track vote counts correctly",
      "description": "Should track vote counts correctly",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.2: Vote on Proposal - Should track vote counts correctly",
        "Duration: 2ms",
        "[log] Ending test: Should track vote counts correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.974Z"
    },
    {
      "id": 239,
      "suiteName": "Journey 5.3: Unauthorized Vote Attempt",
      "testName": "Should emit vote event regardless of vote choice",
      "description": "Should emit vote event regardless of vote choice",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: Journey 5.3: Unauthorized Vote Attempt - Should emit vote event regardless of vote choice",
        "Duration: 3ms",
        "[log] Ending test: Should emit vote event regardless of vote choice (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.980Z"
    },
    {
      "id": 240,
      "suiteName": "Journey 5.3: Unauthorized Vote Attempt",
      "testName": "Should only count positive votes",
      "description": "Should only count positive votes",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Journey 5.3: Unauthorized Vote Attempt - Should only count positive votes",
        "Duration: 2ms",
        "[log] Ending test: Should only count positive votes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.984Z"
    },
    {
      "id": 3,
      "suiteName": "Login Journey",
      "testName": "Should complete full login process",
      "description": "Should complete full login process",
      "status": "passed",
      "duration": 14,
      "output": [
        "[log] Starting test: Login Journey - Should complete full login process",
        "[log] \nStep 1: Checking NFT balance",
        "[log] User has 1 profile NFT(s)",
        "[log] \nStep 2: Getting token ID by username",
        "[log] Found token ID: 0",
        "[log] \nStep 3: Fetching profile metadata",
        "[log] Profile metadata retrieved successfully",
        "[log] \nStep 4: Verifying ownership",
        "[log] Ownership verified",
        "Duration: 3ms",
        "[log] Ending test: Should complete full login process (passed)"
      ],
      "timestamp": "2025-04-20T13:28:20.989Z"
    },
    {
      "id": 4,
      "suiteName": "Login Journey",
      "testName": "Should handle login with non-existent profile",
      "description": "Should handle login with non-existent profile",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Login Journey - Should handle login with non-existent profile",
        "Duration: 1ms",
        "[log] Ending test: Should handle login with non-existent profile (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.000Z"
    },
    {
      "id": 5,
      "suiteName": "Login Journey",
      "testName": "Should handle login with transferred profile",
      "description": "Should handle login with transferred profile",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Login Journey - Should handle login with transferred profile",
        "Duration: 2ms",
        "[log] Ending test: Should handle login with transferred profile (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.011Z"
    },
    {
      "id": 227,
      "suiteName": "Member Management",
      "testName": "Should handle member approval flow correctly",
      "description": "Should handle member approval flow correctly",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Member Management - Should handle member approval flow correctly",
        "Duration: 1ms",
        "[log] Ending test: Should handle member approval flow correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.802Z"
    },
    {
      "id": 226,
      "suiteName": "Member Management",
      "testName": "Should handle member banning correctly",
      "description": "Should handle member banning correctly",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Member Management - Should handle member banning correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle member banning correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.781Z"
    },
    {
      "id": 228,
      "suiteName": "Member Management",
      "testName": "Should handle member rejection flow correctly",
      "description": "Should handle member rejection flow correctly",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Member Management - Should handle member rejection flow correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle member rejection flow correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.824Z"
    },
    {
      "id": 126,
      "suiteName": "Member Queries",
      "testName": "Should get most active members based on points",
      "description": "Should get most active members based on points",
      "status": "passed",
      "duration": 30,
      "output": [
        "[log] Starting test: Member Queries - Should get most active members based on points",
        "Duration: 3ms",
        "[log] Ending test: Should get most active members based on points (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.614Z"
    },
    {
      "id": 125,
      "suiteName": "Member Queries",
      "testName": "Should get paginated list of tribe members",
      "description": "Should get paginated list of tribe members",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Member Queries - Should get paginated list of tribe members",
        "Duration: 4ms",
        "[log] Ending test: Should get paginated list of tribe members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.584Z"
    },
    {
      "id": 234,
      "suiteName": "Member Status Transitions",
      "testName": "Should handle all member status transitions correctly",
      "description": "Should handle all member status transitions correctly",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Member Status Transitions - Should handle all member status transitions correctly",
        "Duration: 3ms",
        "[log] Ending test: Should handle all member status transitions correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.956Z"
    },
    {
      "id": 69,
      "suiteName": "Metadata Validation",
      "testName": "Should reject invalid metadata format",
      "description": "Should reject invalid metadata format",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Metadata Validation - Should reject invalid metadata format",
        "Duration: 1ms",
        "[log] Ending test: Should reject invalid metadata format (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.917Z"
    },
    {
      "id": 71,
      "suiteName": "Metadata Validation",
      "testName": "Should validate event post details",
      "description": "Should validate event post details",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Metadata Validation - Should validate event post details",
        "Duration: 4ms",
        "[log] Ending test: Should validate event post details (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.923Z"
    },
    {
      "id": 72,
      "suiteName": "Metadata Validation",
      "testName": "Should validate media content",
      "description": "Should validate media content",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Metadata Validation - Should validate media content",
        "Duration: 4ms",
        "[log] Ending test: Should validate media content (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.927Z"
    },
    {
      "id": 70,
      "suiteName": "Metadata Validation",
      "testName": "Should validate required metadata fields",
      "description": "Should validate required metadata fields",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Metadata Validation - Should validate required metadata fields",
        "Duration: 2ms",
        "[log] Ending test: Should validate required metadata fields (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.919Z"
    },
    {
      "id": 92,
      "suiteName": "Milestone Management",
      "testName": "Should allow reviewer to approve milestone",
      "description": "Should allow reviewer to approve milestone",
      "status": "passed",
      "duration": 38,
      "output": [
        "[log] Starting test: Milestone Management - Should allow reviewer to approve milestone",
        "Duration: 2ms",
        "[log] Ending test: Should allow reviewer to approve milestone (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.643Z"
    },
    {
      "id": 93,
      "suiteName": "Milestone Management",
      "testName": "Should allow reviewer to reject milestone",
      "description": "Should allow reviewer to reject milestone",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Milestone Management - Should allow reviewer to reject milestone",
        "Duration: 2ms",
        "[log] Ending test: Should allow reviewer to reject milestone (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.683Z"
    },
    {
      "id": 90,
      "suiteName": "Milestone Management",
      "testName": "Should allow starting a milestone",
      "description": "Should allow starting a milestone",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Milestone Management - Should allow starting a milestone",
        "Duration: 2ms",
        "[log] Ending test: Should allow starting a milestone (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.568Z"
    },
    {
      "id": 91,
      "suiteName": "Milestone Management",
      "testName": "Should allow submitting milestone deliverables",
      "description": "Should allow submitting milestone deliverables",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: Milestone Management - Should allow submitting milestone deliverables",
        "Duration: 1ms",
        "[log] Ending test: Should allow submitting milestone deliverables (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.605Z"
    },
    {
      "id": 94,
      "suiteName": "Milestone Management",
      "testName": "Should prevent non-reviewer from reviewing milestone",
      "description": "Should prevent non-reviewer from reviewing milestone",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Milestone Management - Should prevent non-reviewer from reviewing milestone",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-reviewer from reviewing milestone (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.723Z"
    },
    {
      "id": 96,
      "suiteName": "Milestone Management",
      "testName": "Should prevent starting milestone with incomplete dependencies",
      "description": "Should prevent starting milestone with incomplete dependencies",
      "status": "passed",
      "duration": 49,
      "output": [
        "[log] Starting test: Milestone Management - Should prevent starting milestone with incomplete dependencies",
        "Duration: 14ms",
        "[log] Ending test: Should prevent starting milestone with incomplete dependencies (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.813Z"
    },
    {
      "id": 95,
      "suiteName": "Milestone Management",
      "testName": "Should prevent submitting deliverables for non-started milestone",
      "description": "Should prevent submitting deliverables for non-started milestone",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Milestone Management - Should prevent submitting deliverables for non-started milestone",
        "Duration: 1ms",
        "[log] Ending test: Should prevent submitting deliverables for non-started milestone (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.764Z"
    },
    {
      "id": 45,
      "suiteName": "Moderation Journey",
      "testName": "Should handle post deletion",
      "description": "Should handle post deletion",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Moderation Journey - Should handle post deletion",
        "Duration: 4ms",
        "[log] Ending test: Should handle post deletion (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.612Z"
    },
    {
      "id": 186,
      "suiteName": "Negative Scenarios",
      "testName": "Should enforce post creation cooldown",
      "description": "Should enforce post creation cooldown",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Negative Scenarios - Should enforce post creation cooldown",
        "[log] \nScenario: Testing post creation cooldown",
        "[log] Step 1: Creating first post",
        "[log] First post created",
        "[log] \nStep 2: Attempting immediate second post",
        "[log] Cooldown enforcement verified",
        "Duration: 16ms",
        "[log] Ending test: Should enforce post creation cooldown (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.822Z"
    },
    {
      "id": 185,
      "suiteName": "Negative Scenarios",
      "testName": "Should prevent non-members from creating posts",
      "description": "Should prevent non-members from creating posts",
      "status": "passed",
      "duration": 25,
      "output": [
        "[log] Starting test: Negative Scenarios - Should prevent non-members from creating posts",
        "[log] \nScenario: Attempting post creation as non-member",
        "[log] Non-member post creation prevented successfully",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-members from creating posts (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.781Z"
    },
    {
      "id": 188,
      "suiteName": "Negative Scenarios",
      "testName": "Should prevent unauthorized encryption key access",
      "description": "Should prevent unauthorized encryption key access",
      "status": "passed",
      "duration": 29,
      "output": [
        "[log] Starting test: Negative Scenarios - Should prevent unauthorized encryption key access",
        "[log] \nScenario: Testing unauthorized encryption key access",
        "[log] Step 1: Creating encrypted post",
        "[log] Encrypted post created with ID: 0",
        "[log] \nStep 2: Attempting unauthorized key access",
        "[log] Unauthorized key access prevented",
        "Duration: 2ms",
        "[log] Ending test: Should prevent unauthorized encryption key access (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.890Z"
    },
    {
      "id": 187,
      "suiteName": "Negative Scenarios",
      "testName": "Should validate collectible requirements",
      "description": "Should validate collectible requirements",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Negative Scenarios - Should validate collectible requirements",
        "[log] \nScenario: Testing collectible validation",
        "[log] Invalid collectible validation successful",
        "Duration: 12ms",
        "[log] Ending test: Should validate collectible requirements (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.861Z"
    },
    {
      "id": 213,
      "suiteName": "NFT Gated Tribe",
      "testName": "Should allow joining after acquiring required NFT",
      "description": "Should allow joining after acquiring required NFT",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: NFT Gated Tribe - Should allow joining after acquiring required NFT",
        "Duration: 2ms",
        "[log] Ending test: Should allow joining after acquiring required NFT (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.510Z"
    },
    {
      "id": 211,
      "suiteName": "NFT Gated Tribe",
      "testName": "Should allow joining before NFT requirement is set",
      "description": "Should allow joining before NFT requirement is set",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: NFT Gated Tribe - Should allow joining before NFT requirement is set",
        "Duration: 1ms",
        "[log] Ending test: Should allow joining before NFT requirement is set (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.467Z"
    },
    {
      "id": 212,
      "suiteName": "NFT Gated Tribe",
      "testName": "Should prevent joining after NFT requirement is set without NFT",
      "description": "Should prevent joining after NFT requirement is set without NFT",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: NFT Gated Tribe - Should prevent joining after NFT requirement is set without NFT",
        "Duration: 2ms",
        "[log] Ending test: Should prevent joining after NFT requirement is set without NFT (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.488Z"
    },
    {
      "id": 134,
      "suiteName": "Point Redemption",
      "testName": "Should allow point redemption with valid signature",
      "description": "Should allow point redemption with valid signature",
      "status": "passed",
      "duration": 7,
      "output": [
        "[log] Starting test: Point Redemption - Should allow point redemption with valid signature",
        "Duration: 2ms",
        "[log] Ending test: Should allow point redemption with valid signature (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.805Z"
    },
    {
      "id": 136,
      "suiteName": "Point Redemption",
      "testName": "Should prevent replay attacks",
      "description": "Should prevent replay attacks",
      "status": "passed",
      "duration": 7,
      "output": [
        "[log] Starting test: Point Redemption - Should prevent replay attacks",
        "Duration: 1ms",
        "[log] Ending test: Should prevent replay attacks (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.818Z"
    },
    {
      "id": 135,
      "suiteName": "Point Redemption",
      "testName": "Should reject redemption with invalid signature",
      "description": "Should reject redemption with invalid signature",
      "status": "passed",
      "duration": 6,
      "output": [
        "[log] Starting test: Point Redemption - Should reject redemption with invalid signature",
        "Duration: 1ms",
        "[log] Ending test: Should reject redemption with invalid signature (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.811Z"
    },
    {
      "id": 173,
      "suiteName": "Point System Analytics",
      "testName": "Should return top members correctly",
      "description": "Should return top members correctly",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Point System Analytics - Should return top members correctly",
        "Duration: 3ms",
        "[log] Ending test: Should return top members correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.359Z"
    },
    {
      "id": 167,
      "suiteName": "Point System Basic Operations",
      "testName": "Should allow manual point awards by admin",
      "description": "Should allow manual point awards by admin",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Point System Basic Operations - Should allow manual point awards by admin",
        "Duration: 1ms",
        "[log] Ending test: Should allow manual point awards by admin (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.246Z"
    },
    {
      "id": 165,
      "suiteName": "Point System Basic Operations",
      "testName": "Should award points for actions correctly",
      "description": "Should award points for actions correctly",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Point System Basic Operations - Should award points for actions correctly",
        "Duration: 2ms",
        "[log] Ending test: Should award points for actions correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.208Z"
    },
    {
      "id": 166,
      "suiteName": "Point System Basic Operations",
      "testName": "Should track action counts correctly",
      "description": "Should track action counts correctly",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Point System Basic Operations - Should track action counts correctly",
        "Duration: 2ms",
        "[log] Ending test: Should track action counts correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.228Z"
    },
    {
      "id": 171,
      "suiteName": "Point System Integration with Collectibles",
      "testName": "Should allow claiming collectible with sufficient points",
      "description": "Should allow claiming collectible with sufficient points",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Point System Integration with Collectibles - Should allow claiming collectible with sufficient points",
        "Duration: 1ms",
        "[log] Ending test: Should allow claiming collectible with sufficient points (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.320Z"
    },
    {
      "id": 172,
      "suiteName": "Point System Integration with Collectibles",
      "testName": "Should prevent claiming collectible without sufficient points",
      "description": "Should prevent claiming collectible without sufficient points",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Point System Integration with Collectibles - Should prevent claiming collectible without sufficient points",
        "Duration: 1ms",
        "[log] Ending test: Should prevent claiming collectible without sufficient points (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.339Z"
    },
    {
      "id": 169,
      "suiteName": "Point System Negative Tests",
      "testName": "Should prevent awarding points to non-members",
      "description": "Should prevent awarding points to non-members",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Point System Negative Tests - Should prevent awarding points to non-members",
        "Duration: 1ms",
        "[log] Ending test: Should prevent awarding points to non-members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.282Z"
    },
    {
      "id": 170,
      "suiteName": "Point System Negative Tests",
      "testName": "Should prevent deducting more points than available",
      "description": "Should prevent deducting more points than available",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Point System Negative Tests - Should prevent deducting more points than available",
        "Duration: 1ms",
        "[log] Ending test: Should prevent deducting more points than available (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.300Z"
    },
    {
      "id": 168,
      "suiteName": "Point System Negative Tests",
      "testName": "Should prevent non-admin from awarding points",
      "description": "Should prevent non-admin from awarding points",
      "status": "passed",
      "duration": 18,
      "output": [
        "[log] Starting test: Point System Negative Tests - Should prevent non-admin from awarding points",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-admin from awarding points (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.264Z"
    },
    {
      "id": 67,
      "suiteName": "Poll Posts",
      "testName": "Should create a poll post with options",
      "description": "Should create a poll post with options",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Poll Posts - Should create a poll post with options",
        "Duration: 9ms",
        "[log] Ending test: Should create a poll post with options (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.903Z"
    },
    {
      "id": 58,
      "suiteName": "Post Interactions",
      "testName": "Should prevent self-likes",
      "description": "Should prevent self-likes",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Post Interactions - Should prevent self-likes",
        "Duration: 1ms",
        "[log] Ending test: Should prevent self-likes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.807Z"
    },
    {
      "id": 57,
      "suiteName": "Post Interactions",
      "testName": "Should track post interactions",
      "description": "Should track post interactions",
      "status": "passed",
      "duration": 5,
      "output": [
        "[log] Starting test: Post Interactions - Should track post interactions",
        "Duration: 1ms",
        "[log] Ending test: Should track post interactions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.804Z"
    },
    {
      "id": 178,
      "suiteName": "Post Listing Tests",
      "testName": "Should execute a simple test function",
      "description": "Should execute a simple test function",
      "status": "passed",
      "duration": 28,
      "output": [
        "[log] Starting test: Post Listing Tests - Should execute a simple test function",
        "Duration: 1ms",
        "[log] Ending test: Should execute a simple test function (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.484Z"
    },
    {
      "id": 180,
      "suiteName": "Post Listing Tests",
      "testName": "Should get all posts by user",
      "description": "Should get all posts by user",
      "status": "passed",
      "duration": 56,
      "output": [
        "[log] Starting test: Post Listing Tests - Should get all posts by user",
        "Duration: 21ms",
        "[log] Ending test: Should get all posts by user (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.610Z"
    },
    {
      "id": 179,
      "suiteName": "Post Listing Tests",
      "testName": "Should get all posts with pagination",
      "description": "Should get all posts with pagination",
      "status": "passed",
      "duration": 70,
      "output": [
        "[log] Starting test: Post Listing Tests - Should get all posts with pagination",
        "Duration: 43ms",
        "[log] Ending test: Should get all posts with pagination (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.554Z"
    },
    {
      "id": 181,
      "suiteName": "Post Listing Tests",
      "testName": "Should get post feed for user",
      "description": "Should get post feed for user",
      "status": "passed",
      "duration": 48,
      "output": [
        "[log] Starting test: Post Listing Tests - Should get post feed for user",
        "Duration: 16ms",
        "[log] Ending test: Should get post feed for user (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.658Z"
    },
    {
      "id": 59,
      "suiteName": "Post Management",
      "testName": "Should allow post deletion by owner",
      "description": "Should allow post deletion by owner",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Post Management - Should allow post deletion by owner",
        "Duration: 2ms",
        "[log] Ending test: Should allow post deletion by owner (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.810Z"
    },
    {
      "id": 60,
      "suiteName": "Post Management",
      "testName": "Should handle post reporting",
      "description": "Should handle post reporting",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Post Management - Should handle post reporting",
        "Duration: 4ms",
        "[log] Ending test: Should handle post reporting (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.814Z"
    },
    {
      "id": 221,
      "suiteName": "Private Tribe",
      "testName": "Should allow admin to approve pending member",
      "description": "Should allow admin to approve pending member",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Private Tribe - Should allow admin to approve pending member",
        "Duration: 1ms",
        "[log] Ending test: Should allow admin to approve pending member (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.675Z"
    },
    {
      "id": 222,
      "suiteName": "Private Tribe",
      "testName": "Should allow admin to reject pending member",
      "description": "Should allow admin to reject pending member",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Private Tribe - Should allow admin to reject pending member",
        "Duration: 2ms",
        "[log] Ending test: Should allow admin to reject pending member (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.696Z"
    },
    {
      "id": 223,
      "suiteName": "Private Tribe",
      "testName": "Should not allow non-admin to approve/reject members",
      "description": "Should not allow non-admin to approve/reject members",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Private Tribe - Should not allow non-admin to approve/reject members",
        "Duration: 2ms",
        "[log] Ending test: Should not allow non-admin to approve/reject members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.716Z"
    },
    {
      "id": 220,
      "suiteName": "Private Tribe",
      "testName": "Should set member status to PENDING when requesting to join",
      "description": "Should set member status to PENDING when requesting to join",
      "status": "passed",
      "duration": 19,
      "output": [
        "[log] Starting test: Private Tribe - Should set member status to PENDING when requesting to join",
        "Duration: 1ms",
        "[log] Ending test: Should set member status to PENDING when requesting to join (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.655Z"
    },
    {
      "id": 85,
      "suiteName": "Project Creation",
      "testName": "Should create a project from valid post",
      "description": "Should create a project from valid post",
      "status": "passed",
      "duration": 43,
      "output": [
        "[log] Starting test: Project Creation - Should create a project from valid post",
        "Duration: 16ms",
        "[log] Ending test: Should create a project from valid post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.380Z"
    },
    {
      "id": 86,
      "suiteName": "Project Creation",
      "testName": "Should prevent non-creator from validating post",
      "description": "Should prevent non-creator from validating post",
      "status": "passed",
      "duration": 30,
      "output": [
        "[log] Starting test: Project Creation - Should prevent non-creator from validating post",
        "Duration: 6ms",
        "[log] Ending test: Should prevent non-creator from validating post (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.410Z"
    },
    {
      "id": 100,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should create a project with milestones",
      "description": "Should create a project with milestones",
      "status": "passed",
      "duration": 24,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should create a project with milestones",
        "Duration: 24ms",
        "[log] Ending test: Should create a project with milestones (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.992Z"
    },
    {
      "id": 101,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should handle milestone submissions and reviews",
      "description": "Should handle milestone submissions and reviews",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should handle milestone submissions and reviews",
        "Duration: 20ms",
        "[log] Ending test: Should handle milestone submissions and reviews (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.013Z"
    },
    {
      "id": 102,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should handle project status updates",
      "description": "Should handle project status updates",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should handle project status updates",
        "Duration: 21ms",
        "[log] Ending test: Should handle project status updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.034Z"
    },
    {
      "id": 103,
      "suiteName": "Project Creation Scenarios",
      "testName": "Should prevent unauthorized updates",
      "description": "Should prevent unauthorized updates",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Project Creation Scenarios - Should prevent unauthorized updates",
        "Duration: 20ms",
        "[log] Ending test: Should prevent unauthorized updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.055Z"
    },
    {
      "id": 66,
      "suiteName": "Project Posts",
      "testName": "Should prevent unauthorized project creation",
      "description": "Should prevent unauthorized project creation",
      "status": "passed",
      "duration": 30,
      "output": [
        "[log] Starting test: Project Posts - Should prevent unauthorized project creation",
        "Duration: 23ms",
        "[log] Ending test: Should prevent unauthorized project creation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.893Z"
    },
    {
      "id": 106,
      "suiteName": "Project Update Scenarios",
      "testName": "Should handle milestone completion updates",
      "description": "Should handle milestone completion updates",
      "status": "passed",
      "duration": 24,
      "output": [
        "[log] Starting test: Project Update Scenarios - Should handle milestone completion updates",
        "Duration: 10ms",
        "[log] Ending test: Should handle milestone completion updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.129Z"
    },
    {
      "id": 105,
      "suiteName": "Project Update Scenarios",
      "testName": "Should handle progress updates",
      "description": "Should handle progress updates",
      "status": "passed",
      "duration": 26,
      "output": [
        "[log] Starting test: Project Update Scenarios - Should handle progress updates",
        "Duration: 10ms",
        "[log] Ending test: Should handle progress updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.105Z"
    },
    {
      "id": 107,
      "suiteName": "Project Update Scenarios",
      "testName": "Should validate update permissions",
      "description": "Should validate update permissions",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Project Update Scenarios - Should validate update permissions",
        "Duration: 7ms",
        "[log] Ending test: Should validate update permissions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.149Z"
    },
    {
      "id": 104,
      "suiteName": "Project Validation Scenarios",
      "testName": "Should prevent unauthorized updates",
      "description": "Should prevent unauthorized updates",
      "status": "passed",
      "duration": 24,
      "output": [
        "[log] Starting test: Project Validation Scenarios - Should prevent unauthorized updates",
        "Duration: 7ms",
        "[log] Ending test: Should prevent unauthorized updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.079Z"
    },
    {
      "id": 68,
      "suiteName": "Resource Posts",
      "testName": "Should create a resource post with attachments",
      "description": "Should create a resource post with attachments",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Resource Posts - Should create a resource post with attachments",
        "Duration: 12ms",
        "[log] Ending test: Should create a resource post with attachments (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.915Z"
    },
    {
      "id": 73,
      "suiteName": "Rich Media Posts",
      "testName": "Should create a post with multiple media types",
      "description": "Should create a post with multiple media types",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Rich Media Posts - Should create a post with multiple media types",
        "Duration: 11ms",
        "[log] Ending test: Should create a post with multiple media types (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.938Z"
    },
    {
      "id": 193,
      "suiteName": "Role Assignment",
      "testName": "Should assign roles correctly",
      "description": "Should assign roles correctly",
      "status": "passed",
      "duration": 15,
      "output": [
        "[log] Starting test: Role Assignment - Should assign roles correctly",
        "Duration: 3ms",
        "[log] Ending test: Should assign roles correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.208Z"
    },
    {
      "id": 195,
      "suiteName": "Role Assignment",
      "testName": "Should only allow admin to assign roles",
      "description": "Should only allow admin to assign roles",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Role Assignment - Should only allow admin to assign roles",
        "Duration: 1ms",
        "[log] Ending test: Should only allow admin to assign roles (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.225Z"
    },
    {
      "id": 194,
      "suiteName": "Role Assignment",
      "testName": "Should remove roles correctly",
      "description": "Should remove roles correctly",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Role Assignment - Should remove roles correctly",
        "Duration: 2ms",
        "[log] Ending test: Should remove roles correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.217Z"
    },
    {
      "id": 197,
      "suiteName": "Role Verification",
      "testName": "Should check for all roles correctly",
      "description": "Should check for all roles correctly",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Role Verification - Should check for all roles correctly",
        "Duration: 1ms",
        "[log] Ending test: Should check for all roles correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.244Z"
    },
    {
      "id": 196,
      "suiteName": "Role Verification",
      "testName": "Should check for any role correctly",
      "description": "Should check for any role correctly",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Role Verification - Should check for any role correctly",
        "Duration: 2ms",
        "[log] Ending test: Should check for any role correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.235Z"
    },
    {
      "id": 198,
      "suiteName": "Role Verification",
      "testName": "Should get user roles correctly",
      "description": "Should get user roles correctly",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Role Verification - Should get user roles correctly",
        "Duration: 1ms",
        "[log] Ending test: Should get user roles correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.254Z"
    },
    {
      "id": 224,
      "suiteName": "Role-based Access Control",
      "testName": "Should allow moderator to perform moderation actions",
      "description": "Should allow moderator to perform moderation actions",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Role-based Access Control - Should allow moderator to perform moderation actions",
        "Duration: 1ms",
        "[log] Ending test: Should allow moderator to perform moderation actions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.738Z"
    },
    {
      "id": 225,
      "suiteName": "Role-based Access Control",
      "testName": "Should prevent regular members from performing admin actions",
      "description": "Should prevent regular members from performing admin actions",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Role-based Access Control - Should prevent regular members from performing admin actions",
        "Duration: 1ms",
        "[log] Ending test: Should prevent regular members from performing admin actions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.759Z"
    },
    {
      "id": 7,
      "suiteName": "Scenario 1: Tribe Creation",
      "testName": "Should create a private tribe with entry fee",
      "description": "Should create a private tribe with entry fee",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Scenario 1: Tribe Creation - Should create a private tribe with entry fee",
        "Duration: 2ms",
        "[log] Ending test: Should create a private tribe with entry fee (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.033Z"
    },
    {
      "id": 6,
      "suiteName": "Scenario 1: Tribe Creation",
      "testName": "Should create a public tribe successfully",
      "description": "Should create a public tribe successfully",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Scenario 1: Tribe Creation - Should create a public tribe successfully",
        "Duration: 3ms",
        "[log] Ending test: Should create a public tribe successfully (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.023Z"
    },
    {
      "id": 8,
      "suiteName": "Scenario 2: Update Tribe",
      "testName": "Should allow tribe admin to update tribe config",
      "description": "Should allow tribe admin to update tribe config",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Scenario 2: Update Tribe - Should allow tribe admin to update tribe config",
        "Duration: 1ms",
        "[log] Ending test: Should allow tribe admin to update tribe config (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.044Z"
    },
    {
      "id": 9,
      "suiteName": "Scenario 2: Update Tribe",
      "testName": "Should prevent non-admin from updating tribe config",
      "description": "Should prevent non-admin from updating tribe config",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Scenario 2: Update Tribe - Should prevent non-admin from updating tribe config",
        "Duration: 1ms",
        "[log] Ending test: Should prevent non-admin from updating tribe config (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.055Z"
    },
    {
      "id": 12,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should allow admin to approve pending members",
      "description": "Should allow admin to approve pending members",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should allow admin to approve pending members",
        "Duration: 2ms",
        "[log] Ending test: Should allow admin to approve pending members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.090Z"
    },
    {
      "id": 13,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should allow admin to reject pending members and return entry fee",
      "description": "Should allow admin to reject pending members and return entry fee",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should allow admin to reject pending members and return entry fee",
        "Duration: 1ms",
        "[log] Ending test: Should allow admin to reject pending members and return entry fee (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.101Z"
    },
    {
      "id": 10,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should allow instant join for public tribes",
      "description": "Should allow instant join for public tribes",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should allow instant join for public tribes",
        "Duration: 1ms",
        "[log] Ending test: Should allow instant join for public tribes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.066Z"
    },
    {
      "id": 11,
      "suiteName": "Scenario 3: Join a Tribe",
      "testName": "Should require approval for private tribes",
      "description": "Should require approval for private tribes",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Scenario 3: Join a Tribe - Should require approval for private tribes",
        "Duration: 2ms",
        "[log] Ending test: Should require approval for private tribes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.078Z"
    },
    {
      "id": 16,
      "suiteName": "Scenario 9.1: Creating a Community",
      "testName": "Should create a private community with entry fee",
      "description": "Should create a private community with entry fee",
      "status": "passed",
      "duration": 29,
      "output": [
        "[log] Starting test: Scenario 9.1: Creating a Community - Should create a private community with entry fee",
        "Duration: 2ms",
        "[log] Ending test: Should create a private community with entry fee (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.179Z"
    },
    {
      "id": 15,
      "suiteName": "Scenario 9.1: Creating a Community",
      "testName": "Should create a public community with basic configuration",
      "description": "Should create a public community with basic configuration",
      "status": "passed",
      "duration": 29,
      "output": [
        "[log] Starting test: Scenario 9.1: Creating a Community - Should create a public community with basic configuration",
        "Duration: 2ms",
        "[log] Ending test: Should create a public community with basic configuration (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.150Z"
    },
    {
      "id": 17,
      "suiteName": "Scenario 9.1: Creating a Community",
      "testName": "Should create an invite-only community with collectible requirement",
      "description": "Should create an invite-only community with collectible requirement",
      "status": "passed",
      "duration": 27,
      "output": [
        "[log] Starting test: Scenario 9.1: Creating a Community - Should create an invite-only community with collectible requirement",
        "Duration: 1ms",
        "[log] Ending test: Should create an invite-only community with collectible requirement (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.206Z"
    },
    {
      "id": 99,
      "suiteName": "Security Scenarios",
      "testName": "Should prevent milestone review manipulation",
      "description": "Should prevent milestone review manipulation",
      "status": "passed",
      "duration": 41,
      "output": [
        "[log] Starting test: Security Scenarios - Should prevent milestone review manipulation",
        "Duration: 1ms",
        "[log] Ending test: Should prevent milestone review manipulation (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.935Z"
    },
    {
      "id": 97,
      "suiteName": "Security Scenarios",
      "testName": "Should prevent unauthorized milestone updates",
      "description": "Should prevent unauthorized milestone updates",
      "status": "passed",
      "duration": 42,
      "output": [
        "[log] Starting test: Security Scenarios - Should prevent unauthorized milestone updates",
        "Duration: 0ms",
        "[log] Ending test: Should prevent unauthorized milestone updates (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.855Z"
    },
    {
      "id": 98,
      "suiteName": "Security Scenarios",
      "testName": "Should prevent unauthorized team member additions",
      "description": "Should prevent unauthorized team member additions",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Security Scenarios - Should prevent unauthorized team member additions",
        "Duration: 1ms",
        "[log] Ending test: Should prevent unauthorized team member additions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.894Z"
    },
    {
      "id": 1,
      "suiteName": "Signup Journey",
      "testName": "Should complete full signup process",
      "description": "Should complete full signup process",
      "status": "passed",
      "duration": 296,
      "output": [
        "[log] Starting test: Signup Journey - Should complete full signup process",
        "[log] \nStep 1: Checking username availability",
        "[log] Username 'cryptouser' is available",
        "[log] \nStep 2: Creating profile",
        "[log] Profile created with token ID: 0",
        "[log] \nStep 3: Verifying profile data",
        "[log] Profile data verified successfully",
        "[log] \nStep 4: Updating profile metadata",
        "[log] Avatar updated",
        "[log] Bio updated",
        "[log] Profile updates verified",
        "Duration: 9ms",
        "[log] Ending test: Should complete full signup process (passed)"
      ],
      "timestamp": "2025-04-20T13:28:20.959Z"
    },
    {
      "id": 2,
      "suiteName": "Signup Journey",
      "testName": "Should handle duplicate username signup attempt",
      "description": "Should handle duplicate username signup attempt",
      "status": "passed",
      "duration": 16,
      "output": [
        "[log] Starting test: Signup Journey - Should handle duplicate username signup attempt",
        "Duration: 7ms",
        "[log] Ending test: Should handle duplicate username signup attempt (passed)"
      ],
      "timestamp": "2025-04-20T13:28:20.975Z"
    },
    {
      "id": 199,
      "suiteName": "Special Fan Role Assignment",
      "testName": "Should allow admin to assign fan role",
      "description": "Should allow admin to assign fan role",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Special Fan Role Assignment - Should allow admin to assign fan role",
        "Duration: 1ms",
        "[log] Ending test: Should allow admin to assign fan role (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.262Z"
    },
    {
      "id": 200,
      "suiteName": "Special Fan Role Assignment",
      "testName": "Should not allow non-admin to assign fan role",
      "description": "Should not allow non-admin to assign fan role",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Special Fan Role Assignment - Should not allow non-admin to assign fan role",
        "Duration: 0ms",
        "[log] Ending test: Should not allow non-admin to assign fan role (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.270Z"
    },
    {
      "id": 87,
      "suiteName": "Team Management",
      "testName": "Should allow adding team members",
      "description": "Should allow adding team members",
      "status": "passed",
      "duration": 40,
      "output": [
        "[log] Starting test: Team Management - Should allow adding team members",
        "Duration: 1ms",
        "[log] Ending test: Should allow adding team members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.450Z"
    },
    {
      "id": 89,
      "suiteName": "Team Management",
      "testName": "Should prevent adding duplicate team members",
      "description": "Should prevent adding duplicate team members",
      "status": "passed",
      "duration": 39,
      "output": [
        "[log] Starting test: Team Management - Should prevent adding duplicate team members",
        "Duration: 1ms",
        "[log] Ending test: Should prevent adding duplicate team members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.526Z"
    },
    {
      "id": 88,
      "suiteName": "Team Management",
      "testName": "Should prevent non-creator from adding team members",
      "description": "Should prevent non-creator from adding team members",
      "status": "passed",
      "duration": 37,
      "output": [
        "[log] Starting test: Team Management - Should prevent non-creator from adding team members",
        "Duration: 0ms",
        "[log] Ending test: Should prevent non-creator from adding team members (passed)"
      ],
      "timestamp": "2025-04-20T13:28:22.487Z"
    },
    {
      "id": 141,
      "suiteName": "Ticket Purchase",
      "testName": "Should allow user to purchase tickets",
      "description": "Should allow user to purchase tickets",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Ticket Purchase - Should allow user to purchase tickets",
        "Duration: 1ms",
        "[log] Ending test: Should allow user to purchase tickets (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.858Z"
    },
    {
      "id": 143,
      "suiteName": "Ticket Purchase",
      "testName": "Should prevent purchase when not enough tickets available",
      "description": "Should prevent purchase when not enough tickets available",
      "status": "passed",
      "duration": 7,
      "output": [
        "[log] Starting test: Ticket Purchase - Should prevent purchase when not enough tickets available",
        "Duration: 0ms",
        "[log] Ending test: Should prevent purchase when not enough tickets available (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.873Z"
    },
    {
      "id": 144,
      "suiteName": "Ticket Purchase",
      "testName": "Should prevent purchase with insufficient payment",
      "description": "Should prevent purchase with insufficient payment",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Ticket Purchase - Should prevent purchase with insufficient payment",
        "Duration: 1ms",
        "[log] Ending test: Should prevent purchase with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.881Z"
    },
    {
      "id": 142,
      "suiteName": "Ticket Purchase",
      "testName": "Should refund excess payment",
      "description": "Should refund excess payment",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Ticket Purchase - Should refund excess payment",
        "Duration: 1ms",
        "[log] Ending test: Should refund excess payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.866Z"
    },
    {
      "id": 25,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should enforce ticket supply limits",
      "description": "Should enforce ticket supply limits",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should enforce ticket supply limits",
        "Duration: 2ms",
        "[log] Ending test: Should enforce ticket supply limits (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.286Z"
    },
    {
      "id": 27,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should handle ticket transfers correctly",
      "description": "Should handle ticket transfers correctly",
      "status": "passed",
      "duration": 4,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should handle ticket transfers correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle ticket transfers correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.291Z"
    },
    {
      "id": 26,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should prevent purchase with insufficient payment",
      "description": "Should prevent purchase with insufficient payment",
      "status": "passed",
      "duration": 1,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should prevent purchase with insufficient payment",
        "Duration: 0ms",
        "[log] Ending test: Should prevent purchase with insufficient payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.287Z"
    },
    {
      "id": 23,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should purchase tickets successfully",
      "description": "Should purchase tickets successfully",
      "status": "passed",
      "duration": 3,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should purchase tickets successfully",
        "Duration: 2ms",
        "[log] Ending test: Should purchase tickets successfully (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.281Z"
    },
    {
      "id": 24,
      "suiteName": "Ticket Purchase and Management",
      "testName": "Should refund excess payment",
      "description": "Should refund excess payment",
      "status": "passed",
      "duration": 2,
      "output": [
        "[log] Starting test: Ticket Purchase and Management - Should refund excess payment",
        "Duration: 1ms",
        "[log] Ending test: Should refund excess payment (passed)"
      ],
      "timestamp": "2025-04-20T13:28:21.283Z"
    },
    {
      "id": 145,
      "suiteName": "Ticket Transfer",
      "testName": "Should allow first transfer",
      "description": "Should allow first transfer",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: Ticket Transfer - Should allow first transfer",
        "Duration: 1ms",
        "[log] Ending test: Should allow first transfer (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.889Z"
    },
    {
      "id": 148,
      "suiteName": "Ticket Transfer",
      "testName": "Should handle batch transfers correctly",
      "description": "Should handle batch transfers correctly",
      "status": "passed",
      "duration": 11,
      "output": [
        "[log] Starting test: Ticket Transfer - Should handle batch transfers correctly",
        "Duration: 4ms",
        "[log] Ending test: Should handle batch transfers correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.918Z"
    },
    {
      "id": 146,
      "suiteName": "Ticket Transfer",
      "testName": "Should prevent second transfer",
      "description": "Should prevent second transfer",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Ticket Transfer - Should prevent second transfer",
        "Duration: 1ms",
        "[log] Ending test: Should prevent second transfer (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.898Z"
    },
    {
      "id": 147,
      "suiteName": "Ticket Transfer",
      "testName": "Should track transfer status correctly",
      "description": "Should track transfer status correctly",
      "status": "passed",
      "duration": 9,
      "output": [
        "[log] Starting test: Ticket Transfer - Should track transfer status correctly",
        "Duration: 0ms",
        "[log] Ending test: Should track transfer status correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.907Z"
    },
    {
      "id": 127,
      "suiteName": "Tribe Analytics",
      "testName": "Should get popular tribes",
      "description": "Should get popular tribes",
      "status": "passed",
      "duration": 30,
      "output": [
        "[log] Starting test: Tribe Analytics - Should get popular tribes",
        "Duration: 2ms",
        "[log] Ending test: Should get popular tribes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.644Z"
    },
    {
      "id": 128,
      "suiteName": "Tribe Analytics",
      "testName": "Should handle pagination correctly",
      "description": "Should handle pagination correctly",
      "status": "passed",
      "duration": 30,
      "output": [
        "[log] Starting test: Tribe Analytics - Should handle pagination correctly",
        "Duration: 3ms",
        "[log] Ending test: Should handle pagination correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:23.674Z"
    },
    {
      "id": 233,
      "suiteName": "Tribe Configuration Updates",
      "testName": "Should handle entry fee changes",
      "description": "Should handle entry fee changes",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Tribe Configuration Updates - Should handle entry fee changes",
        "Duration: 3ms",
        "[log] Ending test: Should handle entry fee changes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.934Z"
    },
    {
      "id": 232,
      "suiteName": "Tribe Configuration Updates",
      "testName": "Should handle join type changes correctly",
      "description": "Should handle join type changes correctly",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Tribe Configuration Updates - Should handle join type changes correctly",
        "Duration: 2ms",
        "[log] Ending test: Should handle join type changes correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.912Z"
    },
    {
      "id": 206,
      "suiteName": "Tribe Creation with Metadata",
      "testName": "Should create a tribe with collectible requirement",
      "description": "Should create a tribe with collectible requirement",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: Tribe Creation with Metadata - Should create a tribe with collectible requirement",
        "Duration: 5ms",
        "[log] Ending test: Should create a tribe with collectible requirement (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.359Z"
    },
    {
      "id": 205,
      "suiteName": "Tribe Creation with Metadata",
      "testName": "Should create a tribe with detailed metadata",
      "description": "Should create a tribe with detailed metadata",
      "status": "passed",
      "duration": 20,
      "output": [
        "[log] Starting test: Tribe Creation with Metadata - Should create a tribe with detailed metadata",
        "Duration: 2ms",
        "[log] Ending test: Should create a tribe with detailed metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.336Z"
    },
    {
      "id": 203,
      "suiteName": "Tribe Listing Tests",
      "testName": "Should get all tribes with pagination",
      "description": "Should get all tribes with pagination",
      "status": "passed",
      "duration": 15,
      "output": [
        "[log] Starting test: Tribe Listing Tests - Should get all tribes with pagination",
        "Duration: 8ms",
        "[log] Ending test: Should get all tribes with pagination (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.306Z"
    },
    {
      "id": 202,
      "suiteName": "Tribe Listing Tests",
      "testName": "Should get total number of tribes",
      "description": "Should get total number of tribes",
      "status": "passed",
      "duration": 12,
      "output": [
        "[log] Starting test: Tribe Listing Tests - Should get total number of tribes",
        "Duration: 5ms",
        "[log] Ending test: Should get total number of tribes (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.291Z"
    },
    {
      "id": 204,
      "suiteName": "Tribe Listing Tests",
      "testName": "Should get tribe details with metadata",
      "description": "Should get tribe details with metadata",
      "status": "passed",
      "duration": 10,
      "output": [
        "[log] Starting test: Tribe Listing Tests - Should get tribe details with metadata",
        "Duration: 3ms",
        "[log] Ending test: Should get tribe details with metadata (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.316Z"
    },
    {
      "id": 207,
      "suiteName": "Tribe Membership and Role Management",
      "testName": "Should track member roles and permissions",
      "description": "Should track member roles and permissions",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Tribe Membership and Role Management - Should track member roles and permissions",
        "Duration: 2ms",
        "[log] Ending test: Should track member roles and permissions (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.381Z"
    },
    {
      "id": 208,
      "suiteName": "Tribe Membership and Role Management",
      "testName": "Should track tribe membership accurately",
      "description": "Should track tribe membership accurately",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: Tribe Membership and Role Management - Should track tribe membership accurately",
        "Duration: 3ms",
        "[log] Ending test: Should track tribe membership accurately (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.404Z"
    },
    {
      "id": 210,
      "suiteName": "Tribe Metadata Loading and Updates",
      "testName": "Should handle user membership queries efficiently",
      "description": "Should handle user membership queries efficiently",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: Tribe Metadata Loading and Updates - Should handle user membership queries efficiently",
        "Duration: 3ms",
        "[log] Ending test: Should handle user membership queries efficiently (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.447Z"
    },
    {
      "id": 209,
      "suiteName": "Tribe Metadata Loading and Updates",
      "testName": "Should load tribe metadata with member information",
      "description": "Should load tribe metadata with member information",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: Tribe Metadata Loading and Updates - Should load tribe metadata with member information",
        "Duration: 1ms",
        "[log] Ending test: Should load tribe metadata with member information (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.425Z"
    },
    {
      "id": 176,
      "suiteName": "User Flow Scenarios",
      "testName": "Should handle community engagement scenario",
      "description": "Should handle community engagement scenario",
      "status": "passed",
      "duration": 21,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should handle community engagement scenario",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: Community engagement simulation",
        "[log] \nStep 1: Users engaging in discussion",
        "[log] User1 final state - Points: 120, Comments: 1",
        "[log] User2 final state - Points: 25, Comments: 1",
        "Duration: 3ms",
        "[log] Ending test: Should handle community engagement scenario (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.425Z"
    },
    {
      "id": 177,
      "suiteName": "User Flow Scenarios",
      "testName": "Should handle point redemption scenario",
      "description": "Should handle point redemption scenario",
      "status": "passed",
      "duration": 31,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should handle point redemption scenario",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: Point redemption flow",
        "[log] \nStep 1: Building up points",
        "[log] Initial points accumulated: 450",
        "[log] \nStep 2: Approving point deduction",
        "[log] \nStep 3: Redeeming points",
        "[log] Points after redemption: 250",
        "Duration: 12ms",
        "[log] Ending test: Should handle point redemption scenario (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.456Z"
    },
    {
      "id": 175,
      "suiteName": "User Flow Scenarios",
      "testName": "Should track milestone achievements",
      "description": "Should track milestone achievements",
      "status": "passed",
      "duration": 23,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should track milestone achievements",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: User milestone achievements",
        "[log] \nStep 1: Tracking post milestones",
        "[log] User1 after 1 posts: 100 points",
        "[log] User1 after 2 posts: 200 points",
        "[log] User1 after 3 posts: 300 points",
        "[log] User1 after 4 posts: 400 points",
        "[log] User1 after 5 posts: 500 points",
        "[log] Final state - Posts: 5, Points: 500",
        "Duration: 5ms",
        "[log] Ending test: Should track milestone achievements (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.404Z"
    },
    {
      "id": 174,
      "suiteName": "User Flow Scenarios",
      "testName": "Should track user engagement points correctly",
      "description": "Should track user engagement points correctly",
      "status": "passed",
      "duration": 22,
      "output": [
        "[log] Starting test: User Flow Scenarios - Should track user engagement points correctly",
        "[log] Point values set up:",
        "[log] - Post: 100 points",
        "[log] - Comment: 20 points",
        "[log] - Like: 5 points",
        "[log] \nScenario: User engagement points tracking",
        "[log] \nStep 1: User1 creates a post",
        "[log] User1 points after posting: 100",
        "[log] \nStep 2: User2 likes and comments on User1's post",
        "[log] User2 points after like and comment: 25",
        "[log] \nStep 3: User1 creates another post and receives likes",
        "[log] User1 points after second post: 200",
        "[log] User2 points after second like: 30",
        "Duration: 3ms",
        "[log] Ending test: Should track user engagement points correctly (passed)"
      ],
      "timestamp": "2025-04-20T13:28:24.381Z"
    },
    {
      "id": 201,
      "suiteName": "User Role Access",
      "testName": "Should allow user to access community features if they have the correct role",
      "description": "Should allow user to access community features if they have the correct role",
      "status": "passed",
      "duration": 8,
      "output": [
        "[log] Starting test: User Role Access - Should allow user to access community features if they have the correct role",
        "Duration: 1ms",
        "[log] Ending test: Should allow user to access community features if they have the correct role (passed)"
      ],
      "timestamp": "2025-04-20T13:28:25.278Z"
    }
  ],
  "systemInfo": {
    "memory": {
      "Mach Virtual Memory Statistics": "(page size of 16384 bytes)",
      "Pages free": "114502.",
      "Pages active": "543229.",
      "Pages inactive": "532759.",
      "Pages speculative": "7124.",
      "Pages throttled": "0.",
      "Pages wired down": "161722.",
      "Pages purgeable": "13190.",
      "\"Translation faults\"": "972187438.",
      "Pages copy-on-write": "25433155.",
      "Pages zero filled": "591745631.",
      "Pages reactivated": "70403660.",
      "Pages purged": "9510320.",
      "File-backed pages": "367922.",
      "Anonymous pages": "715190.",
      "Pages stored in compressor": "514759.",
      "Pages occupied by compressor": "170438.",
      "Decompressions": "43310311.",
      "Compressions": "54480460.",
      "Pageins": "12966663.",
      "Pageouts": "306726.",
      "Swapins": "12597.",
      "Swapouts": "56276."
    },
    "cpu": "CPU usage: 2.20% user, 8.1% sys, 89.77% idle",
    "disk": [
      "Filesystem      Size    Used   Avail Capacity iused ifree %iused  Mounted on",
      "/dev/disk3s5   460Gi   168Gi   265Gi    39%    4.0M  2.8G    0%   /System/Volumes/Data"
    ]
  },
  "suites": [
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "\u001b[33mCollectible Claiming\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "\u001b[33mCollectible Creation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "\u001b[33mCollectible Creation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "\u001b[33mCollectible Creation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "\u001b[33mCollectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "\u001b[33mCollectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "\u001b[33mCollectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "\u001b[33mDirect NFT Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 45
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 33
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 36
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "\u001b[35m1. Profile Creation & Validation\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 32
    },
    {
      "name": "\u001b[35m1. Tribe Creation & Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "\u001b[35m1. Tribe Management Access Control\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "\u001b[35m2. Advanced Scenarios & Edge Cases\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 49
    },
    {
      "name": "\u001b[35m2. Member Onboarding & Engagement\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 32
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 29
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 34
    },
    {
      "name": "\u001b[35m2. Tribe Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 34
    },
    {
      "name": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "\u001b[35m3. Combined User Journeys\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 45
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 35
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 25
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "\u001b[35m3. Content Creation & Interactions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 34
    },
    {
      "name": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 96
    },
    {
      "name": "\u001b[35m4. Project & Fundraising Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "\u001b[35m5. Advanced Collectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "\u001b[35m5. Advanced Collectible Management\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "\u001b[35m6. User Role Management & Permissions\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "\u001b[35m7. Frontend Integration Guide\u001b[39m",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 0
    },
    {
      "name": "Activity Scores",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Activity Scores",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 29
    },
    {
      "name": "Admin Functions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Admin Functions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "Basic Post Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Basic Post Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "Basic Post Creation and Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 36
    },
    {
      "name": "Basic Post Creation and Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "Basic Post Creation and Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "Collectible Claiming",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Collectible Claiming",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Collectible Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 17
    },
    {
      "name": "Collectible Management Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Community Update Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Content Creator Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 48
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "Contribution Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 59
    },
    {
      "name": "Encrypted Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Encrypted Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "Error Cases",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Error Cases",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Error Cases",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 50
    },
    {
      "name": "Event Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Event Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 7
    },
    {
      "name": "Event Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Event Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 7
    },
    {
      "name": "Event Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Event Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 54
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 49
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Feed Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 61
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 73
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 71
    },
    {
      "name": "Feed Querying",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 98
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 26
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Fundraiser Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 35
    },
    {
      "name": "Gated Post Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Gated Post Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "High-Demand Collectible Drop",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 24
    },
    {
      "name": "High-Demand Collectible Drop",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Invite Code Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Invite Code Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Invite Code Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Invite Code Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Journey 5.1: Create Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Journey 5.1: Create Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Journey 5.2: Vote on Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Journey 5.2: Vote on Proposal",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Journey 5.3: Unauthorized Vote Attempt",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "Journey 5.3: Unauthorized Vote Attempt",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Login Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 14
    },
    {
      "name": "Login Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Login Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Member Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Member Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Member Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Member Queries",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "Member Queries",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 30
    },
    {
      "name": "Member Status Transitions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Metadata Validation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Metadata Validation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Metadata Validation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Metadata Validation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 38
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "Milestone Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 49
    },
    {
      "name": "Moderation Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 25
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 41
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Negative Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 29
    },
    {
      "name": "NFT Gated Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "NFT Gated Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "NFT Gated Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Point Redemption",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 7
    },
    {
      "name": "Point Redemption",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 6
    },
    {
      "name": "Point Redemption",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 7
    },
    {
      "name": "Point System Analytics",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Point System Basic Operations",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Point System Basic Operations",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Point System Basic Operations",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Point System Integration with Collectibles",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Point System Integration with Collectibles",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Point System Negative Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Point System Negative Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Point System Negative Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 18
    },
    {
      "name": "Poll Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Post Interactions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Post Interactions",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 28
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 70
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 56
    },
    {
      "name": "Post Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 48
    },
    {
      "name": "Post Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Post Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 4
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 19
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Private Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Project Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 43
    },
    {
      "name": "Project Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 30
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 24
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Project Creation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Project Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 30
    },
    {
      "name": "Project Update Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 26
    },
    {
      "name": "Project Update Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 24
    },
    {
      "name": "Project Update Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 64
    },
    {
      "name": "Project Validation Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 24
    },
    {
      "name": "Resource Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 13
    },
    {
      "name": "Rich Media Posts",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Role Verification",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Role Verification",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Role Verification",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Role-based Access Control",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Role-based Access Control",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Scenario 1: Tribe Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Scenario 1: Tribe Creation",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Scenario 2: Update Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Scenario 2: Update Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 11
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Scenario 3: Join a Tribe",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Scenario 9.1: Creating a Community",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 29
    },
    {
      "name": "Scenario 9.1: Creating a Community",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 29
    },
    {
      "name": "Scenario 9.1: Creating a Community",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 27
    },
    {
      "name": "Security Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 42
    },
    {
      "name": "Security Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Security Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 74
    },
    {
      "name": "Signup Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 296
    },
    {
      "name": "Signup Journey",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 16
    },
    {
      "name": "Special Fan Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Special Fan Role Assignment",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Team Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 40
    },
    {
      "name": "Team Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 37
    },
    {
      "name": "Team Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 39
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 7
    },
    {
      "name": "Ticket Purchase",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 2
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 3
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 1
    },
    {
      "name": "Ticket Purchase and Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 5
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 8
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    },
    {
      "name": "Ticket Transfer",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Tribe Analytics",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 30
    },
    {
      "name": "Tribe Analytics",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 30
    },
    {
      "name": "Tribe Configuration Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Tribe Configuration Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Tribe Creation with Metadata",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 20
    },
    {
      "name": "Tribe Creation with Metadata",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Tribe Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 12
    },
    {
      "name": "Tribe Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 15
    },
    {
      "name": "Tribe Listing Tests",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 10
    },
    {
      "name": "Tribe Membership and Role Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "Tribe Membership and Role Management",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "Tribe Metadata Loading and Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "Tribe Metadata Loading and Updates",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 22
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 23
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 21
    },
    {
      "name": "User Flow Scenarios",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 31
    },
    {
      "name": "User Role Access",
      "totalTests": 1,
      "passedTests": 1,
      "failedTests": 0,
      "duration": 9
    }
  ]
}